{
  
    
        "post0": {
            "title": "데이터마이닝 기말 프로젝트",
            "content": "&#54644;&#50808;&#52629;&#44396;&#49440;&#49688; &#45936;&#51060;&#53552; &#48516;&#49437; &#48143; &#51060;&#51201;&#47308; &#50696;&#52769; &#47784;&#45944;&#47553; . 분석 동기 및 데이터 설명 . 분석 동기 | 데이터 설명 | . | 데이터 전처리 . 데이터 구조 파악 및 변수형 파악 | 변수 형태 파악 | 범주형 변수 개체 확인 | 파생변수 생성 | 결측치 여부 파악 | 이상치 여부 파악 | 데이터 스케일링 | . | 탐색적데이터분석 . 기초통계량 확인 | 변수의 분포 확인 | 시각화를 통한 인사이트 도출 및 검증 | 상관분석 | . | 데이터 모델링 . 다중회귀분석(모든변수, stepwise, 후진제거법) 모든 변수를 사용한 다중회귀분석 | 후진제거법을 사용한 다중회귀분석 | 단계적선택법을 사용한 다중회귀분석 | 결론 | . | 다중회귀분석(Lasso) 결론 | . | 머신러닝 기법 VotingRegressor | ExtraTreesRegressor | NGBRegressor | GradientBoostRegressor | XGBRegressor | LGBMRegressor | CatBoostRegressor | 최종 예측값 생성 | . | . | 결론 . 모델링 결론 | 분석에서 아쉬웠던 점 | . | . &#48516;&#49437; &#46041;&#44592; &#48143; &#45936;&#51060;&#53552; &#49444;&#47749; . 분석 동기 | 데이터 설명 | . &#48516;&#49437; &#46041;&#44592; . 해외축구선수 이적료 예측이라는 분석 주제를 선정한 이유는 필자는 스포츠 경기 보는 것을 좋아했었고 예전부터 스포츠 데이터 분석에 관심이 있었는데 축구선수 이적료 예측이라는 좋은 주제와 데이터가 데이콘에 있어서 주제로 선택해보았다. . 분석 순서는 데이터 설명 -&gt; 데이터 전처리 -&gt; 탐색적 데이터 분석 -&gt; 데이터 모델링 순으로 이루어져 있다. 각 분석과정에서 수행한 분석은 아래와 같다. . 데이터 설명 . 분석 동기 . | 데이터 설명 . | . 데이터 전처리 . 데이터 구조 파악 및 변수형 파악 . | 변수 형태 파악 . | 범주형 변수 개체 확인 . | 파생변수 생성 . | 결측치 여부 파악 . | 이상치 여부 파악 . | 데이터 스케일링 . | . 탐색적 데이터 분석 . 기초통계량 확인 . | 변수의 분포 확인 . | 시각화를 통한 인사이트 도출 및 검증 . | 상관분석 . | . 데이터 모델링 . 회귀분석 . | Lasso 회귀분석 . | 머신러닝 . | . &#45936;&#51060;&#53552; &#49444;&#47749; . 데이터는 train data와 test data가 분리된 채로 제공이 되며, train data는 설명변수 11개, 타겟변수 1개로 이루어져 있으며 test data는 설명변수 11개로 이루어져 있다. | . 설명변수 . ID: 선수 고유의 아이디 | Name: 선수의 이름 | Age: 선수의 나이 | Continent: 선수들의 국적이 포함되어있는 대륙 | Countract_until: 선수의 계약기간(연도) | Position: 선수가 선호하는 포지션 | Prefer_foot: 선수가 선호하는 발 | Reputation: 선수의 명성 | Stat_overall: 선수의 현재 능력치 | Stat_potential: 선수의 발전가능성 | Stat_skill_moves: 선수의 개인기 능력 | . 타겟변수 . Value: 피파가 선정한 선수의 이적료 | . &#45936;&#51060;&#53552; &#51204;&#52376;&#47532; . 데이터 구조 및 변수형 파악 . | 변수형태 파악 . | 범주형 변수 개체 확인 . | 파생변수 생성 . | 결측치 여부 확인 . | 이상치 여부 확인 . | 데이터 스케일링 . | . &#45936;&#51060;&#53552; &#44396;&#51312; &#48143; &#48320;&#49688;&#54805; &#54028;&#50501; . 데이터 제공 년도 2018 | . cd drive/My Drive/22-1_데이터마이닝/기말발표/피파 데이터 . import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns . train = pd.read_csv(&quot;FIFA_train.csv&quot;) train = train.iloc[:,1:] #필요없는 id열 제거 train = train.set_index(&quot;name&quot;) # 인덱스 이름으로 설정 . test = pd.read_csv(&quot;FIFA_test.csv&quot;) test = test.iloc[:,1:] #필요없는 id열 제거 test = test.set_index(&quot;name&quot;) # 인덱스 이름으로 설정 . test.head() . age continent contract_until position prefer_foot reputation stat_overall stat_potential stat_skill_moves . name . Cristiano Ronaldo 33 | europe | 2022 | ST | right | 5.0 | 94 | 94 | 5.0 | . Neymar Jr 26 | south america | 2022 | ST | right | 5.0 | 92 | 93 | 5.0 | . K. De Bruyne 27 | europe | 2023 | MF | right | 4.0 | 91 | 92 | 4.0 | . E. Hazard 27 | europe | 2020 | ST | right | 4.0 | 91 | 91 | 4.0 | . L. Modrić 32 | europe | 2020 | MF | right | 4.0 | 91 | 91 | 4.0 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; print(train.shape,&quot; n&quot;) # 8932행 10열 print(test.shape) # 3828행 9열 . (8932, 10) (3828, 9) . &#48320;&#49688; &#54805;&#53468; &#54028;&#50501; . 설명변수는 변수 형태는 연속형 5개, 범주형 4개로 이루어져있다. | 타겟변수는 연속형 변수이다. | . print(train.info(),&quot; n n&quot;) print(test.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 8932 entries, L. Messi to N. Christoffersson Data columns (total 10 columns): # Column Non-Null Count Dtype -- -- 0 age 8932 non-null int64 1 continent 8932 non-null object 2 contract_until 8932 non-null object 3 position 8932 non-null object 4 prefer_foot 8932 non-null object 5 reputation 8932 non-null float64 6 stat_overall 8932 non-null int64 7 stat_potential 8932 non-null int64 8 stat_skill_moves 8932 non-null float64 9 value 8932 non-null float64 dtypes: float64(3), int64(3), object(4) memory usage: 767.6+ KB None &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3828 entries, Cristiano Ronaldo to K. Fujikawa Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 age 3828 non-null int64 1 continent 3828 non-null object 2 contract_until 3828 non-null object 3 position 3828 non-null object 4 prefer_foot 3828 non-null object 5 reputation 3828 non-null float64 6 stat_overall 3828 non-null int64 7 stat_potential 3828 non-null int64 8 stat_skill_moves 3828 non-null float64 dtypes: float64(2), int64(3), object(4) memory usage: 299.1+ KB None . &#48276;&#51452;&#54805; &#48320;&#49688; &#44060;&#52404; &#54869;&#51064; . print(&quot;continent :&quot;, train[&quot;continent&quot;].unique(),&quot; n&quot;) print(&quot;contract_util :&quot;, train[&quot;contract_until&quot;].unique(),&quot; n&quot;) print(&quot;position :&quot;, train[&quot;position&quot;].unique(),&quot; n&quot;) print(&quot;prefer_foot :&quot;, train[&quot;prefer_foot&quot;].unique(),&quot; n&quot;) print(&quot;continent :&quot;, test[&quot;continent&quot;].unique(),&quot; n&quot;) print(&quot;contract_util :&quot;, test[&quot;contract_until&quot;].unique(),&quot; n&quot;) print(&quot;position :&quot;, test[&quot;position&quot;].unique(),&quot; n&quot;) print(&quot;prefer_foot :&quot;, test[&quot;prefer_foot&quot;].unique(),&quot; n&quot;) # 계약기간 변수가 이상하다. 날짜로 되어있는 데이터를 비율에 맞춰 연도와 같은 단위로 바꿔준다. . continent : [&#39;south america&#39; &#39;europe&#39; &#39;africa&#39; &#39;asia&#39; &#39;oceania&#39;] contract_util : [&#39;2021&#39; &#39;2020&#39; &#39;2019&#39; &#39;2023&#39; &#39;2022&#39; &#39;2024&#39; &#39;Jun 30, 2019&#39; &#39;2026&#39; &#39;Dec 31, 2018&#39; &#39;2018&#39; &#39;2025&#39; &#39;Jun 30, 2020&#39; &#39;May 31, 2020&#39; &#39;May 31, 2019&#39; &#39;Jan 31, 2019&#39; &#39;Jan 1, 2019&#39; &#39;Jan 12, 2019&#39;] position : [&#39;ST&#39; &#39;GK&#39; &#39;DF&#39; &#39;MF&#39;] prefer_foot : [&#39;left&#39; &#39;right&#39;] continent : [&#39;europe&#39; &#39;south america&#39; &#39;africa&#39; &#39;asia&#39; &#39;oceania&#39;] contract_util : [&#39;2022&#39; &#39;2023&#39; &#39;2020&#39; &#39;2021&#39; &#39;Jun 30, 2019&#39; &#39;2019&#39; &#39;2025&#39; &#39;2024&#39; &#39;2018&#39; &#39;May 31, 2020&#39; &#39;Jun 30, 2020&#39; &#39;May 31, 2019&#39; &#39;Dec 31, 2019&#39; &#39;Dec 31, 2018&#39; &#39;Jun 1, 2019&#39; &#39;Jan 1, 2019&#39; &#39;Jan 31, 2019&#39; &#39;2026&#39;] position : [&#39;ST&#39; &#39;MF&#39; &#39;DF&#39; &#39;GK&#39;] prefer_foot : [&#39;right&#39; &#39;left&#39;] . pd.value_counts(train[&quot;reputation&quot;]) . 1.0 8014 2.0 706 3.0 177 4.0 31 5.0 4 Name: reputation, dtype: int64 . 계약기간 변수의 단위가 연도가 아닌 연월일로 이루어진 데이터들이 있어서 같은 단위로 변환해주었다. . train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jun 30, 2020&quot;)] = &#39;2020.5&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jun 30, 2019&quot;)] = &#39;2019.5&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;May 31, 2020&quot;)] = &#39;2020.42&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;May 31, 2019&quot;)] = &#39;2019.42&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Dec 31, 2019&quot;)] = &#39;2020&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Dec 31, 2018&quot;)] = &#39;2019&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jun 1, 2019&quot;)] = &#39;2019&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jan 1, 2019&quot;)] = &#39;2019&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jan 31, 2019&quot;)] = &#39;2019.08&#39; train[&quot;contract_until&quot;][(train[&quot;contract_until&quot;] == &quot;Jan 12, 2019&quot;)] = &#39;2019.03&#39; . test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jun 30, 2020&quot;)] = &#39;2020.5&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jun 30, 2019&quot;)] = &#39;2019.5&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;May 31, 2020&quot;)] = &#39;2020.42&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;May 31, 2019&quot;)] = &#39;2019.42&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Dec 31, 2019&quot;)] = &#39;2020&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Dec 31, 2018&quot;)] = &#39;2019&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jun 1, 2019&quot;)] = &#39;2019&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jan 1, 2019&quot;)] = &#39;2019&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jan 31, 2019&quot;)] = &#39;2019.08&#39; test[&quot;contract_until&quot;][(test[&quot;contract_until&quot;] == &quot;Jan 12, 2019&quot;)] = &#39;2019.03&#39; . print(train[&quot;contract_until&quot;].unique(),&quot; n&quot;) print(train[&quot;contract_until&quot;].unique()) . [&#39;2021&#39; &#39;2020&#39; &#39;2019&#39; &#39;2023&#39; &#39;2022&#39; &#39;2024&#39; &#39;2019.5&#39; &#39;2026&#39; &#39;2018&#39; &#39;2025&#39; &#39;2020.5&#39; &#39;2020.42&#39; &#39;2019.42&#39; &#39;2019.08&#39; &#39;2019.03&#39;] [&#39;2021&#39; &#39;2020&#39; &#39;2019&#39; &#39;2023&#39; &#39;2022&#39; &#39;2024&#39; &#39;2019.5&#39; &#39;2026&#39; &#39;2018&#39; &#39;2025&#39; &#39;2020.5&#39; &#39;2020.42&#39; &#39;2019.42&#39; &#39;2019.08&#39; &#39;2019.03&#39;] . &#54028;&#49373;&#48320;&#49688; &#49373;&#49457; . 계약기간 변수를 활용하여 연속형 변수인 남은 계약기간 변수로 만들어주었고 원래의 계약기간 변수는 삭제해주었다. | . # 범주형 변수인 계약기간 변수에서 2018을 빼줘서 잔여계약연수라는 변수를 새로 만들어준다. 만든 후 계약기간 변수는 삭제해준다. train[&quot;new_contract&quot;] = train[&quot;contract_until&quot;].astype(&quot;float&quot;) - 2018 test[&quot;new_contract&quot;] = test[&quot;contract_until&quot;].astype(&quot;float&quot;) - 2018 #계약기간 변수 삭제 train = train.drop(&quot;contract_until&quot;,axis=1) test = test.drop(&quot;contract_until&quot;,axis=1) #기존 계약변수는 삭제되고 새로운 계약변수가 삽입되었음을 알 수 있다. print(train.info() , &quot; n n&quot;) print(test.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 8932 entries, L. Messi to N. Christoffersson Data columns (total 10 columns): # Column Non-Null Count Dtype -- -- 0 age 8932 non-null int64 1 continent 8932 non-null object 2 position 8932 non-null object 3 prefer_foot 8932 non-null object 4 reputation 8932 non-null float64 5 stat_overall 8932 non-null int64 6 stat_potential 8932 non-null int64 7 stat_skill_moves 8932 non-null float64 8 value 8932 non-null float64 9 new_contract 8932 non-null float64 dtypes: float64(4), int64(3), object(3) memory usage: 767.6+ KB None &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3828 entries, Cristiano Ronaldo to K. Fujikawa Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 age 3828 non-null int64 1 continent 3828 non-null object 2 position 3828 non-null object 3 prefer_foot 3828 non-null object 4 reputation 3828 non-null float64 5 stat_overall 3828 non-null int64 6 stat_potential 3828 non-null int64 7 stat_skill_moves 3828 non-null float64 8 new_contract 3828 non-null float64 dtypes: float64(3), int64(3), object(3) memory usage: 299.1+ KB None . print(train.new_contract.describe(),&quot; n&quot;) print(&quot;new_contract :&quot;, list(train.new_contract.unique())) . count 8932.000000 mean 2.231105 std 1.234711 min 0.000000 25% 1.000000 50% 2.000000 75% 3.000000 max 8.000000 Name: new_contract, dtype: float64 new_contract : [3.0, 2.0, 1.0, 5.0, 4.0, 6.0, 1.5, 8.0, 0.0, 7.0, 2.5, 2.4200000000000728, 1.4200000000000728, 1.0799999999999272, 1.0299999999999727] . &#44208;&#52769;&#52824; &#50668;&#48512; &#54028;&#50501; . 데이터에 결측치는 존재하지 않았다. | . print(train.isna().sum(),&quot; n&quot;) print(test.isna().sum()) # 전체 데이터에 결측치가 존재하지 않음을 알 수 있다. . age 0 continent 0 position 0 prefer_foot 0 reputation 0 stat_overall 0 stat_potential 0 stat_skill_moves 0 value 0 new_contract 0 dtype: int64 age 0 continent 0 position 0 prefer_foot 0 reputation 0 stat_overall 0 stat_potential 0 stat_skill_moves 0 new_contract 0 dtype: int64 . &#51060;&#49345;&#52824; &#50668;&#48512; &#54028;&#50501; . 이상치 기준은 평균에서 3시그마 이상 떨어진 값으로 규정하였다. . | 명성 변수와 이적료 변수는 한쪽으로 상당히 치우쳐져있어 이상치를 제거하면 다량의 정보손실을 가져오기 때문에 이상치 기준에서 제외하였다. . | 이상치를 제외하여 분석하였지만 예측모델의 정확도는 좋지 않았다. . | 이상치를 제외한 예측모델의 정확도가 좋지 않은 이유는 변수들의 이상치 기준이 해외축구에서 충분히 가능한 정도이고 test data에도 이러한 이상치들이 포함되어 있을 것이라고 판단하였고, 이상치를 포함하여 분석을 시행하기로 결정하였다. . | . print(np.mean(train) + 3*np.std(train)) print(np.mean(train) - 3*np.std(train)) . age 3.911490e+01 reputation 2.402182e+00 stat_overall 8.765471e+01 stat_potential 8.996064e+01 stat_skill_moves 4.729714e+00 value 2.030064e+07 new_contract 5.935032e+00 dtype: float64 age 1.130337e+01 reputation -1.404268e-01 stat_overall 4.652755e+01 stat_potential 5.403377e+01 stat_skill_moves 7.368917e-02 value -1.474329e+07 new_contract -1.472822e+00 dtype: float64 . /usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3438: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. return mean(axis=axis, dtype=dtype, out=out, **kwargs) /usr/local/lib/python3.7/dist-packages/numpy/core/fromnumeric.py:3579: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. return std(axis=axis, dtype=dtype, out=out, ddof=ddof, **kwargs) . &#39;&#39;&#39; 이상치 제거 후 모델링을 수행하였지만 결과가 처참하였다. 이는 test data에도 3sigma를 벗어나는 값들이 다수 존재하고 벗어난 값 역시 충분히 가능한 수치이기 때문이라고 판단하여 이상치 제거를 하지 않는 방향으로 설정하였다. train = train[(train.age &lt; np.mean(train.age)+3*np.std(train.age)) &amp; (train.age &gt; np.mean(train.age)-3*np.std(train.age))] train = train[(train.stat_overall &lt; np.mean(train.stat_overall)+3*np.std(train.stat_overall)) &amp; (train.stat_overall&gt; np.mean(train.stat_overall)-3*np.std(train.stat_overall))] train = train[(train.stat_potential &lt; np.mean(train.stat_potential)+3*np.std(train.stat_potential)) &amp; (train.stat_potential &gt; np.mean(train.stat_potential)-3*np.std(train.stat_potential))] train = train[(train.stat_skill_moves &lt; np.mean(train.stat_skill_moves)+3*np.std(train.stat_skill_moves)) &amp; (train.age &gt; np.mean(train.stat_skill_moves)-3*np.std(train.stat_skill_moves))] train = train[(train.new_contract &lt; np.mean(train.new_contract)+3*np.std(train.new_contract)) &amp; (train.new_contract &gt; np.mean(train.new_contract)-3*np.std(train.new_contract))] # 8932 -&gt; 8839개로 줄었다. train.shape &#39;&#39;&#39; . &#45936;&#51060;&#53552; &#49828;&#52992;&#51068;&#47553; . 연속형 데이터의 범위가 유사할수록 모델의 정확도는 올라간다. . | 데이터를 설명변수와 타겟변수로 분할한 후 연속형 변수에 대한 데이터 스케일링을 수행하였다. . | . X_train = train.drop(&quot;value&quot;,axis=1) y_train = train[[&quot;value&quot;]] . print(X_train.info()) print(test.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 8932 entries, L. Messi to N. Christoffersson Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 age 8932 non-null int64 1 continent 8932 non-null object 2 position 8932 non-null object 3 prefer_foot 8932 non-null object 4 reputation 8932 non-null float64 5 stat_overall 8932 non-null int64 6 stat_potential 8932 non-null int64 7 stat_skill_moves 8932 non-null float64 8 new_contract 8932 non-null float64 dtypes: float64(3), int64(3), object(3) memory usage: 697.8+ KB None &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3828 entries, Cristiano Ronaldo to K. Fujikawa Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 age 3828 non-null int64 1 continent 3828 non-null object 2 position 3828 non-null object 3 prefer_foot 3828 non-null object 4 reputation 3828 non-null float64 5 stat_overall 3828 non-null int64 6 stat_potential 3828 non-null int64 7 stat_skill_moves 3828 non-null float64 8 new_contract 3828 non-null float64 dtypes: float64(3), int64(3), object(3) memory usage: 299.1+ KB None . # 연속형 데이터의 범위가 비슷할수록 정확도가 올라간다. from sklearn.preprocessing import StandardScaler scaler = StandardScaler() Xtr_scaled = scaler.fit_transform(X_train.iloc[:,[0,4,5,6,7,8]]) Xte_scaled = scaler.transform(test.iloc[:,[0,4,5,6,7,8]]) #X_train scaling fit으로 스케일링 해준다. #array -&gt; dataframe Xtr_scaled = pd.DataFrame(Xtr_scaled,columns = [&quot;age_scaled&quot;,&quot;reputation_scaled&quot;,&quot;overall_scaled&quot;,&quot;potential_scaled&quot;,&quot;skill_scaled&quot;,&quot;contract_scaled&quot;],index = X_train.index) Xte_scaled = pd.DataFrame(Xte_scaled,columns = [&quot;age_scaled&quot;,&quot;reputation_scaled&quot;,&quot;overall_scaled&quot;,&quot;potential_scaled&quot;,&quot;skill_scaled&quot;,&quot;contract_scaled&quot;],index = test.index) # 범주형 변수와 다시 결합 X_train = pd.concat([X_train.iloc[:,[1,2,3]],Xtr_scaled],axis=1) X_test = pd.concat([test.iloc[:,[1,2,3]],Xte_scaled],axis=1) #데이터가 잘 붙었음을 알 수 있다. print(X_train.info() , &quot; n n&quot;) print(X_test.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 8932 entries, L. Messi to N. Christoffersson Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 continent 8932 non-null object 1 position 8932 non-null object 2 prefer_foot 8932 non-null object 3 age_scaled 8932 non-null float64 4 reputation_scaled 8932 non-null float64 5 overall_scaled 8932 non-null float64 6 potential_scaled 8932 non-null float64 7 skill_scaled 8932 non-null float64 8 contract_scaled 8932 non-null float64 dtypes: float64(6), object(3) memory usage: 697.8+ KB None &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3828 entries, Cristiano Ronaldo to K. Fujikawa Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 continent 3828 non-null object 1 position 3828 non-null object 2 prefer_foot 3828 non-null object 3 age_scaled 3828 non-null float64 4 reputation_scaled 3828 non-null float64 5 overall_scaled 3828 non-null float64 6 potential_scaled 3828 non-null float64 7 skill_scaled 3828 non-null float64 8 contract_scaled 3828 non-null float64 dtypes: float64(6), object(3) memory usage: 299.1+ KB None . &#53456;&#49353;&#51201; &#45936;&#51060;&#53552;&#48516;&#49437; . 기초통계량 확인 . | 변수의 분포 파악 . | 시각화를 통한 인사이트 발견 . | 인사이트 검증 . | 설명변수와 타겟변수 간의 상관분석 . | . &#44592;&#52488;&#53685;&#44228;&#47049; &#54869;&#51064; . X_train.describe() . age_scaled reputation_scaled overall_scaled potential_scaled skill_scaled contract_scaled . count 8.932000e+03 | 8.932000e+03 | 8.932000e+03 | 8.932000e+03 | 8.932000e+03 | 8.932000e+03 | . mean -7.886611e-15 | 4.642888e-14 | 3.397292e-15 | -1.529353e-16 | -1.110065e-14 | 3.471106e-15 | . std 1.000056e+00 | 1.000056e+00 | 1.000056e+00 | 1.000056e+00 | 1.000056e+00 | 1.000056e+00 | . min -1.986759e+00 | -3.088428e-01 | -2.931075e+00 | -4.007675e+00 | -1.806307e+00 | -1.807086e+00 | . 25% -9.080698e-01 | -3.088428e-01 | -5.968513e-01 | -6.675562e-01 | -5.176541e-01 | -9.971350e-01 | . 50% -4.511848e-02 | -3.088428e-01 | -1.329530e-02 | 4.674371e-04 | -5.176541e-01 | -1.871838e-01 | . 75% 6.020950e-01 | -3.088428e-01 | 7.161497e-01 | 6.684911e-01 | 7.709987e-01 | 6.227674e-01 | . max 3.190949e+00 | 9.130280e+00 | 3.925708e+00 | 3.674598e+00 | 3.348304e+00 | 4.672523e+00 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; X_test.describe() # train과 test 데이터의 분포가 유사함을 알 수 있다. . age_scaled reputation_scaled overall_scaled potential_scaled skill_scaled contract_scaled . count 3828.000000 | 3828.000000 | 3828.000000 | 3828.000000 | 3828.000000 | 3828.000000 | . mean 0.019129 | 0.030823 | 0.035868 | 0.018442 | 0.016928 | 0.034338 | . std 0.998486 | 1.058279 | 1.007920 | 1.024319 | 1.006635 | 1.025627 | . min -1.986759 | -0.308843 | -2.931075 | -3.339651 | -1.806307 | -1.807086 | . 25% -0.692332 | -0.308843 | -0.596851 | -0.667556 | -0.517654 | -0.997135 | . 50% -0.045118 | -0.308843 | -0.013295 | 0.000467 | -0.517654 | -0.187184 | . 75% 0.817833 | -0.308843 | 0.716150 | 0.668491 | 0.770999 | 0.622767 | . max 3.622425 | 9.130280 | 3.925708 | 3.841604 | 3.348304 | 4.672523 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; &#48320;&#49688;&#51032; &#48516;&#54252; &#54869;&#51064; . 분포 시각화 결과 reputation_scaled, value 변수의 좌로 치우침이 심한 것으로 보인다. . | 로그 변환을 통해 분포를 안정화 시켜주었다. . | . sns.pairplot(pd.concat([X_train,y_train],axis=1),kind=&quot;reg&quot;,diag_kind=&quot;kde&quot;) plt.show() . numerical_feats_X = X_train.dtypes[X_train.dtypes != &quot;object&quot;].index for col in numerical_feats_X: print(&#39;{:15}&#39;.format(col), &#39;Skewness: {:05.2f}&#39;.format(X_train[col].skew()) , &#39; &#39; , &#39;Kurtosis: {:06.2f}&#39;.format(X_train[col].kurt()) ) # 산점도와 왜도, 첨도를 계산해보니 reputatio_scaled 변환이 필요해보인다. . age_scaled Skewness: 00.36 Kurtosis: -00.53 reputation_scaled Skewness: 03.77 Kurtosis: 016.32 overall_scaled Skewness: 00.03 Kurtosis: 000.11 potential_scaled Skewness: 00.29 Kurtosis: 000.06 skill_scaled Skewness: 00.09 Kurtosis: -00.16 contract_scaled Skewness: 00.52 Kurtosis: -00.26 . numerical_feats_y = y_train.dtypes[y_train.dtypes != &quot;object&quot;].index for col in numerical_feats_y: print(&#39;{:15}&#39;.format(col), &#39;Skewness: {:05.2f}&#39;.format(y_train[col].skew()) , &#39; &#39; , &#39;Kurtosis: {:06.2f}&#39;.format(y_train[col].kurt()) ) # value의 왜도를 보니 좌측으로 심하게 치우쳐있다. # 로그변환을 취해준다. . value Skewness: 05.89 Kurtosis: 052.05 . print(&quot;skew : &quot;,np.log1p(X_train[[&quot;reputation_scaled&quot;]]).skew()) print(&quot;skew : &quot;,np.log1p(X_train[[&quot;reputation_scaled&quot;]]).kurt()) . skew : reputation_scaled 2.795525 dtype: float64 skew : reputation_scaled 6.313924 dtype: float64 . print(&quot;skew : &quot;,np.log1p(y_train[[&quot;value&quot;]]).skew()) print(&quot;kert : &quot;,np.log1p(y_train[[&quot;value&quot;]]).kurt()) . skew : value 0.308798 dtype: float64 kert : value -0.199544 dtype: float64 . X_train[&quot;reputation_scaled&quot;] = np.log1p(X_train[[&quot;reputation_scaled&quot;]]) X_test[&quot;reputation_scaled&quot;] = np.log1p(X_test[[&quot;reputation_scaled&quot;]]) print(pd.value_counts(X_train[&quot;reputation_scaled&quot;]),&quot; n&quot;) print(pd.value_counts(X_test[&quot;reputation_scaled&quot;]),&quot; n&quot;) . -0.369388 8014 1.115449 706 1.688382 177 2.050334 31 2.315529 4 Name: reputation_scaled, dtype: int64 -0.369388 3402 1.115449 323 1.688382 83 2.050334 18 2.315529 2 Name: reputation_scaled, dtype: int64 . y_train[&quot;value&quot;] = np.log1p(y_train[[&quot;value&quot;]]) y_train[&quot;value&quot;] . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy &#34;&#34;&#34;Entry point for launching an IPython kernel. . name L. Messi 18.520526 De Gea 18.092177 L. Suárez 18.197537 Sergio Ramos 17.747336 J. Oblak 18.035018 ... S. Adewusi 11.002117 C. Ehlich 10.596660 N. Fuentes 10.819798 J. Milli 10.819798 N. Christoffersson 11.002117 Name: value, Length: 8932, dtype: float64 . &#49884;&#44033;&#54868;&#47484; &#53685;&#54620; &#51064;&#49324;&#51060;&#53944; &#46020;&#52636; &#48143; &#44160;&#51613; . import plotly.express as px fig = px.box(train,x=&#39;continent&#39;,y=&quot;value&quot;,points=&quot;all&quot;,notched=True,color=&quot;continent&quot;) fig.show() . . . from statsmodels.stats.multicomp import pairwise_tukeyhsd from statsmodels.stats.multicomp import MultiComparison mc = MultiComparison(train[&#39;value&#39;],train[&#39;continent&#39;]) mc_results = mc.tukeyhsd() print(mc_results) . Multiple Comparison of Means - Tukey HSD, FWER=0.05 ============================================================================= group1 group2 meandiff p-adj lower upper reject -- africa asia -1937100.7548 0.001 -2754054.033 -1120147.4766 True africa europe -44122.1142 0.9 -673009.3458 584765.1174 False africa oceania -2149704.0222 0.001 -3485127.1572 -814280.8872 True africa south america 210957.5836 0.9 -480876.6503 902791.8174 False asia europe 1892978.6406 0.001 1287760.6785 2498196.6027 True asia oceania -212603.2674 0.9 -1537044.5009 1111837.9662 False asia south america 2148058.3384 0.001 1477667.2296 2818449.4472 True europe oceania -2105581.908 0.001 -3323051.0338 -888112.7821 True europe south america 255079.6978 0.4655 -166240.5249 676399.9204 False oceania south america 2360661.6058 0.001 1109515.5194 3611807.6921 True -- . /usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm . 시각적으로 보았을때는 남미, 유럽, 아프리카는 비슷한 분포를 띄고 아시아와 오세아니아는 앞의 세 나라와 이적료의 차이가 유의미해 보인다. . | tukey 다중비교 분석을 수행한 결과 박스플롯 그래프를 보고 판단했을때처럼 유럽, 남미, 아프리카 선수의 이적료와 아시아, 오세아니아 선수의 이적료는 유의미한 차이가 있다. . | 대륙 변수는 이적료를 예측하는데 중요한 변수임을 알 수 있었다. . | . fig = px.box(train,x=&#39;position&#39;,y=&quot;value&quot;,points=&quot;all&quot;,notched=True,color=&quot;position&quot;) fig.show() . . . mc = MultiComparison(train[&#39;value&#39;],train[&#39;position&#39;]) mc_results = mc.tukeyhsd() print(mc_results) . Multiple Comparison of Means - Tukey HSD, FWER=0.05 ================================================================== group1 group2 meandiff p-adj lower upper reject DF GK -312274.4913 0.4632 -861913.6089 237364.6263 False DF MF 817414.0563 0.001 436073.3868 1198754.7259 True DF ST 1026012.7998 0.001 566260.1801 1485765.4196 True GK MF 1129688.5476 0.001 593770.6423 1665606.4529 True GK ST 1338287.2911 0.001 744014.823 1932559.7592 True MF ST 208598.7435 0.6064 -234658.8712 651856.3582 False . 시각적으로 보았을때는 포지션 별 이적료의 차이는 유의미해보이지 않는다. . | tukey 다중비교를 수행한 결과 박스플롯 그래프를 보고 판단했을때와 다르게 (수비수 -&gt; 미드필더, 공격수), (골키퍼 -&gt; 미드필더, 공격수)에 유의미한 이적료의 차이가 있다. . | 포지션은 이적료를 예측하는데 중요한 변수임을 알 수 있었다. . | . fig = px.box(train,x=&#39;prefer_foot&#39;,y=&quot;value&quot;,points=&quot;all&quot;,notched=True,color=&quot;prefer_foot&quot;) fig.show() . . . mc = MultiComparison(train[&#39;value&#39;],train[&#39;prefer_foot&#39;]) mc_results = mc.tukeyhsd() print(mc_results) # 박스플롯 그래프를 보고 판단했을때처럼 주발에 따른 이적료는 유의미한 차이가 없다. 주발 별 이적료의 유의미한 차이가 없다는 것은 주발은 이적료를 설명하기 부적절한 변수라는 것을 뜻한다. . Multiple Comparison of Means - Tukey HSD, FWER=0.05 ================================================================= group1 group2 meandiff p-adj lower upper reject -- left right -113081.4378 0.4382 -399006.3823 172843.5068 False -- . 시각적으로 보았을때는 선수들이 주로 사용하는 발에 따른 이적료의 차이는 없어보인다. . | tukey 다중비교 결과 박스플롯 그래프를 보고 판단했을때처럼 주발에 따른 이적료는 유의미한 차이가 없다. . | 선수들이 주로 사용하는 발은 다른 변수에 비해 이적료를 예측하는데 상대적으로 중요하지 않은 변수임을 알 수 있었다. . | . &#49345;&#44288;&#48516;&#49437; . 상관분석을 하기 위해서 범주형 변수들을 더미변수로 바꿔주어야한다. . | 더미변수는 집단-1개로 만들어준다. . | . X_train_dum = pd.get_dummies(X_train,drop_first = True) # drop_first는 집단을 하나 제거하고 더미변수로 만드는 것이다. X_test_dum = pd.get_dummies(X_test,drop_first = True) X_train_dum.info() #더미변수가 잘 만들어졌음을 알 수 있다. . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 8932 entries, L. Messi to N. Christoffersson Data columns (total 14 columns): # Column Non-Null Count Dtype -- -- 0 age_scaled 8932 non-null float64 1 reputation_scaled 8932 non-null float64 2 overall_scaled 8932 non-null float64 3 potential_scaled 8932 non-null float64 4 skill_scaled 8932 non-null float64 5 contract_scaled 8932 non-null float64 6 continent_asia 8932 non-null uint8 7 continent_europe 8932 non-null uint8 8 continent_oceania 8932 non-null uint8 9 continent_south america 8932 non-null uint8 10 position_GK 8932 non-null uint8 11 position_MF 8932 non-null uint8 12 position_ST 8932 non-null uint8 13 prefer_foot_right 8932 non-null uint8 dtypes: float64(6), uint8(8) memory usage: 816.3+ KB . corr = pd.concat([train[[&quot;value&quot;]],X_train_dum],axis=1).corr() corr.iloc[0,:] #상관분석 결과 value와 연관이 있다고 보이는 변수는 reputation, overall_scaled, potential_scaled이다. . value 1.000000 age_scaled 0.087319 reputation_scaled 0.611712 overall_scaled 0.658444 potential_scaled 0.611907 skill_scaled 0.298500 contract_scaled 0.235552 continent_asia -0.092792 continent_europe 0.031069 continent_oceania -0.047345 continent_south america 0.036327 position_GK -0.048034 position_MF 0.046358 position_ST 0.045879 prefer_foot_right -0.008204 Name: value, dtype: float64 . import seaborn as sn import matplotlib.pyplot as plt plt.rcParams[&quot;figure.figsize&quot;] = (14,8) sn.heatmap(corr,annot=True,fmt=&quot;.2f&quot;,cmap=&quot;YlGnBu&quot;) plt.show() . 상관계수가 높은 reputation, overall_scaled, potential_scaled과 value의 산점도를 그려 관계를 파악 | . import plotly.express as px fig1 = px.scatter(y = pd.concat([X_train,y_train],axis=1)[&quot;value&quot;],x = pd.concat([X_train,y_train],axis=1)[&quot;reputation_scaled&quot;],trendline=&quot;ols&quot;) fig2 = px.scatter(y = pd.concat([X_train,y_train],axis=1)[&quot;value&quot;],x = pd.concat([X_train,y_train],axis=1)[&quot;potential_scaled&quot;],trendline=&quot;ols&quot;) fig3 = px.scatter(y = pd.concat([X_train,y_train],axis=1)[&quot;value&quot;],x = pd.concat([X_train,y_train],axis=1)[&quot;overall_scaled&quot;],trendline=&quot;ols&quot;) #value-reputation_scaled scatter plot fig1.show() #value-potential_scaled scatter plot fig2.show() #value-overall_scaled scatter plot fig3.show() . Output hidden; open in https://colab.research.google.com to view. . 다수의 값이 최저값을 가지고있는 명성 변수는 회귀선이 이적료를 잘 설명한다고 할 수 없다. . | 잠재력 변수는 고르게 분포되어있어 명성 변수에 비해서 회귀선이 어느정도는 이적료를 잘 설명한다. . | 능력치 변수는 고르게 분포되어있어 명성 변수에 비해서 회귀선이 어느정도는 이적료를 잘 설명하고 세 변수 중 오차가 가장 적어보인다. . | . &#45936;&#51060;&#53552; &#47784;&#45944;&#47553; . 다중회귀분석(변수선택법) VS Lasso 회귀분석 VS 머신러닝 | . &#45796;&#51473;&#54924;&#44480;&#48516;&#49437;(&#47784;&#46304;&#48320;&#49688;, stepwise, &#54980;&#51652;&#51228;&#44144;&#48277;) . &#47784;&#46304; &#48320;&#49688;&#47484; &#49324;&#50857;&#54620; &#45796;&#51473;&#54924;&#44480;&#48516;&#49437; . 회귀분석은 관찰된 연속형 변수들에 대해 변수 사이의 모형을 구한 뒤 적합도를 측정해 내는 분석 방법이고, 이는 통계적 예측에 사용될 수 있다. | . import statsmodels.api as sm model1 = sm.OLS(y_train, sm.add_constant(X_train_dum)).fit() print(model1.summary()) # 결정계수 96.9% 다중공선성 문제 X . OLS Regression Results ============================================================================== Dep. Variable: value R-squared: 0.969 Model: OLS Adj. R-squared: 0.969 Method: Least Squares F-statistic: 2.013e+04 Date: Sun, 29 May 2022 Prob (F-statistic): 0.00 Time: 04:40:08 Log-Likelihood: -127.95 No. Observations: 8932 AIC: 285.9 Df Residuals: 8917 BIC: 392.4 Df Model: 14 Covariance Type: nonrobust =========================================================================================== coef std err t P&gt;|t| [0.025 0.975] - const 13.7217 0.011 1229.330 0.000 13.700 13.744 age_scaled -0.4686 0.005 -86.470 0.000 -0.479 -0.458 reputation_scaled 0.0213 0.006 3.420 0.001 0.009 0.033 overall_scaled 1.5412 0.007 216.106 0.000 1.527 1.555 potential_scaled -0.0417 0.006 -6.632 0.000 -0.054 -0.029 skill_scaled 0.0264 0.004 6.134 0.000 0.018 0.035 contract_scaled 0.0004 0.003 0.146 0.884 -0.005 0.006 continent_asia 0.0230 0.013 1.775 0.076 -0.002 0.048 continent_europe -0.0133 0.010 -1.352 0.177 -0.033 0.006 continent_oceania -0.0344 0.021 -1.651 0.099 -0.075 0.006 continent_south america 0.0019 0.011 0.179 0.858 -0.019 0.023 position_GK -0.0837 0.011 -7.536 0.000 -0.106 -0.062 position_MF 0.1247 0.007 17.955 0.000 0.111 0.138 position_ST 0.1782 0.008 21.673 0.000 0.162 0.194 prefer_foot_right 0.0134 0.006 2.132 0.033 0.001 0.026 ============================================================================== Omnibus: 2208.274 Durbin-Watson: 1.219 Prob(Omnibus): 0.000 Jarque-Bera (JB): 11494.908 Skew: -1.092 Prob(JB): 0.00 Kurtosis: 8.110 Cond. No. 14.2 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. . /usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument &#39;objs&#39; will be keyword-only x = pd.concat(x[::order], 1) . lr1 = model1.predict(sm.add_constant(X_train_dum)) np.expm1(lr1) #모든변수 사용한 회귀분석 예측값 . /usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument &#39;objs&#39; will be keyword-only x = pd.concat(x[::order], 1) . name L. Messi 2.450750e+08 De Gea 1.298861e+08 L. Suárez 1.248764e+08 Sergio Ramos 9.246280e+07 J. Oblak 1.260462e+08 ... S. Adewusi 3.191534e+04 C. Ehlich 1.995368e+04 N. Fuentes 2.165434e+04 J. Milli 1.882700e+04 N. Christoffersson 2.319113e+04 Length: 8932, dtype: float64 . &#54980;&#51652;&#51228;&#44144;&#48277;&#51012; &#49324;&#50857;&#54620; &#45796;&#51473;&#54924;&#44480;&#48516;&#49437; . 후진제거법은 설명변수 후보 모두를 포함한 모형에서 출발해 가장 적은 영향을 주는 변수부터 하나씩 제거하면서 더 이상 제거할 변수가 없을 때의 모형을 선택한다. | . def backward_regression(X, y, initial_list=[], threshold_out = 0.05, # P-value 임계값 (제거 기준) feature_list = X_train_dum.columns.tolist() ): sv_per_step = [] ## 각 스텝별로 선택된 변수들 adj_r_squared_list = [] ## 각 스텝별 수정된 결정계수 steps = [] ## 스텝 step = 0 included = feature_list while True: changed=False model = sm.OLS(y, sm.add_constant(pd.DataFrame(X[feature_list]))).fit(disp=0) # use all coefs except intercept pvalues = model.pvalues.iloc[1:] # 각 feature의 P값을 의미함 worst_pval = pvalues.max() # P 값이 가장 높은 것 선정 if worst_pval &gt; threshold_out: changed=True worst_feature = pvalues.idxmax() included.remove(worst_feature) step += 1 steps.append(step) adj_r_squared = sm.OLS(y, sm.add_constant(pd.DataFrame(X[feature_list]))).fit(disp=0).rsquared_adj adj_r_squared_list.append(adj_r_squared) sv_per_step.append(included.copy()) if not changed: break return included,step,steps,adj_r_squared_list,sv_per_step backward_valriables_function,step,steps,adj_r_squared_list,sv_per_step = backward_regression(X_train_dum, y_train) print(backward_valriables_function) . [&#39;age_scaled&#39;, &#39;reputation_scaled&#39;, &#39;overall_scaled&#39;, &#39;potential_scaled&#39;, &#39;skill_scaled&#39;, &#39;continent_asia&#39;, &#39;continent_europe&#39;, &#39;position_GK&#39;, &#39;position_MF&#39;, &#39;position_ST&#39;, &#39;prefer_foot_right&#39;] . /usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument &#39;objs&#39; will be keyword-only x = pd.concat(x[::order], 1) . model2 = sm.OLS(y_train, sm.add_constant(pd.DataFrame(X_train_dum[backward_valriables_function]))).fit(disp=0) print(model2.summary()) # 후진제거법은 &#39;age_scaled&#39;, &#39;reputation_scaled&#39;, &#39;overall_scaled&#39;, &#39;potential_scaled&#39;, &#39;skill_scaled&#39;, &#39;continent_asia&#39;, &#39;continent_europe&#39;, &#39;position_GK&#39;, &#39;position_MF&#39;, &#39;position_ST&#39;, &#39;prefer_foot_right&#39; 총 11개 변수 사용 # 결정계수는 96.9% 모든 변수 유의수준 5% 이내에서 유의 . OLS Regression Results ============================================================================== Dep. Variable: value R-squared: 0.969 Model: OLS Adj. R-squared: 0.969 Method: Least Squares F-statistic: 2.562e+04 Date: Sun, 29 May 2022 Prob (F-statistic): 0.00 Time: 04:40:16 Log-Likelihood: -129.71 No. Observations: 8932 AIC: 283.4 Df Residuals: 8920 BIC: 368.6 Df Model: 11 Covariance Type: nonrobust ===================================================================================== coef std err t P&gt;|t| [0.025 0.975] - const 13.7207 0.008 1788.862 0.000 13.706 13.736 age_scaled -0.4683 0.005 -87.647 0.000 -0.479 -0.458 reputation_scaled 0.0208 0.006 3.352 0.001 0.009 0.033 overall_scaled 1.5414 0.007 217.707 0.000 1.528 1.555 potential_scaled -0.0412 0.006 -6.568 0.000 -0.053 -0.029 skill_scaled 0.0263 0.004 6.121 0.000 0.018 0.035 continent_asia 0.0244 0.010 2.399 0.016 0.004 0.044 continent_europe -0.0124 0.006 -2.139 0.032 -0.024 -0.001 position_GK -0.0840 0.011 -7.558 0.000 -0.106 -0.062 position_MF 0.1247 0.007 17.963 0.000 0.111 0.138 position_ST 0.1784 0.008 21.708 0.000 0.162 0.195 prefer_foot_right 0.0133 0.006 2.124 0.034 0.001 0.026 ============================================================================== Omnibus: 2208.925 Durbin-Watson: 1.218 Prob(Omnibus): 0.000 Jarque-Bera (JB): 11495.048 Skew: -1.093 Prob(JB): 0.00 Kurtosis: 8.110 Cond. No. 6.84 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. . /usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument &#39;objs&#39; will be keyword-only x = pd.concat(x[::order], 1) . lr2 = model2.predict(sm.add_constant(X_train_dum[backward_valriables_function])) np.expm1(lr2) #후진제거법 예측값 . /usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:117: FutureWarning: In a future version of pandas all arguments of concat except for the argument &#39;objs&#39; will be keyword-only x = pd.concat(x[::order], 1) . name L. Messi 2.449055e+08 De Gea 1.301312e+08 L. Suárez 1.247442e+08 Sergio Ramos 9.265427e+07 J. Oblak 1.262429e+08 ... S. Adewusi 3.183719e+04 C. Ehlich 1.990885e+04 N. Fuentes 2.154736e+04 J. Milli 1.878543e+04 N. Christoffersson 2.315219e+04 Length: 8932, dtype: float64 . &#45800;&#44228;&#51201;&#49440;&#53469;&#48277;&#51012; &#49324;&#50857;&#54620; &#45796;&#51473;&#54924;&#44480;&#48516;&#49437; . 단계적선택법은 전진선택법에 의해 변수를 추가하면서 새롭게 추가된 변수에 기인해 기존 변수의 중요도가 약화되면 해당변수를 제거하는 등 단계별로 추가 또는 제거되는 변수의 여부를 검토해 더 이상 없을 때 중단하는 방식이다. | . def stepwise_feature_selection(X_train, y_train, variables=X_train_dum.columns.tolist() ): import statsmodels.api as sm import matplotlib.pyplot as plt import warnings warnings.filterwarnings(&quot;ignore&quot;) y = y_train ## 반응 변수 selected_variables = [] ## 선택된 변수들 sl_enter = 0.05 sl_remove = 0.05 sv_per_step = [] ## 각 스텝별로 선택된 변수들 adjusted_r_squared = [] ## 각 스텝별 수정된 결정계수 steps = [] ## 스텝 step = 0 while len(variables) &gt; 0: remainder = list(set(variables) - set(selected_variables)) pval = pd.Series(index=remainder) ## 변수의 p-value ## 기존에 포함된 변수와 새로운 변수 하나씩 돌아가면서 ## 선형 모형을 적합한다. for col in remainder: X = X_train[selected_variables+[col]] X = sm.add_constant(X) model = sm.OLS(y,X).fit(disp=0) pval[col] = model.pvalues[col] min_pval = pval.min() if min_pval &lt; sl_enter: ## 최소 p-value 값이 기준 값보다 작으면 포함 selected_variables.append(pval.idxmin()) ## 선택된 변수들에대해서 ## 어떤 변수를 제거할지 고른다. while len(selected_variables) &gt; 0: selected_X = X_train[selected_variables] selected_X = sm.add_constant(selected_X) selected_pval = sm.OLS(y,selected_X).fit(disp=0).pvalues[1:] ## 절편항의 p-value는 뺀다 max_pval = selected_pval.max() if max_pval &gt;= sl_remove: ## 최대 p-value값이 기준값보다 크거나 같으면 제외 remove_variable = selected_pval.idxmax() selected_variables.remove(remove_variable) else: break step += 1 steps.append(step) adj_r_squared = sm.OLS(y,sm.add_constant(X_train[selected_variables])).fit(disp=0).rsquared_adj adjusted_r_squared.append(adj_r_squared) sv_per_step.append(selected_variables.copy()) else: break return selected_variables selected_variables = stepwise_feature_selection(X_train_dum, y_train) print(selected_variables) . [&#39;skill_scaled&#39;, &#39;potential_scaled&#39;, &#39;overall_scaled&#39;, &#39;age_scaled&#39;, &#39;position_ST&#39;, &#39;position_MF&#39;, &#39;position_GK&#39;, &#39;continent_asia&#39;, &#39;reputation_scaled&#39;, &#39;continent_south america&#39;, &#39;prefer_foot_right&#39;] . model3 = sm.OLS(y_train, sm.add_constant(pd.DataFrame(X_train_dum[selected_variables]))).fit(disp=0) print(model3.summary()) # stepwise 변수선택법은 &#39;reputation_scaled&#39;, &#39;skill_scaled&#39;, &#39;potential_scaled&#39;, &#39;age_scaled&#39;, &#39;overall_scaled&#39;, &#39;position_ST&#39;, &#39;position_MF&#39;, &#39;position_GK&#39;, &#39;continent_asia&#39;, &#39;continent_south america&#39;, &#39;prefer_foot_right&#39; 총 11개 변수를 사용했다. # 결정계수는 96,9%이고 모든 변수는 유의수준 5% 이내에서 유의하다. . OLS Regression Results ============================================================================== Dep. Variable: value R-squared: 0.969 Model: OLS Adj. R-squared: 0.969 Method: Least Squares F-statistic: 2.562e+04 Date: Sun, 29 May 2022 Prob (F-statistic): 0.00 Time: 04:40:25 Log-Likelihood: -129.60 No. Observations: 8932 AIC: 283.2 Df Residuals: 8920 BIC: 368.4 Df Model: 11 Covariance Type: nonrobust =========================================================================================== coef std err t P&gt;|t| [0.025 0.975] - const 13.7089 0.007 2058.737 0.000 13.696 13.722 skill_scaled 0.0265 0.004 6.160 0.000 0.018 0.035 potential_scaled -0.0419 0.006 -6.663 0.000 -0.054 -0.030 overall_scaled 1.5419 0.007 217.650 0.000 1.528 1.556 age_scaled -0.4689 0.005 -87.356 0.000 -0.479 -0.458 position_ST 0.1789 0.008 21.790 0.000 0.163 0.195 position_MF 0.1248 0.007 17.978 0.000 0.111 0.138 position_GK -0.0839 0.011 -7.555 0.000 -0.106 -0.062 continent_asia 0.0357 0.009 3.763 0.000 0.017 0.054 reputation_scaled 0.0209 0.006 3.366 0.001 0.009 0.033 continent_south america 0.0143 0.007 2.189 0.029 0.001 0.027 prefer_foot_right 0.0136 0.006 2.168 0.030 0.001 0.026 ============================================================================== Omnibus: 2208.885 Durbin-Watson: 1.218 Prob(Omnibus): 0.000 Jarque-Bera (JB): 11500.255 Skew: -1.092 Prob(JB): 0.00 Kurtosis: 8.111 Cond. No. 6.43 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. . lr3 = model3.predict(sm.add_constant(X_train_dum[selected_variables])) np.expm1(lr3) #단계적선택법 예측값 . name L. Messi 2.454337e+08 De Gea 1.301108e+08 L. Suárez 1.250383e+08 Sergio Ramos 9.264349e+07 J. Oblak 1.262390e+08 ... S. Adewusi 3.149543e+04 C. Ehlich 1.994078e+04 N. Fuentes 2.161158e+04 J. Milli 1.880124e+04 N. Christoffersson 2.318973e+04 Length: 8932, dtype: float64 . from sklearn.metrics import mean_squared_error from math import sqrt X_pred1 = np.expm1(lr1) X_pred2 = np.expm1(lr2) X_pred3 = np.expm1(lr3) rmse1 = sqrt(mean_squared_error(np.expm1(y_train), X_pred1)) rmse2 = sqrt(mean_squared_error(np.expm1(y_train), X_pred2)) rmse3 = sqrt(mean_squared_error(np.expm1(y_train), X_pred3)) print(&quot;model1 rmse :&quot;, rmse1) print(&quot;model2 rmse :&quot;, rmse2) print(&quot;model3 rmse :&quot;, rmse3) . model1 rmse : 2625601.895279 model2 rmse : 2626562.383201663 model3 rmse : 2630333.8648211905 . &#44208;&#47200; . 최종적으로 회귀분석의 세 모델의 결정계수는 96.9%로 동일하지만 모든 변수를 사용한 모델은 유의하지 않은 변수가 존재하였다. . | 변수선택법을 사용한 모델과 모든 변수를 사용한 모델의 RMSE 값에는 별다른 차이가 없었다. . | 동일한 결정계수를 가지고 있으면 더 적은 변수를 사용하는 것이 좋기에 model1보다는 model2와 model3를 사용하는 것이 더 좋을 것 같다. . | . &#45796;&#51473;&#54924;&#44480;&#48516;&#49437;(Lasso) . Lasso회귀를 사용하면 알파값에 따라 회귀계수가 0으로 수렴하여 feature selection의 효과를 가지기에 Lasso와 변수선택법의 성능을 비교해보았다. | . from sklearn.linear_model import Lasso alpha = [0.1,0.05,0.01,0.005,0.001,0.0005,0.0001] for i in range(0,len(alpha)): lasso = Lasso(alpha = alpha[i]).fit(X_train_dum, y_train) print(&quot;훈련 세트의 정확도 : {:.2f}&quot;.format(lasso.score(X_train_dum, y_train))) print(&quot;사용한 특성의 수 : {}&quot;.format(np.sum(lasso.coef_ != 0))) print(&quot;사용한 max_iter : {}&quot;.format(lasso.n_iter_)) la_pr = np.expm1(lasso.predict(X_train_dum)) la_rmse = sqrt(mean_squared_error(np.expm1(y_train), la_pr)) print(&quot;alpha: {}, rmse : {:.2f}&quot;.format(alpha[i], la_rmse),&quot; n n&quot;) # 가장 rmse가 작은 alpha값인 0.05를 사용하여 모델링한다. . 훈련 세트의 정확도 : 0.93 사용한 특성의 수 : 4 사용한 max_iter : 40 alpha: 0.1, rmse : 1867984.23 훈련 세트의 정확도 : 0.96 사용한 특성의 수 : 4 사용한 max_iter : 40 alpha: 0.05, rmse : 1645610.65 훈련 세트의 정확도 : 0.97 사용한 특성의 수 : 5 사용한 max_iter : 40 alpha: 0.01, rmse : 2174226.32 훈련 세트의 정확도 : 0.97 사용한 특성의 수 : 6 사용한 max_iter : 26 alpha: 0.005, rmse : 2351573.36 훈련 세트의 정확도 : 0.97 사용한 특성의 수 : 12 사용한 max_iter : 46 alpha: 0.001, rmse : 2558737.89 훈련 세트의 정확도 : 0.97 사용한 특성의 수 : 13 사용한 max_iter : 52 alpha: 0.0005, rmse : 2592003.16 훈련 세트의 정확도 : 0.97 사용한 특성의 수 : 14 사용한 max_iter : 65 alpha: 0.0001, rmse : 2618589.40 . model_lasso = Lasso(alpha = 0.05) model_lasso.fit(X_train_dum,y_train) la_pr = np.expm1(model_lasso.predict(X_train_dum)) la_rmse = sqrt(mean_squared_error(np.expm1(y_train), la_pr)) print(la_rmse) . 1645610.647501823 . from sklearn.model_selection import cross_val_score from sklearn.model_selection import KFold score = cross_val_score(model_lasso, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean()) #교차검증 평균 정확도 # train data에 대한 교차검증 정확도는 95.9% . cross val score : [0.94953138 0.96056542 0.96726901 0.9645427 0.9594362 0.96014726 0.94909073 0.9595766 0.95783274 0.95842263] mean cv score : 0.959 . np.expm1(model_lasso.predict(X_test_dum)) . array([1.96629466e+08, 1.92452358e+08, 1.34138692e+08, ..., 3.55936755e+04, 2.68615428e+04, 2.54867991e+04]) . &#44208;&#47200; . 교차검증의 수행 결과 Lasoo 모델의 평균 정확도는 95.9%로 나왔다. . | Lasso 모델과 변수선택 모델을 비교하면 Lasso 모델의 RMSE가 1645610으로 약 백만 정도의 차이를 보였다. . | Lasso 모델이 변수선택 모델보다 더 정확한 모델임을 알 수 있었다. . | . &#47672;&#49888;&#47084;&#45789; &#44592;&#48277; . VotingRegressor | ExtraTreesRegressor | NGBRegressor | GradientBoostionRegressor | XGBRegressor | LightGBMRegressor | CatBoostRegressor . | 최종 예측값: 7개의 모델의 이적료 예측값의 평균값을 사용하였다. . | 하이퍼파라미터: 10분할 교차검증을 적용한 그리드 서치로 데이터에 가장 적합한 하이퍼파라미터를 찾아 각 모델에 적용하였다. | 모델의 평가: RMSE(평균 제곱근 편차) | . !pip install ngboost !pip install catboost . from sklearn.model_selection import cross_val_score from sklearn.model_selection import KFold from sklearn.linear_model import LinearRegression from sklearn.linear_model import Ridge from sklearn.linear_model import Lasso from sklearn.linear_model import ElasticNet from sklearn.ensemble import VotingRegressor from sklearn.model_selection import GridSearchCV from ngboost import NGBRegressor from sklearn.ensemble import GradientBoostingRegressor from xgboost import XGBRegressor from lightgbm import LGBMRegressor from catboost import CatBoostRegressor from sklearn.ensemble import ExtraTreesRegressor . cv=KFold(n_splits = 10, shuffle = True,random_state=999) . VotingRegressor . VotingRegressor는 서로 다른 알고리즘을 가진 모델을 결합하여 각각의 결과에 대해 투표로 최종 결과를 예측하는 모델이다. | . linear_reg = LinearRegression(n_jobs=-1) linear_reg.fit(X_train_dum, y_train) ridge = Ridge(alpha = 1) ridge.fit(X_train_dum, y_train) lasso = Lasso(alpha = 0.05) lasso.fit(X_train_dum, y_train) elasticnet = ElasticNet(alpha=0.5, l1_ratio=0.2) elasticnet.fit(X_train_dum, y_train) . ElasticNet(alpha=0.5, l1_ratio=0.2) . # 보팅에 참여한 single models 지정 single_models = [ (&#39;linear_reg&#39;, linear_reg), (&#39;ridge&#39;, ridge), (&#39;lasso&#39;, lasso), (&#39;elasticnet&#39;, elasticnet), ] . vtr = VotingRegressor(single_models, n_jobs=-1) vtr.fit(X_train_dum, y_train) score = cross_val_score(vtr, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score,&quot; n&quot;) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean(),&quot; n&quot;) #교차검증 평균 정확도 vote_pr = np.expm1(vtr.predict(X_train_dum)) vote_rmse = sqrt(mean_squared_error(np.expm1(y_train), vote_pr)) print(&quot;rmse : {:.2f}&quot;.format(vote_rmse)) #교차검증 정확도 95.9% RMSE: 1397093 . /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_voting.py:528: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . cross val score : [0.95211821 0.96081299 0.9663123 0.96445774 0.95973625 0.96084981 0.95157687 0.95970659 0.95970234 0.95859701] mean cv score : 0.959 rmse : 1397093.00 . vt_pred = np.expm1(vtr.predict(X_test_dum)) print(vt_pred) . [1.60561207e+08 1.72380660e+08 1.17285060e+08 ... 4.22283542e+04 3.32924213e+04 3.09753984e+04] . ExtraTreesRegressor . ExtraTrees 모델은 랜덤포레스트 모델과 닮아있지만 조금 더 극단적으로 랜덤하게 만든 모델이다. . | 사용한 하이퍼파라미터는 max_depth, n_estimators, min_sample_split이다. . | . etr = ExtraTreesRegressor() parameters = {&quot;n_estimators&quot;: [50, 100, 200, 500, 1000], &quot;max_depth&quot;: [3, 5, 7, 9, 11], &#39;min_samples_split&#39;:[2, 3, 5, 7, 9], } grid_search = GridSearchCV(estimator=etr, param_grid=parameters, n_jobs=-1, cv = cv ) grid_search.fit(X_train_dum, y_train) grid_search.best_params_ # &#39;max_depth&#39;: 11, &#39;min_samples_split&#39;: 2, &#39;n_estimators&#39;: 1000 . etr = ExtraTreesRegressor(max_depth = 11, min_samples_split = 2, n_estimators = 1000, random_state=999) etr.fit(X_train_dum, y_train) . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). &#34;&#34;&#34; . ExtraTreesRegressor(max_depth=11, n_estimators=1000, random_state=999) . score = cross_val_score(etr, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score,&quot; n&quot;) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean(),&quot; n&quot;) #교차검증 평균 정확도 et_pr = np.expm1(etr.predict(X_train_dum)) et_rmse = sqrt(mean_squared_error(np.expm1(y_train), et_pr)) print(&quot;rmse : {:.2f}&quot;.format(et_rmse)) #교차검증 정확도 99.4%, rmse : 316062 . /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:680: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel(). estimator.fit(X_train, y_train, **fit_params) . cross val score : [0.9928485 0.99411514 0.99563787 0.99492411 0.99471433 0.99474718 0.99326335 0.99408959 0.99469033 0.99475257] mean cv score : 0.994 rmse : 316062.21 . et_pred = np.expm1(etr.predict(X_test_dum)) print(et_pred) . [7.47211120e+07 8.67878727e+07 6.28194926e+07 ... 5.79132468e+04 4.98541240e+04 5.28615374e+04] . NGBRegressor . NGBoost 모델은 정확한 예측만이 아닌 불확실성의 추정까지도 가능한 모델이다. . | 사용한 하이퍼파라미터는 learning_rate, n_estimators, minibatch_frac이다. . | . ngbr = NGBRegressor() parameters = {&quot;learning_rate&quot;: [0.3, 0.15, 0.1, 0.05, 0.01], &quot;n_estimators&quot;: [50, 100, 200, 500, 1000], &quot;minibatch_frac&quot;: [0.1, 0.3, 0.5, 0.7] } grid_search = GridSearchCV(estimator=ngbr, param_grid=parameters, n_jobs=-1, cv = cv ) grid_search.fit(X_train_dum, y_train) grid_search.best_params_ # learning_rate&#39;: 0.3, &#39;minibatch_frac&#39;: 0.3, &#39;n_estimators&#39;: 1000 . ngbr = NGBRegressor(learning_rate = 0.3, n_estimators = 1000, minibatch_frac = 0.3, random_state = 999) ngbr.fit(X_train_dum,y_train) . /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . [iter 0] loss=1.7569 val_loss=0.0000 scale=1.0000 norm=1.2911 [iter 100] loss=-1.1195 val_loss=0.0000 scale=2.0000 norm=0.9570 [iter 200] loss=-1.3006 val_loss=0.0000 scale=1.0000 norm=0.4650 [iter 300] loss=-1.4143 val_loss=0.0000 scale=1.0000 norm=0.4923 [iter 400] loss=-1.4833 val_loss=0.0000 scale=1.0000 norm=0.4930 [iter 500] loss=-1.5487 val_loss=0.0000 scale=1.0000 norm=0.5023 [iter 600] loss=-1.5683 val_loss=0.0000 scale=1.0000 norm=0.5009 [iter 700] loss=-1.6063 val_loss=0.0000 scale=1.0000 norm=0.4821 [iter 800] loss=-1.6213 val_loss=0.0000 scale=1.0000 norm=0.4878 [iter 900] loss=-1.6291 val_loss=0.0000 scale=1.0000 norm=0.4992 . NGBRegressor(learning_rate=0.3, minibatch_frac=0.3, n_estimators=1000, random_state=RandomState(MT19937) at 0x7F2793F08D10) . ngb_pr = np.expm1(ngbr.predict(X_train_dum)) ngb_rmse = sqrt(mean_squared_error(np.expm1(y_train), ngb_pr)) print(&quot;rmse : {:.2f}&quot;.format(ngb_rmse)) #교차검증 정확도 ???, rmse : 279153 . rmse : 292702.21 . ngb_pred = np.expm1(ngbr.predict(X_test_dum)) print(ngb_pred) . [6.48495195e+07 9.99385881e+07 8.19991056e+07 ... 5.50751946e+04 5.08895197e+04 5.46846456e+04] . GradientBoostingRegressor . GradientBoost 모델은 가중치 업데이트 방식으로 경사하강법을 사용하는 부스팅 모델이다. . | 사용한 하이퍼파라미터는 max_depth, n_estimators, subsample이다. . | . gbr = GradientBoostingRegressor() parameters = {&#39;max_depth&#39;: [3, 5, 7, 9, 11], &#39;subsample&#39;: [0.2 ,0.4 ,0.6, 0.8, 1.0], &quot;n_estimators&quot;: [50, 100, 200, 500, 1000]} grid_search = GridSearchCV(estimator=gbr, param_grid=parameters, n_jobs=-1, cv = cv ) grid_search.fit(X_train_dum, y_train) grid_search.best_params_ # &#39;max_depth&#39;: 3, &#39;n_estimators&#39;: 1000, &#39;subsample&#39;: 0.8 . gbr = GradientBoostingRegressor(max_depth = 3, n_estimators = 1000, subsample = 0.8) gbr.fit(X_train_dum,y_train) . /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . GradientBoostingRegressor(n_estimators=1000, subsample=0.8) . score = cross_val_score(gbr, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score,&quot; n&quot;) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean(),&quot; n&quot;) #교차검증 평균 정확도 gb_pr = np.expm1(gbr.predict(X_train_dum)) gb_rmse = sqrt(mean_squared_error(np.expm1(y_train), gb_pr)) print(&quot;rmse : {:.2f}&quot;.format(gb_rmse)) #교차검증 정확도 99.8%, rmse : 268399 . /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) /usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_gb.py:494: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel(). y = column_or_1d(y, warn=True) . cross val score : [0.99799349 0.99775341 0.99836506 0.99769083 0.99766451 0.99813061 0.99802124 0.99775152 0.99807217 0.99753037] mean cv score : 0.998 rmse : 266778.66 . gb_pred = np.expm1(gbr.predict(X_test_dum)) print(gb_pred) . [6.69044125e+07 1.25889106e+08 9.89022732e+07 ... 5.95804780e+04 4.90005752e+04 5.06373122e+04] . XGBRegressor . XGBoost 모델은 GradientBoost 모델에서 병렬 학습이 지원되도록 구현된 모델이다. . | 사용한 하이퍼파라미터는 max_depth, n_estimators, subsample이다. . | . xgbr = XGBRegressor() parameters = {&#39;max_depth&#39;: [3, 5, 7, 9, 11], &#39;subsample&#39;: [0.2, 0.4, 0.6, 0.8, 1.0], &quot;n_estimators&quot;: [50, 100, 200, 500, 1000]} grid_search = GridSearchCV(estimator=xgbr, param_grid=parameters, n_jobs=-1, cv = cv ) grid_search.fit(X_train_dum, y_train) grid_search.best_params_ # &#39;max_depth&#39;: 3, &#39;n_estimators&#39;: 1000, &#39;subsample&#39;: 0.8 . xgbr = XGBRegressor(max_depth = 3, n_estimators = 1000, subsample = 0.8, objective = &#39;reg:squarederror&#39;, random_stare = 999) xgbr.fit(X_train_dum, y_train) . XGBRegressor(n_estimators=1000, objective=&#39;reg:squarederror&#39;, random_stare=999, subsample=0.8) . score = cross_val_score(xgbr, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score,&quot; n&quot;) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean(),&quot; n&quot;) #교차검증 평균 정확도 xgb_pr = np.expm1(xgbr.predict(X_train_dum)) xgb_rmse = sqrt(mean_squared_error(np.expm1(y_train), xgb_pr)) print(&quot;rmse : {:.2f}&quot;.format(xgb_rmse)) #교차검증 정확도 99.8%, rmse : 277859 . cross val score : [0.99787377 0.99763368 0.99823462 0.99767196 0.99760076 0.99803434 0.99790689 0.99776036 0.99797215 0.99758428] mean cv score : 0.998 rmse : 277859.16 . xgb_pred = np.expm1(xgbr.predict(X_test_dum)) print(xgb_pred) . [6.3163848e+07 1.1725064e+08 9.4841512e+07 ... 6.0790043e+04 4.8656930e+04 4.9669789e+04] . LGBMRegressor . LGBM 모델은 tree를 수직으로 확장하는 leaf-wise 알고리즘을 수행하는 부스팅 모델이다. . | 사용한 하이퍼파라미터는 max_depth, n_estimators, learning_rate이다. . | . lgbm = LGBMRegressor() parameters = {&#39;max_depth&#39;: [3, 5, 7, 9, 11], &#39;learning_rate&#39;: [0.3, 0.15, 0.1, 0.05, 0.01], &quot;n_estimators&quot;: [50, 100, 200, 500, 1000, 3000, 5000]} grid_search = GridSearchCV(estimator=lgbm, param_grid=parameters, n_jobs=-1, cv = cv ) grid_search.fit(X_train_dum, y_train) grid_search.best_params_ # &#39;learning_rate&#39;: 0.15, &#39;max_depth&#39;: 3, &#39;n_estimators&#39;: 3000 . lgbm = LGBMRegressor(learning_rate = 0.15, max_depth = 3, n_estimators = 3000, random_state = 999) lgbm.fit(X_train_dum, y_train) . LGBMRegressor(learning_rate=0.15, max_depth=3, n_estimators=3000, random_state=999) . score = cross_val_score(lgbm, X_train_dum, y_train, cv=KFold(n_splits = 10, shuffle = True,random_state=999)) print(&#39;cross val score : %s&#39; %score,&quot; n&quot;) #1fold별 정확도 print(&#39;mean cv score : %.3f&#39; %score.mean(),&quot; n&quot;) #교차검증 평균 정확도 lgbm_pr = np.expm1(lgbm.predict(X_train_dum)) lgbm_rmse = sqrt(mean_squared_error(np.expm1(y_train), lgbm_pr)) print(&quot;rmse : {:.2f}&quot;.format(lgbm_rmse)) #교차검증 정확도 99.8%, rmse : 342629 . cross val score : [0.99792925 0.99765907 0.9982226 0.99771529 0.99756053 0.99808513 0.99703785 0.9977142 0.9979803 0.99731892] mean cv score : 0.998 rmse : 342629.04 . lgbm_pred = np.expm1(lgbm.predict(X_test_dum)) print(lgbm_pred) . [5.23446871e+07 8.80796362e+07 8.49981388e+07 ... 5.75077039e+04 4.79694229e+04 4.87867819e+04] . CatBoostRegressor . CatBoost 모델은 범주형 데이터를 처리하는 새로운 방법을 제시하고, 기존의 그래디언트 부스트 알고리즘을 조작하여  타겟 누수를 개선한 모델이다. . | CatBoost는 기본적으로 파라미터 최적화가 잘 되어있어 따로 하이퍼파라미터 튜닝을 수행하지 않았다. . | . cbr = CatBoostRegressor(random_state = 999) cbr.fit(X_train_dum, y_train) . Learning rate set to 0.057867 0: learn: 1.3300129 total: 50.2ms remaining: 50.2s 1: learn: 1.2659512 total: 53.1ms remaining: 26.5s 2: learn: 1.2017204 total: 56.7ms remaining: 18.8s 3: learn: 1.1456712 total: 60.3ms remaining: 15s 4: learn: 1.0875012 total: 63.9ms remaining: 12.7s 5: learn: 1.0361293 total: 67.3ms remaining: 11.1s 6: learn: 0.9848884 total: 70.7ms remaining: 10s 7: learn: 0.9375653 total: 74.2ms remaining: 9.2s 8: learn: 0.8907905 total: 77.7ms remaining: 8.56s 9: learn: 0.8486193 total: 81.2ms remaining: 8.04s 10: learn: 0.8076854 total: 84.5ms remaining: 7.6s 11: learn: 0.7692006 total: 88ms remaining: 7.25s 12: learn: 0.7337321 total: 91.6ms remaining: 6.95s 13: learn: 0.7006732 total: 95.1ms remaining: 6.7s 14: learn: 0.6676884 total: 98.5ms remaining: 6.47s 15: learn: 0.6370949 total: 102ms remaining: 6.26s 16: learn: 0.6072836 total: 107ms remaining: 6.17s 17: learn: 0.5797692 total: 109ms remaining: 5.93s 18: learn: 0.5538114 total: 111ms remaining: 5.71s 19: learn: 0.5285324 total: 112ms remaining: 5.51s 20: learn: 0.5071533 total: 114ms remaining: 5.32s 21: learn: 0.4856124 total: 116ms remaining: 5.16s 22: learn: 0.4646857 total: 118ms remaining: 5s 23: learn: 0.4444852 total: 120ms remaining: 4.88s 24: learn: 0.4254526 total: 122ms remaining: 4.75s 25: learn: 0.4090113 total: 124ms remaining: 4.63s 26: learn: 0.3924150 total: 125ms remaining: 4.52s 27: learn: 0.3755978 total: 127ms remaining: 4.42s 28: learn: 0.3602662 total: 129ms remaining: 4.32s 29: learn: 0.3458948 total: 131ms remaining: 4.23s 30: learn: 0.3316731 total: 133ms remaining: 4.14s 31: learn: 0.3190687 total: 134ms remaining: 4.06s 32: learn: 0.3068814 total: 136ms remaining: 3.99s 33: learn: 0.2952480 total: 141ms remaining: 4s 34: learn: 0.2842852 total: 143ms remaining: 3.94s 35: learn: 0.2736906 total: 144ms remaining: 3.87s 36: learn: 0.2636150 total: 146ms remaining: 3.81s 37: learn: 0.2542713 total: 148ms remaining: 3.75s 38: learn: 0.2457480 total: 150ms remaining: 3.7s 39: learn: 0.2376574 total: 152ms remaining: 3.65s 40: learn: 0.2296863 total: 154ms remaining: 3.6s 41: learn: 0.2219769 total: 156ms remaining: 3.55s 42: learn: 0.2152172 total: 157ms remaining: 3.5s 43: learn: 0.2080681 total: 159ms remaining: 3.46s 44: learn: 0.2018347 total: 161ms remaining: 3.41s 45: learn: 0.1961951 total: 163ms remaining: 3.37s 46: learn: 0.1906736 total: 164ms remaining: 3.33s 47: learn: 0.1849333 total: 166ms remaining: 3.29s 48: learn: 0.1796222 total: 168ms remaining: 3.26s 49: learn: 0.1748804 total: 169ms remaining: 3.22s 50: learn: 0.1707063 total: 171ms remaining: 3.18s 51: learn: 0.1668489 total: 173ms remaining: 3.15s 52: learn: 0.1630330 total: 175ms remaining: 3.12s 53: learn: 0.1593143 total: 176ms remaining: 3.09s 54: learn: 0.1553991 total: 178ms remaining: 3.06s 55: learn: 0.1516690 total: 180ms remaining: 3.04s 56: learn: 0.1480045 total: 182ms remaining: 3.01s 57: learn: 0.1446817 total: 184ms remaining: 2.98s 58: learn: 0.1415110 total: 185ms remaining: 2.96s 59: learn: 0.1388507 total: 188ms remaining: 2.95s 60: learn: 0.1360896 total: 190ms remaining: 2.93s 61: learn: 0.1333980 total: 192ms remaining: 2.91s 62: learn: 0.1309055 total: 194ms remaining: 2.89s 63: learn: 0.1287267 total: 196ms remaining: 2.86s 64: learn: 0.1264857 total: 198ms remaining: 2.84s 65: learn: 0.1243602 total: 199ms remaining: 2.82s 66: learn: 0.1226752 total: 201ms remaining: 2.8s 67: learn: 0.1210236 total: 203ms remaining: 2.78s 68: learn: 0.1191541 total: 204ms remaining: 2.76s 69: learn: 0.1173140 total: 206ms remaining: 2.74s 70: learn: 0.1158011 total: 208ms remaining: 2.72s 71: learn: 0.1141301 total: 210ms remaining: 2.7s 72: learn: 0.1126297 total: 211ms remaining: 2.68s 73: learn: 0.1113014 total: 213ms remaining: 2.67s 74: learn: 0.1101087 total: 215ms remaining: 2.65s 75: learn: 0.1089844 total: 217ms remaining: 2.63s 76: learn: 0.1078866 total: 218ms remaining: 2.61s 77: learn: 0.1068729 total: 220ms remaining: 2.6s 78: learn: 0.1057287 total: 221ms remaining: 2.58s 79: learn: 0.1047517 total: 223ms remaining: 2.57s 80: learn: 0.1036798 total: 225ms remaining: 2.55s 81: learn: 0.1030508 total: 226ms remaining: 2.53s 82: learn: 0.1021965 total: 228ms remaining: 2.52s 83: learn: 0.1015120 total: 230ms remaining: 2.5s 84: learn: 0.1007553 total: 232ms remaining: 2.49s 85: learn: 0.1001004 total: 233ms remaining: 2.48s 86: learn: 0.0994671 total: 235ms remaining: 2.46s 87: learn: 0.0986152 total: 237ms remaining: 2.45s 88: learn: 0.0980079 total: 238ms remaining: 2.44s 89: learn: 0.0973973 total: 240ms remaining: 2.43s 90: learn: 0.0968608 total: 242ms remaining: 2.41s 91: learn: 0.0962398 total: 243ms remaining: 2.4s 92: learn: 0.0955444 total: 245ms remaining: 2.39s 93: learn: 0.0948984 total: 247ms remaining: 2.38s 94: learn: 0.0944265 total: 249ms remaining: 2.37s 95: learn: 0.0939471 total: 250ms remaining: 2.36s 96: learn: 0.0932776 total: 252ms remaining: 2.35s 97: learn: 0.0926877 total: 254ms remaining: 2.33s 98: learn: 0.0922399 total: 255ms remaining: 2.33s 99: learn: 0.0916661 total: 257ms remaining: 2.31s 100: learn: 0.0911810 total: 259ms remaining: 2.31s 101: learn: 0.0907325 total: 261ms remaining: 2.3s 102: learn: 0.0904248 total: 262ms remaining: 2.29s 103: learn: 0.0901551 total: 264ms remaining: 2.28s 104: learn: 0.0895706 total: 266ms remaining: 2.27s 105: learn: 0.0892596 total: 268ms remaining: 2.26s 106: learn: 0.0888821 total: 269ms remaining: 2.25s 107: learn: 0.0886208 total: 271ms remaining: 2.24s 108: learn: 0.0883868 total: 273ms remaining: 2.23s 109: learn: 0.0880194 total: 274ms remaining: 2.22s 110: learn: 0.0878375 total: 276ms remaining: 2.21s 111: learn: 0.0875221 total: 278ms remaining: 2.2s 112: learn: 0.0870727 total: 280ms remaining: 2.19s 113: learn: 0.0868289 total: 281ms remaining: 2.19s 114: learn: 0.0863895 total: 283ms remaining: 2.18s 115: learn: 0.0861327 total: 285ms remaining: 2.17s 116: learn: 0.0858257 total: 286ms remaining: 2.16s 117: learn: 0.0856038 total: 288ms remaining: 2.15s 118: learn: 0.0853028 total: 290ms remaining: 2.15s 119: learn: 0.0851586 total: 291ms remaining: 2.14s 120: learn: 0.0848417 total: 293ms remaining: 2.13s 121: learn: 0.0846185 total: 295ms remaining: 2.12s 122: learn: 0.0843991 total: 297ms remaining: 2.12s 123: learn: 0.0840710 total: 298ms remaining: 2.11s 124: learn: 0.0837219 total: 300ms remaining: 2.1s 125: learn: 0.0835185 total: 302ms remaining: 2.1s 126: learn: 0.0833458 total: 304ms remaining: 2.09s 127: learn: 0.0832678 total: 306ms remaining: 2.08s 128: learn: 0.0830264 total: 307ms remaining: 2.08s 129: learn: 0.0828423 total: 309ms remaining: 2.07s 130: learn: 0.0825331 total: 311ms remaining: 2.06s 131: learn: 0.0823530 total: 313ms remaining: 2.06s 132: learn: 0.0819728 total: 315ms remaining: 2.06s 133: learn: 0.0814906 total: 317ms remaining: 2.05s 134: learn: 0.0812664 total: 319ms remaining: 2.05s 135: learn: 0.0811366 total: 321ms remaining: 2.04s 136: learn: 0.0809535 total: 323ms remaining: 2.03s 137: learn: 0.0806838 total: 325ms remaining: 2.03s 138: learn: 0.0805043 total: 327ms remaining: 2.02s 139: learn: 0.0803781 total: 329ms remaining: 2.02s 140: learn: 0.0802997 total: 331ms remaining: 2.01s 141: learn: 0.0801987 total: 332ms remaining: 2.01s 142: learn: 0.0801402 total: 335ms remaining: 2.01s 143: learn: 0.0800559 total: 337ms remaining: 2s 144: learn: 0.0798693 total: 339ms remaining: 2s 145: learn: 0.0795148 total: 341ms remaining: 1.99s 146: learn: 0.0794464 total: 343ms remaining: 1.99s 147: learn: 0.0792457 total: 345ms remaining: 1.98s 148: learn: 0.0790873 total: 346ms remaining: 1.98s 149: learn: 0.0789899 total: 348ms remaining: 1.97s 150: learn: 0.0787184 total: 350ms remaining: 1.97s 151: learn: 0.0784391 total: 352ms remaining: 1.96s 152: learn: 0.0782289 total: 354ms remaining: 1.96s 153: learn: 0.0780607 total: 356ms remaining: 1.95s 154: learn: 0.0779619 total: 357ms remaining: 1.95s 155: learn: 0.0777303 total: 359ms remaining: 1.94s 156: learn: 0.0775136 total: 361ms remaining: 1.94s 157: learn: 0.0773709 total: 363ms remaining: 1.93s 158: learn: 0.0772689 total: 365ms remaining: 1.93s 159: learn: 0.0771703 total: 366ms remaining: 1.92s 160: learn: 0.0770116 total: 368ms remaining: 1.92s 161: learn: 0.0769596 total: 370ms remaining: 1.91s 162: learn: 0.0767046 total: 372ms remaining: 1.91s 163: learn: 0.0765873 total: 373ms remaining: 1.9s 164: learn: 0.0764286 total: 375ms remaining: 1.9s 165: learn: 0.0763416 total: 377ms remaining: 1.89s 166: learn: 0.0762614 total: 378ms remaining: 1.89s 167: learn: 0.0761709 total: 380ms remaining: 1.88s 168: learn: 0.0759819 total: 382ms remaining: 1.88s 169: learn: 0.0758835 total: 384ms remaining: 1.87s 170: learn: 0.0757448 total: 386ms remaining: 1.87s 171: learn: 0.0755812 total: 387ms remaining: 1.86s 172: learn: 0.0753702 total: 389ms remaining: 1.86s 173: learn: 0.0751793 total: 391ms remaining: 1.86s 174: learn: 0.0751132 total: 393ms remaining: 1.85s 175: learn: 0.0750288 total: 395ms remaining: 1.85s 176: learn: 0.0749340 total: 397ms remaining: 1.85s 177: learn: 0.0747872 total: 399ms remaining: 1.84s 178: learn: 0.0747001 total: 401ms remaining: 1.84s 179: learn: 0.0746347 total: 403ms remaining: 1.83s 180: learn: 0.0745431 total: 404ms remaining: 1.83s 181: learn: 0.0743754 total: 406ms remaining: 1.82s 182: learn: 0.0742562 total: 408ms remaining: 1.82s 183: learn: 0.0741475 total: 410ms remaining: 1.82s 184: learn: 0.0739579 total: 412ms remaining: 1.81s 185: learn: 0.0738253 total: 413ms remaining: 1.81s 186: learn: 0.0736279 total: 415ms remaining: 1.8s 187: learn: 0.0734518 total: 417ms remaining: 1.8s 188: learn: 0.0731319 total: 419ms remaining: 1.8s 189: learn: 0.0729083 total: 421ms remaining: 1.79s 190: learn: 0.0726796 total: 422ms remaining: 1.79s 191: learn: 0.0725065 total: 424ms remaining: 1.78s 192: learn: 0.0724175 total: 426ms remaining: 1.78s 193: learn: 0.0723423 total: 427ms remaining: 1.77s 194: learn: 0.0722481 total: 429ms remaining: 1.77s 195: learn: 0.0721725 total: 431ms remaining: 1.77s 196: learn: 0.0720088 total: 432ms remaining: 1.76s 197: learn: 0.0718256 total: 434ms remaining: 1.76s 198: learn: 0.0717251 total: 436ms remaining: 1.75s 199: learn: 0.0716383 total: 438ms remaining: 1.75s 200: learn: 0.0715369 total: 440ms remaining: 1.75s 201: learn: 0.0714350 total: 441ms remaining: 1.74s 202: learn: 0.0713867 total: 443ms remaining: 1.74s 203: learn: 0.0713288 total: 445ms remaining: 1.74s 204: learn: 0.0711870 total: 447ms remaining: 1.73s 205: learn: 0.0711086 total: 448ms remaining: 1.73s 206: learn: 0.0709471 total: 450ms remaining: 1.72s 207: learn: 0.0707799 total: 452ms remaining: 1.72s 208: learn: 0.0706271 total: 454ms remaining: 1.72s 209: learn: 0.0705838 total: 455ms remaining: 1.71s 210: learn: 0.0704474 total: 457ms remaining: 1.71s 211: learn: 0.0703673 total: 459ms remaining: 1.7s 212: learn: 0.0703086 total: 460ms remaining: 1.7s 213: learn: 0.0702173 total: 462ms remaining: 1.7s 214: learn: 0.0701280 total: 464ms remaining: 1.69s 215: learn: 0.0700059 total: 466ms remaining: 1.69s 216: learn: 0.0699399 total: 467ms remaining: 1.69s 217: learn: 0.0698697 total: 469ms remaining: 1.68s 218: learn: 0.0697094 total: 471ms remaining: 1.68s 219: learn: 0.0696709 total: 473ms remaining: 1.68s 220: learn: 0.0695780 total: 474ms remaining: 1.67s 221: learn: 0.0694342 total: 476ms remaining: 1.67s 222: learn: 0.0693986 total: 478ms remaining: 1.66s 223: learn: 0.0692913 total: 479ms remaining: 1.66s 224: learn: 0.0692337 total: 481ms remaining: 1.66s 225: learn: 0.0691774 total: 483ms remaining: 1.65s 226: learn: 0.0690967 total: 484ms remaining: 1.65s 227: learn: 0.0690530 total: 486ms remaining: 1.65s 228: learn: 0.0690180 total: 488ms remaining: 1.64s 229: learn: 0.0689465 total: 489ms remaining: 1.64s 230: learn: 0.0688301 total: 491ms remaining: 1.63s 231: learn: 0.0687041 total: 493ms remaining: 1.63s 232: learn: 0.0686539 total: 494ms remaining: 1.63s 233: learn: 0.0686061 total: 496ms remaining: 1.62s 234: learn: 0.0685567 total: 500ms remaining: 1.63s 235: learn: 0.0685010 total: 506ms remaining: 1.64s 236: learn: 0.0683962 total: 508ms remaining: 1.64s 237: learn: 0.0683223 total: 510ms remaining: 1.63s 238: learn: 0.0681796 total: 512ms remaining: 1.63s 239: learn: 0.0681172 total: 514ms remaining: 1.63s 240: learn: 0.0680348 total: 515ms remaining: 1.62s 241: learn: 0.0679201 total: 517ms remaining: 1.62s 242: learn: 0.0678316 total: 520ms remaining: 1.62s 243: learn: 0.0677768 total: 525ms remaining: 1.63s 244: learn: 0.0677325 total: 527ms remaining: 1.63s 245: learn: 0.0676132 total: 531ms remaining: 1.63s 246: learn: 0.0675924 total: 537ms remaining: 1.64s 247: learn: 0.0675517 total: 541ms remaining: 1.64s 248: learn: 0.0674751 total: 542ms remaining: 1.64s 249: learn: 0.0674101 total: 544ms remaining: 1.63s 250: learn: 0.0673859 total: 546ms remaining: 1.63s 251: learn: 0.0672582 total: 548ms remaining: 1.63s 252: learn: 0.0671505 total: 549ms remaining: 1.62s 253: learn: 0.0670464 total: 551ms remaining: 1.62s 254: learn: 0.0669609 total: 553ms remaining: 1.61s 255: learn: 0.0668454 total: 555ms remaining: 1.61s 256: learn: 0.0667954 total: 557ms remaining: 1.61s 257: learn: 0.0667025 total: 559ms remaining: 1.61s 258: learn: 0.0666407 total: 560ms remaining: 1.6s 259: learn: 0.0665998 total: 562ms remaining: 1.6s 260: learn: 0.0665520 total: 564ms remaining: 1.6s 261: learn: 0.0665126 total: 565ms remaining: 1.59s 262: learn: 0.0664518 total: 567ms remaining: 1.59s 263: learn: 0.0663860 total: 571ms remaining: 1.59s 264: learn: 0.0663421 total: 573ms remaining: 1.59s 265: learn: 0.0663188 total: 575ms remaining: 1.58s 266: learn: 0.0662767 total: 576ms remaining: 1.58s 267: learn: 0.0662080 total: 578ms remaining: 1.58s 268: learn: 0.0661191 total: 580ms remaining: 1.57s 269: learn: 0.0660758 total: 582ms remaining: 1.57s 270: learn: 0.0659462 total: 583ms remaining: 1.57s 271: learn: 0.0658889 total: 585ms remaining: 1.57s 272: learn: 0.0658416 total: 587ms remaining: 1.56s 273: learn: 0.0657726 total: 589ms remaining: 1.56s 274: learn: 0.0656789 total: 591ms remaining: 1.56s 275: learn: 0.0655968 total: 593ms remaining: 1.55s 276: learn: 0.0655661 total: 594ms remaining: 1.55s 277: learn: 0.0655092 total: 596ms remaining: 1.55s 278: learn: 0.0654852 total: 598ms remaining: 1.54s 279: learn: 0.0653737 total: 600ms remaining: 1.54s 280: learn: 0.0653520 total: 601ms remaining: 1.54s 281: learn: 0.0652694 total: 603ms remaining: 1.53s 282: learn: 0.0651885 total: 605ms remaining: 1.53s 283: learn: 0.0651337 total: 607ms remaining: 1.53s 284: learn: 0.0650224 total: 609ms remaining: 1.53s 285: learn: 0.0649558 total: 610ms remaining: 1.52s 286: learn: 0.0648969 total: 613ms remaining: 1.52s 287: learn: 0.0647940 total: 614ms remaining: 1.52s 288: learn: 0.0647433 total: 616ms remaining: 1.52s 289: learn: 0.0646800 total: 618ms remaining: 1.51s 290: learn: 0.0646272 total: 620ms remaining: 1.51s 291: learn: 0.0645782 total: 622ms remaining: 1.51s 292: learn: 0.0645002 total: 623ms remaining: 1.5s 293: learn: 0.0644705 total: 625ms remaining: 1.5s 294: learn: 0.0644152 total: 627ms remaining: 1.5s 295: learn: 0.0643639 total: 629ms remaining: 1.5s 296: learn: 0.0642904 total: 631ms remaining: 1.49s 297: learn: 0.0641772 total: 633ms remaining: 1.49s 298: learn: 0.0641185 total: 634ms remaining: 1.49s 299: learn: 0.0640880 total: 636ms remaining: 1.48s 300: learn: 0.0640139 total: 638ms remaining: 1.48s 301: learn: 0.0639476 total: 640ms remaining: 1.48s 302: learn: 0.0638731 total: 641ms remaining: 1.48s 303: learn: 0.0638211 total: 643ms remaining: 1.47s 304: learn: 0.0637685 total: 645ms remaining: 1.47s 305: learn: 0.0637034 total: 646ms remaining: 1.47s 306: learn: 0.0636644 total: 648ms remaining: 1.46s 307: learn: 0.0636322 total: 650ms remaining: 1.46s 308: learn: 0.0635787 total: 651ms remaining: 1.46s 309: learn: 0.0635115 total: 653ms remaining: 1.45s 310: learn: 0.0634709 total: 655ms remaining: 1.45s 311: learn: 0.0633969 total: 657ms remaining: 1.45s 312: learn: 0.0633600 total: 658ms remaining: 1.44s 313: learn: 0.0633346 total: 660ms remaining: 1.44s 314: learn: 0.0632736 total: 662ms remaining: 1.44s 315: learn: 0.0632499 total: 663ms remaining: 1.44s 316: learn: 0.0631893 total: 665ms remaining: 1.43s 317: learn: 0.0631427 total: 667ms remaining: 1.43s 318: learn: 0.0631414 total: 668ms remaining: 1.43s 319: learn: 0.0631044 total: 670ms remaining: 1.42s 320: learn: 0.0630423 total: 672ms remaining: 1.42s 321: learn: 0.0629719 total: 674ms remaining: 1.42s 322: learn: 0.0629115 total: 676ms remaining: 1.42s 323: learn: 0.0629086 total: 677ms remaining: 1.41s 324: learn: 0.0628829 total: 679ms remaining: 1.41s 325: learn: 0.0628179 total: 681ms remaining: 1.41s 326: learn: 0.0627450 total: 682ms remaining: 1.4s 327: learn: 0.0627011 total: 684ms remaining: 1.4s 328: learn: 0.0626596 total: 686ms remaining: 1.4s 329: learn: 0.0626029 total: 688ms remaining: 1.4s 330: learn: 0.0625783 total: 689ms remaining: 1.39s 331: learn: 0.0625387 total: 691ms remaining: 1.39s 332: learn: 0.0624780 total: 693ms remaining: 1.39s 333: learn: 0.0624218 total: 695ms remaining: 1.39s 334: learn: 0.0624195 total: 697ms remaining: 1.38s 335: learn: 0.0623522 total: 698ms remaining: 1.38s 336: learn: 0.0622969 total: 700ms remaining: 1.38s 337: learn: 0.0622511 total: 702ms remaining: 1.37s 338: learn: 0.0621956 total: 704ms remaining: 1.37s 339: learn: 0.0621475 total: 705ms remaining: 1.37s 340: learn: 0.0621283 total: 707ms remaining: 1.37s 341: learn: 0.0620595 total: 709ms remaining: 1.36s 342: learn: 0.0620323 total: 710ms remaining: 1.36s 343: learn: 0.0619550 total: 712ms remaining: 1.36s 344: learn: 0.0619075 total: 714ms remaining: 1.35s 345: learn: 0.0618674 total: 716ms remaining: 1.35s 346: learn: 0.0618238 total: 717ms remaining: 1.35s 347: learn: 0.0618084 total: 719ms remaining: 1.35s 348: learn: 0.0617783 total: 721ms remaining: 1.34s 349: learn: 0.0617254 total: 722ms remaining: 1.34s 350: learn: 0.0617055 total: 724ms remaining: 1.34s 351: learn: 0.0616545 total: 726ms remaining: 1.34s 352: learn: 0.0615929 total: 728ms remaining: 1.33s 353: learn: 0.0615396 total: 729ms remaining: 1.33s 354: learn: 0.0614764 total: 731ms remaining: 1.33s 355: learn: 0.0614298 total: 733ms remaining: 1.33s 356: learn: 0.0613718 total: 735ms remaining: 1.32s 357: learn: 0.0613343 total: 736ms remaining: 1.32s 358: learn: 0.0613065 total: 738ms remaining: 1.32s 359: learn: 0.0612580 total: 740ms remaining: 1.31s 360: learn: 0.0612387 total: 742ms remaining: 1.31s 361: learn: 0.0612376 total: 743ms remaining: 1.31s 362: learn: 0.0611909 total: 745ms remaining: 1.31s 363: learn: 0.0611533 total: 747ms remaining: 1.3s 364: learn: 0.0611089 total: 748ms remaining: 1.3s 365: learn: 0.0610535 total: 750ms remaining: 1.3s 366: learn: 0.0610056 total: 752ms remaining: 1.3s 367: learn: 0.0609867 total: 754ms remaining: 1.29s 368: learn: 0.0609673 total: 756ms remaining: 1.29s 369: learn: 0.0609446 total: 758ms remaining: 1.29s 370: learn: 0.0608885 total: 760ms remaining: 1.29s 371: learn: 0.0608515 total: 762ms remaining: 1.29s 372: learn: 0.0608000 total: 764ms remaining: 1.28s 373: learn: 0.0607583 total: 765ms remaining: 1.28s 374: learn: 0.0607266 total: 767ms remaining: 1.28s 375: learn: 0.0607080 total: 769ms remaining: 1.27s 376: learn: 0.0606805 total: 771ms remaining: 1.27s 377: learn: 0.0606527 total: 772ms remaining: 1.27s 378: learn: 0.0605724 total: 774ms remaining: 1.27s 379: learn: 0.0605218 total: 776ms remaining: 1.26s 380: learn: 0.0604861 total: 777ms remaining: 1.26s 381: learn: 0.0604391 total: 779ms remaining: 1.26s 382: learn: 0.0603858 total: 781ms remaining: 1.26s 383: learn: 0.0603576 total: 783ms remaining: 1.25s 384: learn: 0.0603154 total: 784ms remaining: 1.25s 385: learn: 0.0602701 total: 786ms remaining: 1.25s 386: learn: 0.0602258 total: 788ms remaining: 1.25s 387: learn: 0.0601918 total: 790ms remaining: 1.25s 388: learn: 0.0601875 total: 791ms remaining: 1.24s 389: learn: 0.0601473 total: 793ms remaining: 1.24s 390: learn: 0.0600809 total: 795ms remaining: 1.24s 391: learn: 0.0600459 total: 797ms remaining: 1.24s 392: learn: 0.0600050 total: 799ms remaining: 1.23s 393: learn: 0.0599773 total: 800ms remaining: 1.23s 394: learn: 0.0599372 total: 802ms remaining: 1.23s 395: learn: 0.0598847 total: 804ms remaining: 1.23s 396: learn: 0.0598840 total: 805ms remaining: 1.22s 397: learn: 0.0598326 total: 807ms remaining: 1.22s 398: learn: 0.0597912 total: 809ms remaining: 1.22s 399: learn: 0.0597517 total: 811ms remaining: 1.22s 400: learn: 0.0597059 total: 812ms remaining: 1.21s 401: learn: 0.0596575 total: 814ms remaining: 1.21s 402: learn: 0.0596357 total: 817ms remaining: 1.21s 403: learn: 0.0596111 total: 819ms remaining: 1.21s 404: learn: 0.0595820 total: 820ms remaining: 1.2s 405: learn: 0.0595643 total: 822ms remaining: 1.2s 406: learn: 0.0595304 total: 823ms remaining: 1.2s 407: learn: 0.0594929 total: 825ms remaining: 1.2s 408: learn: 0.0594828 total: 827ms remaining: 1.19s 409: learn: 0.0594463 total: 829ms remaining: 1.19s 410: learn: 0.0594034 total: 830ms remaining: 1.19s 411: learn: 0.0593562 total: 832ms remaining: 1.19s 412: learn: 0.0593529 total: 833ms remaining: 1.18s 413: learn: 0.0593037 total: 835ms remaining: 1.18s 414: learn: 0.0592737 total: 837ms remaining: 1.18s 415: learn: 0.0592392 total: 838ms remaining: 1.18s 416: learn: 0.0592052 total: 840ms remaining: 1.17s 417: learn: 0.0591829 total: 842ms remaining: 1.17s 418: learn: 0.0591625 total: 843ms remaining: 1.17s 419: learn: 0.0591319 total: 845ms remaining: 1.17s 420: learn: 0.0591067 total: 847ms remaining: 1.16s 421: learn: 0.0590734 total: 848ms remaining: 1.16s 422: learn: 0.0590381 total: 850ms remaining: 1.16s 423: learn: 0.0590140 total: 852ms remaining: 1.16s 424: learn: 0.0589957 total: 854ms remaining: 1.15s 425: learn: 0.0589794 total: 855ms remaining: 1.15s 426: learn: 0.0589437 total: 857ms remaining: 1.15s 427: learn: 0.0589239 total: 858ms remaining: 1.15s 428: learn: 0.0588788 total: 860ms remaining: 1.14s 429: learn: 0.0588384 total: 862ms remaining: 1.14s 430: learn: 0.0587968 total: 864ms remaining: 1.14s 431: learn: 0.0587551 total: 865ms remaining: 1.14s 432: learn: 0.0587225 total: 867ms remaining: 1.14s 433: learn: 0.0587220 total: 868ms remaining: 1.13s 434: learn: 0.0586913 total: 870ms remaining: 1.13s 435: learn: 0.0586766 total: 872ms remaining: 1.13s 436: learn: 0.0586761 total: 873ms remaining: 1.12s 437: learn: 0.0586204 total: 875ms remaining: 1.12s 438: learn: 0.0585867 total: 877ms remaining: 1.12s 439: learn: 0.0585623 total: 878ms remaining: 1.12s 440: learn: 0.0585170 total: 880ms remaining: 1.11s 441: learn: 0.0585037 total: 882ms remaining: 1.11s 442: learn: 0.0585033 total: 883ms remaining: 1.11s 443: learn: 0.0584912 total: 885ms remaining: 1.11s 444: learn: 0.0584530 total: 887ms remaining: 1.1s 445: learn: 0.0584167 total: 888ms remaining: 1.1s 446: learn: 0.0583740 total: 890ms remaining: 1.1s 447: learn: 0.0583434 total: 892ms remaining: 1.1s 448: learn: 0.0583429 total: 894ms remaining: 1.1s 449: learn: 0.0583140 total: 896ms remaining: 1.09s 450: learn: 0.0582703 total: 898ms remaining: 1.09s 451: learn: 0.0582490 total: 899ms remaining: 1.09s 452: learn: 0.0582203 total: 901ms remaining: 1.09s 453: learn: 0.0581819 total: 903ms remaining: 1.08s 454: learn: 0.0581417 total: 904ms remaining: 1.08s 455: learn: 0.0581130 total: 906ms remaining: 1.08s 456: learn: 0.0580799 total: 908ms remaining: 1.08s 457: learn: 0.0580486 total: 909ms remaining: 1.08s 458: learn: 0.0580383 total: 911ms remaining: 1.07s 459: learn: 0.0580243 total: 914ms remaining: 1.07s 460: learn: 0.0579888 total: 916ms remaining: 1.07s 461: learn: 0.0579519 total: 917ms remaining: 1.07s 462: learn: 0.0579512 total: 919ms remaining: 1.06s 463: learn: 0.0579205 total: 920ms remaining: 1.06s 464: learn: 0.0578896 total: 922ms remaining: 1.06s 465: learn: 0.0578513 total: 924ms remaining: 1.06s 466: learn: 0.0578333 total: 926ms remaining: 1.06s 467: learn: 0.0577982 total: 927ms remaining: 1.05s 468: learn: 0.0577711 total: 930ms remaining: 1.05s 469: learn: 0.0577455 total: 932ms remaining: 1.05s 470: learn: 0.0577197 total: 934ms remaining: 1.05s 471: learn: 0.0576785 total: 936ms remaining: 1.05s 472: learn: 0.0576518 total: 937ms remaining: 1.04s 473: learn: 0.0576391 total: 939ms remaining: 1.04s 474: learn: 0.0576163 total: 940ms remaining: 1.04s 475: learn: 0.0575891 total: 942ms remaining: 1.04s 476: learn: 0.0575753 total: 944ms remaining: 1.03s 477: learn: 0.0575543 total: 945ms remaining: 1.03s 478: learn: 0.0575288 total: 947ms remaining: 1.03s 479: learn: 0.0575134 total: 949ms remaining: 1.03s 480: learn: 0.0574859 total: 951ms remaining: 1.02s 481: learn: 0.0574855 total: 952ms remaining: 1.02s 482: learn: 0.0574708 total: 953ms remaining: 1.02s 483: learn: 0.0574432 total: 955ms remaining: 1.02s 484: learn: 0.0574314 total: 957ms remaining: 1.02s 485: learn: 0.0574173 total: 958ms remaining: 1.01s 486: learn: 0.0573895 total: 960ms remaining: 1.01s 487: learn: 0.0573709 total: 962ms remaining: 1.01s 488: learn: 0.0573363 total: 963ms remaining: 1.01s 489: learn: 0.0573199 total: 965ms remaining: 1s 490: learn: 0.0573022 total: 967ms remaining: 1s 491: learn: 0.0572511 total: 969ms remaining: 1s 492: learn: 0.0572380 total: 970ms remaining: 998ms 493: learn: 0.0572115 total: 972ms remaining: 996ms 494: learn: 0.0571824 total: 974ms remaining: 993ms 495: learn: 0.0571659 total: 976ms remaining: 991ms 496: learn: 0.0571547 total: 977ms remaining: 989ms 497: learn: 0.0571276 total: 979ms remaining: 987ms 498: learn: 0.0571155 total: 980ms remaining: 984ms 499: learn: 0.0570838 total: 982ms remaining: 982ms 500: learn: 0.0570652 total: 984ms remaining: 980ms 501: learn: 0.0570477 total: 985ms remaining: 978ms 502: learn: 0.0570160 total: 987ms remaining: 975ms 503: learn: 0.0569876 total: 989ms remaining: 973ms 504: learn: 0.0569651 total: 990ms remaining: 971ms 505: learn: 0.0569464 total: 992ms remaining: 968ms 506: learn: 0.0569248 total: 994ms remaining: 966ms 507: learn: 0.0568995 total: 996ms remaining: 964ms 508: learn: 0.0568662 total: 997ms remaining: 962ms 509: learn: 0.0568432 total: 999ms remaining: 960ms 510: learn: 0.0568262 total: 1s remaining: 957ms 511: learn: 0.0568120 total: 1s remaining: 955ms 512: learn: 0.0567920 total: 1s remaining: 953ms 513: learn: 0.0567674 total: 1s remaining: 951ms 514: learn: 0.0567381 total: 1.01s remaining: 949ms 515: learn: 0.0567196 total: 1.01s remaining: 946ms 516: learn: 0.0567038 total: 1.01s remaining: 944ms 517: learn: 0.0566813 total: 1.01s remaining: 942ms 518: learn: 0.0566585 total: 1.01s remaining: 940ms 519: learn: 0.0566458 total: 1.01s remaining: 937ms 520: learn: 0.0566144 total: 1.02s remaining: 935ms 521: learn: 0.0565928 total: 1.02s remaining: 933ms 522: learn: 0.0565707 total: 1.02s remaining: 931ms 523: learn: 0.0565528 total: 1.02s remaining: 928ms 524: learn: 0.0565414 total: 1.02s remaining: 926ms 525: learn: 0.0565173 total: 1.02s remaining: 924ms 526: learn: 0.0564949 total: 1.03s remaining: 922ms 527: learn: 0.0564738 total: 1.03s remaining: 920ms 528: learn: 0.0564493 total: 1.03s remaining: 917ms 529: learn: 0.0564268 total: 1.03s remaining: 915ms 530: learn: 0.0564058 total: 1.03s remaining: 913ms 531: learn: 0.0563885 total: 1.03s remaining: 911ms 532: learn: 0.0563667 total: 1.04s remaining: 909ms 533: learn: 0.0563539 total: 1.04s remaining: 907ms 534: learn: 0.0563436 total: 1.04s remaining: 905ms 535: learn: 0.0563089 total: 1.04s remaining: 902ms 536: learn: 0.0562771 total: 1.04s remaining: 900ms 537: learn: 0.0562523 total: 1.05s remaining: 899ms 538: learn: 0.0562365 total: 1.05s remaining: 897ms 539: learn: 0.0562203 total: 1.05s remaining: 895ms 540: learn: 0.0561765 total: 1.05s remaining: 893ms 541: learn: 0.0561646 total: 1.05s remaining: 891ms 542: learn: 0.0561293 total: 1.06s remaining: 894ms 543: learn: 0.0560999 total: 1.06s remaining: 892ms 544: learn: 0.0560843 total: 1.06s remaining: 890ms 545: learn: 0.0560603 total: 1.07s remaining: 888ms 546: learn: 0.0560421 total: 1.07s remaining: 885ms 547: learn: 0.0560289 total: 1.07s remaining: 883ms 548: learn: 0.0559955 total: 1.07s remaining: 881ms 549: learn: 0.0559615 total: 1.07s remaining: 879ms 550: learn: 0.0559473 total: 1.08s remaining: 877ms 551: learn: 0.0559341 total: 1.08s remaining: 875ms 552: learn: 0.0559114 total: 1.08s remaining: 873ms 553: learn: 0.0558817 total: 1.08s remaining: 871ms 554: learn: 0.0558537 total: 1.08s remaining: 868ms 555: learn: 0.0558431 total: 1.08s remaining: 866ms 556: learn: 0.0558179 total: 1.09s remaining: 864ms 557: learn: 0.0557821 total: 1.09s remaining: 862ms 558: learn: 0.0557542 total: 1.09s remaining: 860ms 559: learn: 0.0557352 total: 1.09s remaining: 858ms 560: learn: 0.0557209 total: 1.09s remaining: 855ms 561: learn: 0.0556932 total: 1.09s remaining: 853ms 562: learn: 0.0556833 total: 1.1s remaining: 851ms 563: learn: 0.0556592 total: 1.1s remaining: 849ms 564: learn: 0.0556443 total: 1.1s remaining: 847ms 565: learn: 0.0556331 total: 1.1s remaining: 845ms 566: learn: 0.0556128 total: 1.1s remaining: 843ms 567: learn: 0.0555868 total: 1.1s remaining: 841ms 568: learn: 0.0555688 total: 1.11s remaining: 839ms 569: learn: 0.0555494 total: 1.11s remaining: 836ms 570: learn: 0.0555387 total: 1.11s remaining: 834ms 571: learn: 0.0555137 total: 1.11s remaining: 832ms 572: learn: 0.0555024 total: 1.11s remaining: 830ms 573: learn: 0.0554786 total: 1.11s remaining: 828ms 574: learn: 0.0554669 total: 1.12s remaining: 826ms 575: learn: 0.0554568 total: 1.12s remaining: 825ms 576: learn: 0.0554340 total: 1.12s remaining: 823ms 577: learn: 0.0554108 total: 1.12s remaining: 821ms 578: learn: 0.0553815 total: 1.13s remaining: 819ms 579: learn: 0.0553540 total: 1.13s remaining: 817ms 580: learn: 0.0553454 total: 1.13s remaining: 815ms 581: learn: 0.0553162 total: 1.13s remaining: 813ms 582: learn: 0.0552866 total: 1.14s remaining: 812ms 583: learn: 0.0552732 total: 1.14s remaining: 811ms 584: learn: 0.0552478 total: 1.14s remaining: 810ms 585: learn: 0.0552356 total: 1.14s remaining: 808ms 586: learn: 0.0552093 total: 1.15s remaining: 806ms 587: learn: 0.0551887 total: 1.15s remaining: 805ms 588: learn: 0.0551758 total: 1.15s remaining: 805ms 589: learn: 0.0551464 total: 1.16s remaining: 804ms 590: learn: 0.0551198 total: 1.16s remaining: 802ms 591: learn: 0.0551106 total: 1.16s remaining: 800ms 592: learn: 0.0550934 total: 1.16s remaining: 798ms 593: learn: 0.0550626 total: 1.17s remaining: 797ms 594: learn: 0.0550457 total: 1.17s remaining: 795ms 595: learn: 0.0550270 total: 1.17s remaining: 793ms 596: learn: 0.0550158 total: 1.17s remaining: 790ms 597: learn: 0.0549855 total: 1.17s remaining: 788ms 598: learn: 0.0549748 total: 1.17s remaining: 786ms 599: learn: 0.0549502 total: 1.18s remaining: 785ms 600: learn: 0.0549406 total: 1.18s remaining: 783ms 601: learn: 0.0549272 total: 1.18s remaining: 781ms 602: learn: 0.0548968 total: 1.18s remaining: 779ms 603: learn: 0.0548884 total: 1.18s remaining: 777ms 604: learn: 0.0548732 total: 1.19s remaining: 775ms 605: learn: 0.0548581 total: 1.19s remaining: 773ms 606: learn: 0.0548465 total: 1.19s remaining: 771ms 607: learn: 0.0548283 total: 1.19s remaining: 769ms 608: learn: 0.0548211 total: 1.19s remaining: 767ms 609: learn: 0.0547965 total: 1.2s remaining: 765ms 610: learn: 0.0547817 total: 1.2s remaining: 763ms 611: learn: 0.0547789 total: 1.2s remaining: 761ms 612: learn: 0.0547533 total: 1.2s remaining: 759ms 613: learn: 0.0547449 total: 1.2s remaining: 757ms 614: learn: 0.0547207 total: 1.21s remaining: 755ms 615: learn: 0.0546985 total: 1.21s remaining: 753ms 616: learn: 0.0546867 total: 1.21s remaining: 751ms 617: learn: 0.0546642 total: 1.21s remaining: 749ms 618: learn: 0.0546440 total: 1.21s remaining: 747ms 619: learn: 0.0546347 total: 1.22s remaining: 745ms 620: learn: 0.0546214 total: 1.22s remaining: 743ms 621: learn: 0.0545945 total: 1.22s remaining: 741ms 622: learn: 0.0545762 total: 1.22s remaining: 739ms 623: learn: 0.0545675 total: 1.22s remaining: 737ms 624: learn: 0.0545481 total: 1.23s remaining: 737ms 625: learn: 0.0545379 total: 1.23s remaining: 735ms 626: learn: 0.0545032 total: 1.23s remaining: 733ms 627: learn: 0.0544910 total: 1.23s remaining: 731ms 628: learn: 0.0544730 total: 1.24s remaining: 729ms 629: learn: 0.0544503 total: 1.24s remaining: 727ms 630: learn: 0.0544329 total: 1.24s remaining: 725ms 631: learn: 0.0544130 total: 1.24s remaining: 722ms 632: learn: 0.0544005 total: 1.24s remaining: 720ms 633: learn: 0.0543935 total: 1.24s remaining: 718ms 634: learn: 0.0543801 total: 1.25s remaining: 716ms 635: learn: 0.0543667 total: 1.25s remaining: 714ms 636: learn: 0.0543604 total: 1.25s remaining: 712ms 637: learn: 0.0543413 total: 1.25s remaining: 710ms 638: learn: 0.0543209 total: 1.25s remaining: 708ms 639: learn: 0.0542991 total: 1.25s remaining: 706ms 640: learn: 0.0542762 total: 1.26s remaining: 705ms 641: learn: 0.0542588 total: 1.26s remaining: 702ms 642: learn: 0.0542480 total: 1.26s remaining: 700ms 643: learn: 0.0542341 total: 1.26s remaining: 698ms 644: learn: 0.0542226 total: 1.26s remaining: 696ms 645: learn: 0.0542031 total: 1.27s remaining: 694ms 646: learn: 0.0541913 total: 1.27s remaining: 692ms 647: learn: 0.0541841 total: 1.27s remaining: 690ms 648: learn: 0.0541697 total: 1.27s remaining: 688ms 649: learn: 0.0541492 total: 1.27s remaining: 686ms 650: learn: 0.0541399 total: 1.27s remaining: 684ms 651: learn: 0.0541338 total: 1.28s remaining: 682ms 652: learn: 0.0541187 total: 1.28s remaining: 680ms 653: learn: 0.0541012 total: 1.28s remaining: 677ms 654: learn: 0.0540931 total: 1.28s remaining: 675ms 655: learn: 0.0540795 total: 1.28s remaining: 673ms 656: learn: 0.0540758 total: 1.28s remaining: 671ms 657: learn: 0.0540610 total: 1.29s remaining: 669ms 658: learn: 0.0540500 total: 1.29s remaining: 667ms 659: learn: 0.0540438 total: 1.29s remaining: 665ms 660: learn: 0.0540342 total: 1.29s remaining: 663ms 661: learn: 0.0540157 total: 1.29s remaining: 661ms 662: learn: 0.0539981 total: 1.3s remaining: 659ms 663: learn: 0.0539932 total: 1.3s remaining: 657ms 664: learn: 0.0539867 total: 1.3s remaining: 655ms 665: learn: 0.0539742 total: 1.3s remaining: 653ms 666: learn: 0.0539562 total: 1.3s remaining: 651ms 667: learn: 0.0539357 total: 1.3s remaining: 649ms 668: learn: 0.0539224 total: 1.31s remaining: 647ms 669: learn: 0.0539138 total: 1.31s remaining: 644ms 670: learn: 0.0539103 total: 1.31s remaining: 642ms 671: learn: 0.0539017 total: 1.31s remaining: 640ms 672: learn: 0.0538970 total: 1.31s remaining: 638ms 673: learn: 0.0538676 total: 1.31s remaining: 636ms 674: learn: 0.0538591 total: 1.32s remaining: 634ms 675: learn: 0.0538473 total: 1.32s remaining: 632ms 676: learn: 0.0538402 total: 1.32s remaining: 630ms 677: learn: 0.0538206 total: 1.32s remaining: 628ms 678: learn: 0.0537987 total: 1.32s remaining: 626ms 679: learn: 0.0537880 total: 1.32s remaining: 624ms 680: learn: 0.0537702 total: 1.33s remaining: 622ms 681: learn: 0.0537478 total: 1.33s remaining: 620ms 682: learn: 0.0537434 total: 1.33s remaining: 618ms 683: learn: 0.0537282 total: 1.33s remaining: 617ms 684: learn: 0.0537243 total: 1.34s remaining: 615ms 685: learn: 0.0537169 total: 1.34s remaining: 612ms 686: learn: 0.0537021 total: 1.34s remaining: 610ms 687: learn: 0.0536830 total: 1.34s remaining: 608ms 688: learn: 0.0536616 total: 1.34s remaining: 606ms 689: learn: 0.0536471 total: 1.34s remaining: 604ms 690: learn: 0.0536308 total: 1.35s remaining: 602ms 691: learn: 0.0536154 total: 1.35s remaining: 600ms 692: learn: 0.0536068 total: 1.35s remaining: 598ms 693: learn: 0.0536018 total: 1.35s remaining: 596ms 694: learn: 0.0535857 total: 1.35s remaining: 594ms 695: learn: 0.0535772 total: 1.35s remaining: 592ms 696: learn: 0.0535701 total: 1.36s remaining: 590ms 697: learn: 0.0535521 total: 1.36s remaining: 588ms 698: learn: 0.0535331 total: 1.36s remaining: 586ms 699: learn: 0.0535227 total: 1.36s remaining: 584ms 700: learn: 0.0535079 total: 1.36s remaining: 582ms 701: learn: 0.0534889 total: 1.37s remaining: 580ms 702: learn: 0.0534751 total: 1.37s remaining: 578ms 703: learn: 0.0534631 total: 1.37s remaining: 576ms 704: learn: 0.0534334 total: 1.37s remaining: 574ms 705: learn: 0.0534200 total: 1.37s remaining: 572ms 706: learn: 0.0534000 total: 1.38s remaining: 570ms 707: learn: 0.0533965 total: 1.38s remaining: 568ms 708: learn: 0.0533884 total: 1.38s remaining: 566ms 709: learn: 0.0533758 total: 1.38s remaining: 564ms 710: learn: 0.0533699 total: 1.38s remaining: 562ms 711: learn: 0.0533575 total: 1.38s remaining: 560ms 712: learn: 0.0533544 total: 1.39s remaining: 558ms 713: learn: 0.0533331 total: 1.39s remaining: 556ms 714: learn: 0.0533241 total: 1.39s remaining: 554ms 715: learn: 0.0533089 total: 1.39s remaining: 552ms 716: learn: 0.0532974 total: 1.39s remaining: 550ms 717: learn: 0.0532797 total: 1.39s remaining: 548ms 718: learn: 0.0532728 total: 1.4s remaining: 546ms 719: learn: 0.0532624 total: 1.4s remaining: 544ms 720: learn: 0.0532508 total: 1.4s remaining: 542ms 721: learn: 0.0532369 total: 1.4s remaining: 540ms 722: learn: 0.0532161 total: 1.4s remaining: 538ms 723: learn: 0.0531968 total: 1.41s remaining: 536ms 724: learn: 0.0531808 total: 1.41s remaining: 534ms 725: learn: 0.0531701 total: 1.41s remaining: 532ms 726: learn: 0.0531592 total: 1.41s remaining: 530ms 727: learn: 0.0531517 total: 1.41s remaining: 528ms 728: learn: 0.0531427 total: 1.41s remaining: 526ms 729: learn: 0.0531241 total: 1.42s remaining: 524ms 730: learn: 0.0531175 total: 1.42s remaining: 522ms 731: learn: 0.0531109 total: 1.42s remaining: 520ms 732: learn: 0.0530952 total: 1.42s remaining: 518ms 733: learn: 0.0530712 total: 1.42s remaining: 516ms 734: learn: 0.0530637 total: 1.43s remaining: 514ms 735: learn: 0.0530581 total: 1.43s remaining: 512ms 736: learn: 0.0530480 total: 1.43s remaining: 510ms 737: learn: 0.0530396 total: 1.43s remaining: 508ms 738: learn: 0.0530220 total: 1.43s remaining: 506ms 739: learn: 0.0529997 total: 1.44s remaining: 506ms 740: learn: 0.0529818 total: 1.44s remaining: 504ms 741: learn: 0.0529697 total: 1.44s remaining: 502ms 742: learn: 0.0529643 total: 1.45s remaining: 500ms 743: learn: 0.0529518 total: 1.45s remaining: 498ms 744: learn: 0.0529387 total: 1.45s remaining: 496ms 745: learn: 0.0529176 total: 1.45s remaining: 494ms 746: learn: 0.0529051 total: 1.45s remaining: 492ms 747: learn: 0.0529020 total: 1.46s remaining: 490ms 748: learn: 0.0528936 total: 1.46s remaining: 488ms 749: learn: 0.0528822 total: 1.46s remaining: 486ms 750: learn: 0.0528641 total: 1.46s remaining: 484ms 751: learn: 0.0528528 total: 1.46s remaining: 482ms 752: learn: 0.0528481 total: 1.46s remaining: 480ms 753: learn: 0.0528388 total: 1.47s remaining: 478ms 754: learn: 0.0528191 total: 1.47s remaining: 476ms 755: learn: 0.0528045 total: 1.47s remaining: 474ms 756: learn: 0.0527859 total: 1.47s remaining: 472ms 757: learn: 0.0527723 total: 1.47s remaining: 470ms 758: learn: 0.0527655 total: 1.47s remaining: 468ms 759: learn: 0.0527402 total: 1.48s remaining: 466ms 760: learn: 0.0527262 total: 1.48s remaining: 464ms 761: learn: 0.0527181 total: 1.48s remaining: 462ms 762: learn: 0.0526993 total: 1.48s remaining: 460ms 763: learn: 0.0526964 total: 1.48s remaining: 458ms 764: learn: 0.0526887 total: 1.49s remaining: 456ms 765: learn: 0.0526726 total: 1.49s remaining: 455ms 766: learn: 0.0526641 total: 1.49s remaining: 453ms 767: learn: 0.0526578 total: 1.49s remaining: 451ms 768: learn: 0.0526454 total: 1.49s remaining: 449ms 769: learn: 0.0526313 total: 1.49s remaining: 447ms 770: learn: 0.0526139 total: 1.5s remaining: 445ms 771: learn: 0.0525923 total: 1.5s remaining: 443ms 772: learn: 0.0525801 total: 1.5s remaining: 441ms 773: learn: 0.0525691 total: 1.51s remaining: 440ms 774: learn: 0.0525613 total: 1.51s remaining: 438ms 775: learn: 0.0525447 total: 1.51s remaining: 436ms 776: learn: 0.0525290 total: 1.51s remaining: 434ms 777: learn: 0.0525128 total: 1.51s remaining: 432ms 778: learn: 0.0524927 total: 1.52s remaining: 430ms 779: learn: 0.0524851 total: 1.52s remaining: 428ms 780: learn: 0.0524549 total: 1.52s remaining: 426ms 781: learn: 0.0524237 total: 1.52s remaining: 424ms 782: learn: 0.0524085 total: 1.52s remaining: 422ms 783: learn: 0.0523983 total: 1.52s remaining: 420ms 784: learn: 0.0523840 total: 1.53s remaining: 418ms 785: learn: 0.0523645 total: 1.53s remaining: 416ms 786: learn: 0.0523496 total: 1.53s remaining: 414ms 787: learn: 0.0523442 total: 1.53s remaining: 412ms 788: learn: 0.0523204 total: 1.53s remaining: 410ms 789: learn: 0.0523041 total: 1.54s remaining: 408ms 790: learn: 0.0522874 total: 1.54s remaining: 406ms 791: learn: 0.0522610 total: 1.54s remaining: 404ms 792: learn: 0.0522567 total: 1.54s remaining: 402ms 793: learn: 0.0522310 total: 1.54s remaining: 400ms 794: learn: 0.0522051 total: 1.54s remaining: 398ms 795: learn: 0.0521927 total: 1.55s remaining: 397ms 796: learn: 0.0521770 total: 1.55s remaining: 395ms 797: learn: 0.0521632 total: 1.55s remaining: 393ms 798: learn: 0.0521609 total: 1.55s remaining: 391ms 799: learn: 0.0521443 total: 1.55s remaining: 389ms 800: learn: 0.0521362 total: 1.55s remaining: 387ms 801: learn: 0.0521281 total: 1.56s remaining: 385ms 802: learn: 0.0521146 total: 1.56s remaining: 383ms 803: learn: 0.0521065 total: 1.56s remaining: 381ms 804: learn: 0.0520955 total: 1.56s remaining: 379ms 805: learn: 0.0520898 total: 1.56s remaining: 377ms 806: learn: 0.0520734 total: 1.57s remaining: 375ms 807: learn: 0.0520521 total: 1.57s remaining: 373ms 808: learn: 0.0520487 total: 1.57s remaining: 371ms 809: learn: 0.0520347 total: 1.57s remaining: 369ms 810: learn: 0.0520314 total: 1.57s remaining: 367ms 811: learn: 0.0520129 total: 1.57s remaining: 365ms 812: learn: 0.0520061 total: 1.58s remaining: 363ms 813: learn: 0.0519909 total: 1.58s remaining: 361ms 814: learn: 0.0519869 total: 1.58s remaining: 359ms 815: learn: 0.0519849 total: 1.58s remaining: 357ms 816: learn: 0.0519771 total: 1.58s remaining: 355ms 817: learn: 0.0519669 total: 1.58s remaining: 353ms 818: learn: 0.0519405 total: 1.59s remaining: 351ms 819: learn: 0.0519280 total: 1.59s remaining: 350ms 820: learn: 0.0519266 total: 1.6s remaining: 348ms 821: learn: 0.0519142 total: 1.6s remaining: 346ms 822: learn: 0.0519007 total: 1.6s remaining: 344ms 823: learn: 0.0518926 total: 1.6s remaining: 342ms 824: learn: 0.0518762 total: 1.6s remaining: 340ms 825: learn: 0.0518602 total: 1.61s remaining: 338ms 826: learn: 0.0518547 total: 1.61s remaining: 336ms 827: learn: 0.0518434 total: 1.61s remaining: 334ms 828: learn: 0.0518353 total: 1.61s remaining: 332ms 829: learn: 0.0518240 total: 1.61s remaining: 330ms 830: learn: 0.0518094 total: 1.61s remaining: 328ms 831: learn: 0.0517962 total: 1.62s remaining: 326ms 832: learn: 0.0517870 total: 1.62s remaining: 324ms 833: learn: 0.0517651 total: 1.62s remaining: 323ms 834: learn: 0.0517582 total: 1.62s remaining: 321ms 835: learn: 0.0517509 total: 1.62s remaining: 319ms 836: learn: 0.0517372 total: 1.63s remaining: 317ms 837: learn: 0.0517354 total: 1.63s remaining: 315ms 838: learn: 0.0517266 total: 1.63s remaining: 313ms 839: learn: 0.0517141 total: 1.63s remaining: 311ms 840: learn: 0.0517062 total: 1.63s remaining: 309ms 841: learn: 0.0516931 total: 1.63s remaining: 307ms 842: learn: 0.0516860 total: 1.64s remaining: 305ms 843: learn: 0.0516812 total: 1.64s remaining: 303ms 844: learn: 0.0516686 total: 1.64s remaining: 301ms 845: learn: 0.0516579 total: 1.64s remaining: 299ms 846: learn: 0.0516479 total: 1.64s remaining: 297ms 847: learn: 0.0516383 total: 1.64s remaining: 295ms 848: learn: 0.0516279 total: 1.65s remaining: 293ms 849: learn: 0.0516195 total: 1.65s remaining: 291ms 850: learn: 0.0516057 total: 1.65s remaining: 289ms 851: learn: 0.0515904 total: 1.65s remaining: 287ms 852: learn: 0.0515797 total: 1.65s remaining: 285ms 853: learn: 0.0515645 total: 1.66s remaining: 283ms 854: learn: 0.0515441 total: 1.66s remaining: 281ms 855: learn: 0.0515367 total: 1.66s remaining: 279ms 856: learn: 0.0515290 total: 1.66s remaining: 277ms 857: learn: 0.0515207 total: 1.66s remaining: 275ms 858: learn: 0.0515058 total: 1.66s remaining: 273ms 859: learn: 0.0515034 total: 1.67s remaining: 271ms 860: learn: 0.0515001 total: 1.67s remaining: 269ms 861: learn: 0.0514905 total: 1.67s remaining: 267ms 862: learn: 0.0514845 total: 1.67s remaining: 265ms 863: learn: 0.0514810 total: 1.67s remaining: 263ms 864: learn: 0.0514710 total: 1.68s remaining: 262ms 865: learn: 0.0514591 total: 1.68s remaining: 260ms 866: learn: 0.0514514 total: 1.68s remaining: 258ms 867: learn: 0.0514472 total: 1.68s remaining: 256ms 868: learn: 0.0514384 total: 1.68s remaining: 254ms 869: learn: 0.0514288 total: 1.69s remaining: 252ms 870: learn: 0.0514246 total: 1.69s remaining: 250ms 871: learn: 0.0514147 total: 1.69s remaining: 248ms 872: learn: 0.0513994 total: 1.69s remaining: 246ms 873: learn: 0.0513797 total: 1.69s remaining: 244ms 874: learn: 0.0513615 total: 1.7s remaining: 242ms 875: learn: 0.0513511 total: 1.7s remaining: 240ms 876: learn: 0.0513301 total: 1.7s remaining: 238ms 877: learn: 0.0513189 total: 1.7s remaining: 236ms 878: learn: 0.0513082 total: 1.7s remaining: 234ms 879: learn: 0.0513039 total: 1.7s remaining: 232ms 880: learn: 0.0512898 total: 1.71s remaining: 230ms 881: learn: 0.0512776 total: 1.71s remaining: 229ms 882: learn: 0.0512711 total: 1.71s remaining: 227ms 883: learn: 0.0512636 total: 1.71s remaining: 225ms 884: learn: 0.0512576 total: 1.71s remaining: 223ms 885: learn: 0.0512541 total: 1.72s remaining: 221ms 886: learn: 0.0512497 total: 1.72s remaining: 219ms 887: learn: 0.0512400 total: 1.72s remaining: 217ms 888: learn: 0.0512264 total: 1.72s remaining: 215ms 889: learn: 0.0512179 total: 1.72s remaining: 213ms 890: learn: 0.0512118 total: 1.72s remaining: 211ms 891: learn: 0.0512072 total: 1.73s remaining: 209ms 892: learn: 0.0511979 total: 1.73s remaining: 207ms 893: learn: 0.0511912 total: 1.73s remaining: 205ms 894: learn: 0.0511796 total: 1.73s remaining: 203ms 895: learn: 0.0511700 total: 1.73s remaining: 201ms 896: learn: 0.0511606 total: 1.74s remaining: 199ms 897: learn: 0.0511473 total: 1.74s remaining: 197ms 898: learn: 0.0511344 total: 1.74s remaining: 195ms 899: learn: 0.0511283 total: 1.74s remaining: 193ms 900: learn: 0.0511236 total: 1.74s remaining: 192ms 901: learn: 0.0511107 total: 1.74s remaining: 190ms 902: learn: 0.0510980 total: 1.75s remaining: 188ms 903: learn: 0.0510944 total: 1.75s remaining: 186ms 904: learn: 0.0510870 total: 1.75s remaining: 184ms 905: learn: 0.0510738 total: 1.75s remaining: 182ms 906: learn: 0.0510731 total: 1.75s remaining: 180ms 907: learn: 0.0510666 total: 1.75s remaining: 178ms 908: learn: 0.0510569 total: 1.76s remaining: 176ms 909: learn: 0.0510511 total: 1.76s remaining: 174ms 910: learn: 0.0510408 total: 1.76s remaining: 172ms 911: learn: 0.0510311 total: 1.77s remaining: 171ms 912: learn: 0.0510161 total: 1.77s remaining: 169ms 913: learn: 0.0510036 total: 1.78s remaining: 167ms 914: learn: 0.0509949 total: 1.78s remaining: 165ms 915: learn: 0.0509865 total: 1.78s remaining: 163ms 916: learn: 0.0509739 total: 1.78s remaining: 161ms 917: learn: 0.0509602 total: 1.78s remaining: 159ms 918: learn: 0.0509509 total: 1.78s remaining: 157ms 919: learn: 0.0509403 total: 1.79s remaining: 155ms 920: learn: 0.0509367 total: 1.79s remaining: 153ms 921: learn: 0.0509329 total: 1.79s remaining: 151ms 922: learn: 0.0509281 total: 1.79s remaining: 150ms 923: learn: 0.0509271 total: 1.79s remaining: 148ms 924: learn: 0.0509247 total: 1.79s remaining: 146ms 925: learn: 0.0509131 total: 1.8s remaining: 144ms 926: learn: 0.0509022 total: 1.8s remaining: 142ms 927: learn: 0.0508895 total: 1.8s remaining: 140ms 928: learn: 0.0508792 total: 1.8s remaining: 138ms 929: learn: 0.0508687 total: 1.8s remaining: 136ms 930: learn: 0.0508618 total: 1.8s remaining: 134ms 931: learn: 0.0508558 total: 1.81s remaining: 132ms 932: learn: 0.0508440 total: 1.81s remaining: 130ms 933: learn: 0.0508271 total: 1.81s remaining: 128ms 934: learn: 0.0508189 total: 1.81s remaining: 126ms 935: learn: 0.0508143 total: 1.81s remaining: 124ms 936: learn: 0.0508095 total: 1.82s remaining: 122ms 937: learn: 0.0507989 total: 1.82s remaining: 120ms 938: learn: 0.0507897 total: 1.82s remaining: 118ms 939: learn: 0.0507790 total: 1.82s remaining: 116ms 940: learn: 0.0507678 total: 1.82s remaining: 114ms 941: learn: 0.0507586 total: 1.82s remaining: 112ms 942: learn: 0.0507559 total: 1.83s remaining: 110ms 943: learn: 0.0507497 total: 1.83s remaining: 108ms 944: learn: 0.0507392 total: 1.83s remaining: 107ms 945: learn: 0.0507343 total: 1.83s remaining: 105ms 946: learn: 0.0507208 total: 1.83s remaining: 103ms 947: learn: 0.0507128 total: 1.83s remaining: 101ms 948: learn: 0.0507017 total: 1.84s remaining: 98.8ms 949: learn: 0.0506843 total: 1.84s remaining: 96.9ms 950: learn: 0.0506697 total: 1.84s remaining: 95ms 951: learn: 0.0506649 total: 1.85s remaining: 93.1ms 952: learn: 0.0506516 total: 1.85s remaining: 91.1ms 953: learn: 0.0506425 total: 1.85s remaining: 89.2ms 954: learn: 0.0506331 total: 1.85s remaining: 87.3ms 955: learn: 0.0506247 total: 1.85s remaining: 85.3ms 956: learn: 0.0506179 total: 1.85s remaining: 83.4ms 957: learn: 0.0506110 total: 1.86s remaining: 81.4ms 958: learn: 0.0505985 total: 1.86s remaining: 79.5ms 959: learn: 0.0505809 total: 1.86s remaining: 77.5ms 960: learn: 0.0505667 total: 1.86s remaining: 75.6ms 961: learn: 0.0505562 total: 1.86s remaining: 73.7ms 962: learn: 0.0505462 total: 1.87s remaining: 71.7ms 963: learn: 0.0505364 total: 1.87s remaining: 69.8ms 964: learn: 0.0505280 total: 1.87s remaining: 67.8ms 965: learn: 0.0505222 total: 1.87s remaining: 65.9ms 966: learn: 0.0504988 total: 1.87s remaining: 64ms 967: learn: 0.0504917 total: 1.88s remaining: 62ms 968: learn: 0.0504864 total: 1.88s remaining: 60.1ms 969: learn: 0.0504646 total: 1.88s remaining: 58.1ms 970: learn: 0.0504542 total: 1.88s remaining: 56.2ms 971: learn: 0.0504461 total: 1.88s remaining: 54.2ms 972: learn: 0.0504405 total: 1.88s remaining: 52.3ms 973: learn: 0.0504244 total: 1.89s remaining: 50.4ms 974: learn: 0.0504210 total: 1.89s remaining: 48.4ms 975: learn: 0.0504142 total: 1.89s remaining: 46.5ms 976: learn: 0.0504108 total: 1.89s remaining: 44.5ms 977: learn: 0.0503978 total: 1.89s remaining: 42.6ms 978: learn: 0.0503889 total: 1.9s remaining: 40.6ms 979: learn: 0.0503844 total: 1.9s remaining: 38.7ms 980: learn: 0.0503750 total: 1.9s remaining: 36.8ms 981: learn: 0.0503654 total: 1.9s remaining: 34.8ms 982: learn: 0.0503552 total: 1.9s remaining: 32.9ms 983: learn: 0.0503421 total: 1.9s remaining: 31ms 984: learn: 0.0503358 total: 1.91s remaining: 29ms 985: learn: 0.0503284 total: 1.91s remaining: 27.1ms 986: learn: 0.0503168 total: 1.91s remaining: 25.1ms 987: learn: 0.0503082 total: 1.91s remaining: 23.2ms 988: learn: 0.0503072 total: 1.91s remaining: 21.3ms 989: learn: 0.0502941 total: 1.91s remaining: 19.3ms 990: learn: 0.0502836 total: 1.92s remaining: 17.4ms 991: learn: 0.0502773 total: 1.92s remaining: 15.5ms 992: learn: 0.0502739 total: 1.92s remaining: 13.5ms 993: learn: 0.0502654 total: 1.92s remaining: 11.6ms 994: learn: 0.0502497 total: 1.92s remaining: 9.66ms 995: learn: 0.0502384 total: 1.92s remaining: 7.73ms 996: learn: 0.0502254 total: 1.93s remaining: 5.79ms 997: learn: 0.0502181 total: 1.93s remaining: 3.86ms 998: learn: 0.0502100 total: 1.93s remaining: 1.93ms 999: learn: 0.0502045 total: 1.93s remaining: 0us . &lt;catboost.core.CatBoostRegressor at 0x7f2793e885d0&gt; . cbr_pr = np.expm1(cbr.predict(X_train_dum)) cbr_rmse = sqrt(mean_squared_error(np.expm1(y_train), cbr_pr)) print(&quot;rmse : {:.2f}&quot;.format(cbr_rmse)) #교차검증 정확도 ???, rmse : 239692 . cross val score : [nan nan nan nan nan nan nan nan nan nan] mean cv score : nan rmse : 239692.97 . /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: 10 fits failed out of a total of 10. The score on these train-test partitions for these parameters will be set to nan. If these failures are not expected, you can try to debug them by setting error_score=&#39;raise&#39;. Below are more details about the failures: -- 9 fits failed with the following error: Traceback (most recent call last): File &#34;_catboost.pyx&#34;, line 2275, in _catboost.get_float_feature File &#34;_catboost.pyx&#34;, line 1128, in _catboost._FloatOrNan File &#34;_catboost.pyx&#34;, line 949, in _catboost._FloatOrNanFromString TypeError: Cannot convert &#39;b&#39;south america&#39;&#39; to float During handling of the above exception, another exception occurred: Traceback (most recent call last): File &#34;/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py&#34;, line 680, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 5593, in fit save_snapshot, snapshot_file, snapshot_interval, init_model, callbacks, log_cout, log_cerr) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 2270, in _fit callbacks=callbacks File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 2150, in _prepare_train_params baseline, column_description) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 1431, in _build_train_pool group_weight=group_weight, subgroup_id=subgroup_id, pairs_weight=pairs_weight, baseline=baseline) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 791, in __init__ group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 1412, in _init group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count) File &#34;_catboost.pyx&#34;, line 3941, in _catboost._PoolBase._init_pool File &#34;_catboost.pyx&#34;, line 3991, in _catboost._PoolBase._init_pool File &#34;_catboost.pyx&#34;, line 3807, in _catboost._PoolBase._init_features_order_layout_pool File &#34;_catboost.pyx&#34;, line 2775, in _catboost._set_features_order_data_pd_data_frame File &#34;_catboost.pyx&#34;, line 2316, in _catboost.create_num_factor_data File &#34;_catboost.pyx&#34;, line 2277, in _catboost.get_float_feature _catboost.CatBoostError: Bad value for num_feature[non_default_doc_idx=0,feature_idx=0]=&#34;south america&#34;: Cannot convert &#39;b&#39;south america&#39;&#39; to float -- 1 fits failed with the following error: Traceback (most recent call last): File &#34;_catboost.pyx&#34;, line 2275, in _catboost.get_float_feature File &#34;_catboost.pyx&#34;, line 1128, in _catboost._FloatOrNan File &#34;_catboost.pyx&#34;, line 949, in _catboost._FloatOrNanFromString TypeError: Cannot convert &#39;b&#39;europe&#39;&#39; to float During handling of the above exception, another exception occurred: Traceback (most recent call last): File &#34;/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py&#34;, line 680, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 5593, in fit save_snapshot, snapshot_file, snapshot_interval, init_model, callbacks, log_cout, log_cerr) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 2270, in _fit callbacks=callbacks File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 2150, in _prepare_train_params baseline, column_description) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 1431, in _build_train_pool group_weight=group_weight, subgroup_id=subgroup_id, pairs_weight=pairs_weight, baseline=baseline) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 791, in __init__ group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count) File &#34;/usr/local/lib/python3.7/dist-packages/catboost/core.py&#34;, line 1412, in _init group_id, group_weight, subgroup_id, pairs_weight, baseline, timestamp, feature_names, feature_tags, thread_count) File &#34;_catboost.pyx&#34;, line 3941, in _catboost._PoolBase._init_pool File &#34;_catboost.pyx&#34;, line 3991, in _catboost._PoolBase._init_pool File &#34;_catboost.pyx&#34;, line 3807, in _catboost._PoolBase._init_features_order_layout_pool File &#34;_catboost.pyx&#34;, line 2775, in _catboost._set_features_order_data_pd_data_frame File &#34;_catboost.pyx&#34;, line 2316, in _catboost.create_num_factor_data File &#34;_catboost.pyx&#34;, line 2277, in _catboost.get_float_feature _catboost.CatBoostError: Bad value for num_feature[non_default_doc_idx=0,feature_idx=0]=&#34;europe&#34;: Cannot convert &#39;b&#39;europe&#39;&#39; to float warnings.warn(some_fits_failed_message, FitFailedWarning) . cb_pred = np.expm1(cbr.predict(X_test_dum)) print(cb_pred) . [6.59722240e+07 1.01632191e+08 8.39268700e+07 ... 5.86808149e+04 5.25784309e+04 4.96846740e+04] . &#52572;&#51333; &#50696;&#52769;&#44050; &#49373;&#49457; . submission = pd.read_csv(&quot;submission.csv&quot;) submission . id value . 0 1 | 0 | . 1 2 | 0 | . 2 4 | 0 | . 3 5 | 0 | . 4 6 | 0 | . ... ... | ... | . 3823 16924 | 0 | . 3824 16929 | 0 | . 3825 16932 | 0 | . 3826 16937 | 0 | . 3827 16943 | 0 | . 3828 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; submission[&quot;value&quot;] = (vt_pred + et_pred + ngb_pred + gb_pred + xgb_pred + lgbm_pred + cb_pred)/7 submission . id value . 0 1 | 7.649287e+07 | . 1 2 | 1.143837e+08 | . 2 4 | 9.017297e+07 | . 3 5 | 9.304075e+07 | . 4 6 | 6.482971e+07 | . ... ... | ... | . 3823 16924 | 5.675321e+04 | . 3824 16929 | 4.830436e+04 | . 3825 16932 | 5.658545e+04 | . 3826 16937 | 4.701231e+04 | . 3827 16943 | 4.737716e+04 | . 3828 rows × 2 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; submission.to_csv(&quot;final.csv&quot;,index=False) . &#44208;&#47200; . 모델링 결론 . | 분석에서 아쉬웠던 점 . | . &#47784;&#45944;&#47553; &#44208;&#47200; . 7개의 모델에서 예측한 y_pred값을 더한후 7로 나누어 예측값의 평균을 내주었고 이를 최종 예측값으로 사용하였다. . | Test data에 대한 최종 예측값의 RMSE는 447922가 나왔으며 대회 제출자 327명 중 84등의 순위를 기록하였다. . | . &#48516;&#49437;&#50640;&#49436; &#50500;&#49772;&#50912;&#45912; &#51216; . 모델링 과정에서 하이퍼파라미터 튜닝을 실시할 때 여러 파라미터에다가 교차검증까지 수행하니 한 모델의 하이퍼파라미터 튜닝때마다 약 40~80분정도의 시간이 소요되어 많은 시간을 필요로 했던 점이 불편하였다. | . 많은 시간을 들여 하이퍼파라미터 튜닝을 하고 분석을 진행하였음에도 RMSE를 40만대까지밖에 줄이지 못했던 점이 아쉬웠던 것 같다. 모델링에 대해 조금 더 공부한 후에 과적합 되지 않으며 로스를 줄일 수 있는 방법을 찾아 적용해봐야겠다는 생각이 든 분석 경험이었다. | . NGBoost 모델과 CatBoost 모델은 sklearn 모듈 안의 모델이 아닌 외부 모듈의 모델이어서 그런지 cross_val_score 함수가 제대로 작동하지 않아 교차검증 정확도 값을 산출하지 못하였다. 구글링을 통해 최대한 찾아보려 했지만 결과적으로 해결하지 못하여 아쉬었다. | .",
            "url": "https://chanseongparkk.github.io/cspBlog/colaboratory/python/2022/06/10/%ED%95%B4%EC%99%B8%EC%B6%95%EA%B5%AC%EC%84%A0%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-%EB%B0%8F-%EC%9D%B4%EC%A0%81%EB%A3%8C-%EC%98%88%EC%B8%A1-%EB%AA%A8%EB%8D%B8%EB%A7%81.html",
            "relUrl": "/colaboratory/python/2022/06/10/%ED%95%B4%EC%99%B8%EC%B6%95%EA%B5%AC%EC%84%A0%EC%88%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-%EB%B0%8F-%EC%9D%B4%EC%A0%81%EB%A3%8C-%EC%98%88%EC%B8%A1-%EB%AA%A8%EB%8D%B8%EB%A7%81.html",
            "date": " • Jun 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "geopandas exercise5",
            "content": "This notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link. . . Introduction . You are part of a crisis response team, and you want to identify how hospitals have been responding to crash collisions in New York City. . Before you get started, run the code cell below to set everything up. . import math import geopandas as gpd import pandas as pd from shapely.geometry import MultiPolygon import folium from folium import Choropleth, Marker from folium.plugins import HeatMap, MarkerCluster from learntools.core import binder binder.bind(globals()) from learntools.geospatial.ex5 import * . You&#39;ll use the embed_map() function to visualize your maps. . def embed_map(m, file_name): from IPython.display import IFrame m.save(file_name) return IFrame(file_name, width=&#39;100%&#39;, height=&#39;500px&#39;) . Exercises . 1) Visualize the collision data. . Run the code cell below to load a GeoDataFrame collisions tracking major motor vehicle collisions in 2013-2018. . collisions = gpd.read_file(&quot;../input/geospatial-learn-course-data/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp&quot;) collisions.head() . Use the &quot;LATITUDE&quot; and &quot;LONGITUDE&quot; columns to create an interactive map to visualize the collision data. What type of map do you think is most effective? . m_1 = folium.Map(location=[40.7, -74], zoom_start=11) # Your code here: Visualize the collision data HeatMap(data=collisions[[&#39;LATITUDE&#39;, &#39;LONGITUDE&#39;]]).add_to(m_1) # Uncomment to see a hint #q_1.hint() # Show the map embed_map(m_1, &quot;q_1.html&quot;) . #q_1.check() # Uncomment to see our solution (your code may look different!) #q_1.solution() . 2) Understand hospital coverage. . Run the next code cell to load the hospital data. . hospitals = gpd.read_file(&quot;../input/geospatial-learn-course-data/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp&quot;) hospitals.head() . Use the &quot;latitude&quot; and &quot;longitude&quot; columns to visualize the hospital locations. . m_2 = folium.Map(location=[40.7, -74], zoom_start=11) # Your code here: Visualize the hospital locations for idx, row in hospitals.iterrows(): Marker([row[&#39;latitude&#39;], row[&#39;longitude&#39;]], popup=row[&#39;name&#39;]).add_to(m_2) # Uncomment to see a hint #q_2.hint() # Show the map embed_map(m_2, &quot;q_2.html&quot;) . #q_2.check() # Uncomment to see our solution (your code may look different!) #q_2.solution() . 3) When was the closest hospital more than 10 kilometers away? . Create a DataFrame outside_range containing all rows from collisions with crashes that occurred more than 10 kilometers from the closest hospital. . Note that both hospitals and collisions have EPSG 2263 as the coordinate reference system, and EPSG 2263 has units of meters. . # Your code here coverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000) my_union = coverage.geometry.unary_union outside_range = collisions.loc[~collisions[&quot;geometry&quot;].apply(lambda x: my_union.contains(x))] # Check your answer #q_3.check() . #q_3.hint() #q_3.solution() . The next code cell calculates the percentage of collisions that occurred more than 10 kilometers away from the closest hospital. . percentage = round(100*len(outside_range)/len(collisions), 2) print(&quot;Percentage of collisions more than 10 km away from the closest hospital: {}%&quot;.format(percentage)) . 4) Make a recommender. . When collisions occur in distant locations, it becomes even more vital that injured persons are transported to the nearest available hospital. . With this in mind, you decide to create a recommender that: . takes the location of the crash (in EPSG 2263) as input, | finds the closest hospital (where distance calculations are done in EPSG 2263), and | returns the name of the closest hospital. | . def best_hospital(collision_location): # Your code here min = hospitals.geometry.distance(collision_location).idxmin() min_h = hospitals.iloc[min] name = min_h[&quot;name&quot;] return name # Test your function: this should suggest CALVARY HOSPITAL INC print(best_hospital(outside_range.geometry.iloc[0])) # Check your answer #q_4.check() . #q_4.hint() #q_4.solution() . 5) Which hospital is under the highest demand? . Considering only collisions in the outside_range DataFrame, which hospital is most recommended? . Your answer should be a Python string that exactly matches the name of the hospital returned by the function you created in 4). . count = outside_range.geometry.apply(best_hospital).value_counts() highest_demand = count.idxmax() highest_demand # Check your answer #q_5.check() . #q_5.hint() #q_5.solution() . 6) Where should the city construct new hospitals? . Run the next code cell (without changes) to visualize hospital locations, in addition to collisions that occurred more than 10 kilometers away from the closest hospital. . m_6 = folium.Map(location=[40.7, -74], zoom_start=11) coverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000) folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m_6) HeatMap(data=outside_range[[&#39;LATITUDE&#39;, &#39;LONGITUDE&#39;]], radius=9).add_to(m_6) folium.LatLngPopup().add_to(m_6) embed_map(m_6, &#39;m_6.html&#39;) . Click anywhere on the map to see a pop-up with the corresponding location in latitude and longitude. . The city of New York reaches out to you for help with deciding locations for two brand new hospitals. They specifically want your help with identifying locations to bring the calculated percentage from step 3) to less than ten percent. Using the map (and without worrying about zoning laws or what potential buildings would have to be removed in order to build the hospitals), can you identify two locations that would help the city accomplish this goal? . Put the proposed latitude and longitude for hospital 1 in lat_1 and long_1, respectively. (Likewise for hospital 2.) . Then, run the rest of the cell as-is to see the effect of the new hospitals. Your answer will be marked correct, if the two new hospitals bring the percentage to less than ten percent. . lat_1 = 40.6797 long_1 = -73.7580 # Your answer here: proposed location of hospital 2 lat_2 = 40.6694 long_2 = -73.8705 # Do not modify the code below this line try: new_df = pd.DataFrame( {&#39;Latitude&#39;: [lat_1, lat_2], &#39;Longitude&#39;: [long_1, long_2]}) new_gdf = gpd.GeoDataFrame(new_df, geometry=gpd.points_from_xy(new_df.Longitude, new_df.Latitude)) new_gdf.crs = {&#39;init&#39; :&#39;epsg:4326&#39;} new_gdf = new_gdf.to_crs(epsg=2263) # get new percentage new_coverage = gpd.GeoDataFrame(geometry=new_gdf.geometry).buffer(10000) new_my_union = new_coverage.geometry.unary_union new_outside_range = outside_range.loc[~outside_range[&quot;geometry&quot;].apply(lambda x: new_my_union.contains(x))] new_percentage = round(100*len(new_outside_range)/len(collisions), 2) print(&quot;(NEW) Percentage of collisions more than 10 km away from the closest hospital: {}%&quot;.format(new_percentage)) # Did you help the city to meet its goal? q_6.check() # make the map m = folium.Map(location=[40.7, -74], zoom_start=11) folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m) folium.GeoJson(new_coverage.geometry.to_crs(epsg=4326)).add_to(m) for idx, row in new_gdf.iterrows(): Marker([row[&#39;Latitude&#39;], row[&#39;Longitude&#39;]]).add_to(m) HeatMap(data=new_outside_range[[&#39;LATITUDE&#39;, &#39;LONGITUDE&#39;]], radius=9).add_to(m) folium.LatLngPopup().add_to(m) display(embed_map(m, &#39;q_6.html&#39;)) except: #q_6.hint() . #q_6.solution() . Congratulations! . You have just completed the Geospatial Analysis micro-course! Great job! . . Have questions or comments? Visit the course discussion forum to chat with other learners. .",
            "url": "https://chanseongparkk.github.io/cspBlog/jupyter/python/2022/05/26/exercise5-proximity-analysis.html",
            "relUrl": "/jupyter/python/2022/05/26/exercise5-proximity-analysis.html",
            "date": " • May 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "geopandas exercise4",
            "content": "This notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link. . . Introduction . You are a Starbucks big data analyst (that’s a real job!) looking to find the next store into a Starbucks Reserve Roastery. These roasteries are much larger than a typical Starbucks store and have several additional features, including various food and wine options, along with upscale lounge areas. You&#39;ll investigate the demographics of various counties in the state of California, to determine potentially suitable locations. . Before you get started, run the code cell below to set everything up. . import math import pandas as pd import geopandas as gpd #from geopy.geocoders import Nominatim # What you&#39;d normally run from learntools.geospatial.tools import Nominatim # Just for this exercise import folium from folium import Marker from folium.plugins import MarkerCluster from learntools.core import binder binder.bind(globals()) from learntools.geospatial.ex4 import * . You&#39;ll use the embed_map() function from the previous exercise to visualize your maps. . def embed_map(m, file_name): from IPython.display import IFrame m.save(file_name) return IFrame(file_name, width=&#39;100%&#39;, height=&#39;500px&#39;) . Exercises . 1) Geocode the missing locations. . Run the next code cell to create a DataFrame starbucks containing Starbucks locations in the state of California. . starbucks = pd.read_csv(&quot;../input/geospatial-learn-course-data/starbucks_locations.csv&quot;) starbucks.head() . Most of the stores have known (latitude, longitude) locations. But, all of the locations in the city of Berkeley are missing. . print(starbucks.isnull().sum()) # View rows with missing locations rows_with_missing = starbucks[starbucks[&quot;City&quot;]==&quot;Berkeley&quot;] rows_with_missing . Use the code cell below to fill in these values with the Nominatim geocoder. . Note that in the tutorial, we used Nominatim() (from geopy.geocoders) to geocode values, and this is what you can use in your own projects outside of this course. . In this exercise, you will use a slightly different function Nominatim() (from learntools.geospatial.tools). This function was imported at the top of the notebook and works identically to the function from GeoPandas. . So, in other words, as long as: . you don&#39;t change the import statements at the top of the notebook, and | you call the geocoding function as geocode() in the code cell below, | . your code will work as intended! . geolocator = Nominatim(user_agent=&quot;kaggle_learn&quot;) # Your code here def my_geocoder(row): try: point = geolocator.geocode(row).point return pd.Series({&#39;Latitude&#39;: point.latitude, &#39;Longitude&#39;: point.longitude}) except: return None # 여기서부턴 잘 모르겠어서 솔루션 참고했습니다. berkeley_locations = rows_with_missing.apply(lambda x: my_geocoder(x[&#39;Address&#39;]), axis=1) starbucks.update(berkeley_locations) # Check your answer q_1.check() . #q_1.solution() . 2) View Berkeley locations. . Let&#39;s take a look at the locations you just found. Visualize the (latitude, longitude) locations in Berkeley in the OpenStreetMap style. . m_2 = folium.Map(location=[37.88,-122.26], zoom_start=13) # Your code here: Add a marker for each Berkeley location for idx, row in starbucks.iterrows(): Marker([row[&#39;Latitude&#39;], row[&#39;Longitude&#39;]], popup=row[&#39;Address&#39;]).add_to(m_2) # Uncomment to see a hint #q_2.a.hint() # Show the map embed_map(m_2, &#39;q_2.html&#39;) . q_2.a.check() # Uncomment to see our solution (your code may look different!) #q_2.a.solution() . Considering only the five locations in Berkeley, how many of the (latitude, longitude) locations seem potentially correct (are located in the correct city)? . q_2.b.solution() . 3) Consolidate your data. . Run the code below to load a GeoDataFrame CA_counties containing the name, area (in square kilometers), and a unique id (in the &quot;GEOID&quot; column) for each county in the state of California. The &quot;geometry&quot; column contains a polygon with county boundaries. . CA_counties = gpd.read_file(&quot;../input/geospatial-learn-course-data/CA_county_boundaries/CA_county_boundaries/CA_county_boundaries.shp&quot;) CA_counties.head() . Next, we create three DataFrames: . CA_pop contains an estimate of the population of each county. | CA_high_earners contains the number of households with an income of at least $150,000 per year. | CA_median_age contains the median age for each county. | . CA_pop = pd.read_csv(&quot;../input/geospatial-learn-course-data/CA_county_population.csv&quot;, index_col=&quot;GEOID&quot;) CA_high_earners = pd.read_csv(&quot;../input/geospatial-learn-course-data/CA_county_high_earners.csv&quot;, index_col=&quot;GEOID&quot;) CA_median_age = pd.read_csv(&quot;../input/geospatial-learn-course-data/CA_county_median_age.csv&quot;, index_col=&quot;GEOID&quot;) . Use the next code cell to join the CA_counties GeoDataFrame with CA_pop, CA_high_earners, and CA_median_age. . Name the resultant GeoDataFrame CA_stats, and make sure it has 8 columns: &quot;GEOID&quot;, &quot;name&quot;, &quot;area_sqkm&quot;, &quot;geometry&quot;, &quot;population&quot;, &quot;high_earners&quot;, and &quot;median_age&quot;. Also, make sure the CRS is set to {&#39;init&#39;: &#39;epsg:4326&#39;}. . print(CA_counties.head(2)) print(CA_pop.head(2)) print(CA_high_earners.head(2)) print(CA_median_age.head(2)) . CA_stats = CA_counties.merge(CA_pop, on = &quot;GEOID&quot;).merge(CA_high_earners, on = &quot;GEOID&quot;).merge( CA_median_age,on = &quot;GEOID&quot;) CA_stats.crs = {&#39;init&#39;: &#39;epsg:4326&#39;} # Check your answer q_3.check() . #q_3.hint() #q_3.solution() . Now that we have all of the data in one place, it&#39;s much easier to calculate statistics that use a combination of columns. Run the next code cell to create a &quot;density&quot; column with the population density. . CA_stats[&quot;density&quot;] = CA_stats[&quot;population&quot;] / CA_stats[&quot;area_sqkm&quot;] . 4) Which counties look promising? . Collapsing all of the information into a single GeoDataFrame also makes it much easier to select counties that meet specific criteria. . Use the next code cell to create a GeoDataFrame sel_counties that contains a subset of the rows (and all of the columns) from the CA_stats GeoDataFrame. In particular, you should select counties where: . there are at least 100,000 households making $150,000 per year, | the median age is less than 38.5, and | the density of inhabitants is at least 285 (per square kilometer). | . Additionally, selected counties should satisfy at least one of the following criteria: . there are at least 500,000 households making $150,000 per year, | the median age is less than 35.5, or | the density of inhabitants is at least 1400 (per square kilometer). | . sel_counties = CA_stats[((CA_stats.high_earners &gt; 100000) &amp; (CA_stats.median_age &lt; 38.5) &amp; (CA_stats.density &gt; 285) &amp; ((CA_stats.median_age &lt; 35.5) | (CA_stats.density &gt; 1400) | (CA_stats.high_earners &gt; 500000)))] # Check your answer q_4.check() . #q_4.hint() #q_4.solution() . 5) How many stores did you identify? . When looking for the next Starbucks Reserve Roastery location, you&#39;d like to consider all of the stores within the counties that you selected. So, how many stores are within the selected counties? . To prepare to answer this question, run the next code cell to create a GeoDataFrame starbucks_gdf with all of the starbucks locations. . starbucks_gdf = gpd.GeoDataFrame(starbucks, geometry=gpd.points_from_xy(starbucks.Longitude, starbucks.Latitude)) starbucks_gdf.crs = {&#39;init&#39;: &#39;epsg:4326&#39;} . So, how many stores are in the counties you selected? . a = gpd.sjoin(starbucks_gdf, sel_counties) num_stores = len(a) # Check your answer q_5.check() . #q_5.hint() #q_5.solution() . 6) Visualize the store locations. . Create a map that shows the locations of the stores that you identified in the previous question. . m_6 = folium.Map(location=[37,-120], zoom_start=6) # Your code here: show selected store locations mc = MarkerCluster() for idx, row in a.iterrows(): if not math.isnan(row[&#39;Longitude&#39;]) and not math.isnan(row[&#39;Latitude&#39;]): mc.add_child(Marker([row[&#39;Latitude&#39;], row[&#39;Longitude&#39;]])) m_6.add_child(mc) # Uncomment to see a hint #q_6.hint() # Show the map embed_map(m_6, &#39;q_6.html&#39;) . q_6.check() # Uncomment to see our solution (your code may look different!) #q_6.solution() . Keep going . Learn about how proximity analysis can help you to understand the relationships between points on a map. . . Have questions or comments? Visit the course discussion forum to chat with other learners. .",
            "url": "https://chanseongparkk.github.io/cspBlog/colaboratory/python/2022/05/22/exercise4-manipulating-geospatial-data.html",
            "relUrl": "/colaboratory/python/2022/05/22/exercise4-manipulating-geospatial-data.html",
            "date": " • May 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "geopandas exercise3",
            "content": "This notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link. . . Introduction . You are an urban safety planner in Japan, and you are analyzing which areas of Japan need extra earthquake reinforcement. Which areas are both high in population density and prone to earthquakes? . Before you get started, run the code cell below to set everything up. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . cd drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . /content/drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . !pip install geopandas !pip install folium . Collecting geopandas Downloading geopandas-0.10.2-py2.py3-none-any.whl (1.0 MB) |████████████████████████████████| 1.0 MB 5.2 MB/s Requirement already satisfied: shapely&gt;=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.2) Requirement already satisfied: pandas&gt;=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5) Collecting fiona&gt;=1.8 Downloading Fiona-1.8.21-cp37-cp37m-manylinux2014_x86_64.whl (16.7 MB) |████████████████████████████████| 16.7 MB 31.4 MB/s Collecting pyproj&gt;=2.2.0 Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB) |████████████████████████████████| 6.3 MB 26.6 MB/s Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (57.4.0) Collecting cligj&gt;=0.5 Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB) Requirement already satisfied: click&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (7.1.2) Collecting click-plugins&gt;=1.0 Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB) Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (2021.10.8) Requirement already satisfied: attrs&gt;=17 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (21.4.0) Collecting munch Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB) Requirement already satisfied: six&gt;=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (1.15.0) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2022.1) Requirement already satisfied: numpy&gt;=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (1.21.6) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2.8.2) Installing collected packages: munch, cligj, click-plugins, pyproj, fiona, geopandas Successfully installed click-plugins-1.1.1 cligj-0.7.2 fiona-1.8.21 geopandas-0.10.2 munch-2.5.0 pyproj-3.2.1 Requirement already satisfied: folium in /usr/local/lib/python3.7/dist-packages (0.8.3) Requirement already satisfied: branca&gt;=0.3.0 in /usr/local/lib/python3.7/dist-packages (from folium) (0.5.0) Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from folium) (1.15.0) Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from folium) (2.11.3) Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from folium) (1.21.6) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from folium) (2.23.0) Requirement already satisfied: MarkupSafe&gt;=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2-&gt;folium) (2.0.1) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;folium) (2021.10.8) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;folium) (2.10) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;folium) (1.24.3) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;folium) (3.0.4) . import pandas as pd import geopandas as gpd import folium from folium import Choropleth from folium.plugins import HeatMap . We define a function embed_map() for displaying interactive maps. It accepts two arguments: the variable containing the map, and the name of the HTML file where the map will be saved. . This function ensures that the maps are visible in all web browsers. . def embed_map(m, file_name): from IPython.display import IFrame m.save(file_name) return IFrame(file_name, width=&#39;100%&#39;, height=&#39;500px&#39;) . Exercises . 1) Do earthquakes coincide with plate boundaries? . Run the code cell below to create a DataFrame plate_boundaries that shows global plate boundaries. The &quot;coordinates&quot; column is a list of (latitude, longitude) locations along the boundaries. . plate_boundaries = gpd.read_file(&quot;Plate_Boundaries/Plate_Boundaries/Plate_Boundaries.shp&quot;) plate_boundaries[&#39;coordinates&#39;] = plate_boundaries.apply(lambda x: [(b,a) for (a,b) in list(x.geometry.coords)], axis=&#39;columns&#39;) plate_boundaries.drop(&#39;geometry&#39;, axis=1, inplace=True) plate_boundaries.head() . HAZ_PLATES HAZ_PLAT_1 HAZ_PLAT_2 Shape_Leng coordinates . 0 TRENCH | SERAM TROUGH (ACTIVE) | 6722 | 5.843467 | [(-5.444200361999947, 133.6808931800001), (-5.... | . 1 TRENCH | WETAR THRUST | 6722 | 1.829013 | [(-7.760600482999962, 125.47879802900002), (-7... | . 2 TRENCH | TRENCH WEST OF LUZON (MANILA TRENCH) NORTHERN ... | 6621 | 6.743604 | [(19.817899819000047, 120.09999798800004), (19... | . 3 TRENCH | BONIN TRENCH | 9821 | 8.329381 | [(26.175899215000072, 143.20620700100005), (26... | . 4 TRENCH | NEW GUINEA TRENCH | 8001 | 11.998145 | [(0.41880004000006466, 132.8273013480001), (0.... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Next, run the code cell below without changes to load the historical earthquake data into a DataFrame earthquakes. . earthquakes = pd.read_csv(&quot;earthquakes1970-2014.csv&quot;, parse_dates=[&quot;DateTime&quot;]) earthquakes.head() . DateTime Latitude Longitude Depth Magnitude MagType NbStations Gap Distance RMS Source EventID . 0 1970-01-04 17:00:40.200 | 24.139 | 102.503 | 31.0 | 7.5 | Ms | 90.0 | NaN | NaN | 0.0 | NEI | 1.970010e+09 | . 1 1970-01-06 05:35:51.800 | -9.628 | 151.458 | 8.0 | 6.2 | Ms | 85.0 | NaN | NaN | 0.0 | NEI | 1.970011e+09 | . 2 1970-01-08 17:12:39.100 | -34.741 | 178.568 | 179.0 | 6.1 | Mb | 59.0 | NaN | NaN | 0.0 | NEI | 1.970011e+09 | . 3 1970-01-10 12:07:08.600 | 6.825 | 126.737 | 73.0 | 6.1 | Mb | 91.0 | NaN | NaN | 0.0 | NEI | 1.970011e+09 | . 4 1970-01-16 08:05:39.000 | 60.280 | -152.660 | 85.0 | 6.0 | ML | 0.0 | NaN | NaN | NaN | AK | NaN | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The code cell below visualizes the plate boundaries on a map. Use all of the earthquake data to add a heatmap to the same map, to determine whether earthquakes coincide with plate boundaries. . m_1 = folium.Map(location=[35,136], tiles=&#39;cartodbpositron&#39;, zoom_start=5) for i in range(len(plate_boundaries)): folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color=&#39;black&#39;).add_to(m_1) # Your code here: Add a heatmap to the map HeatMap(data = earthquakes[[&#39;Latitude&#39;, &#39;Longitude&#39;]], radius = 10).add_to(m_1) # Uncomment to see a hint #q_1.a.hint() # Show the map embed_map(m_1, &#39;q_1.html&#39;) . RecursionError Traceback (most recent call last) &lt;ipython-input-8-baee5a46f619&gt; in &lt;module&gt;() 5 6 # Your code here: Add a heatmap to the map -&gt; 7 HeatMap(data = earthquakes[[&#39;Latitude&#39;, &#39;Longitude&#39;]], radius = 10).add_to(m_1) 8 9 # Uncomment to see a hint /usr/local/lib/python3.7/dist-packages/folium/plugins/heat_map.py in __init__(self, data, name, min_opacity, max_zoom, max_val, radius, blur, gradient, overlay, control, show) 65 super(HeatMap, self).__init__(name=name, overlay=overlay, 66 control=control, show=show) &gt; 67 data = _iter_tolist(data) 68 if _isnan(data): 69 raise ValueError(&#39;data cannot contain NaNs, &#39; /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x /usr/local/lib/python3.7/dist-packages/folium/utilities.py in _iter_tolist(x) 61 &#34;&#34;&#34;Transforms recursively a list of iterables into a list of list.&#34;&#34;&#34; 62 if hasattr(x, &#39;__iter__&#39;): &gt; 63 return list(map(_iter_tolist, x)) 64 else: 65 return x RecursionError: maximum recursion depth exceeded . #q_1.a.check() # Uncomment to see our solution (your code may look different!) #q_1.a.solution() . So, given the map above, do earthquakes coincide with plate boundaries? . #q_1.b.solution() . Yes, earthquakes coincide with plate boundaries. . 2) Is there a relationship between earthquake depth and proximity to a plate boundary in Japan? . You recently read that the depth of earthquakes tells us important information about the structure of the earth. You&#39;re interested to see if there are any intereresting global patterns, and you&#39;d also like to understand how depth varies in Japan. . earthquakes . earthquakes . DateTime Latitude Longitude Depth Magnitude MagType NbStations Gap Distance RMS Source EventID . 0 1970-01-04 17:00:40.200 | 24.1390 | 102.5030 | 31.00 | 7.5 | Ms | 90.0 | NaN | NaN | 0.00 | NEI | 1.970010e+09 | . 1 1970-01-06 05:35:51.800 | -9.6280 | 151.4580 | 8.00 | 6.2 | Ms | 85.0 | NaN | NaN | 0.00 | NEI | 1.970011e+09 | . 2 1970-01-08 17:12:39.100 | -34.7410 | 178.5680 | 179.00 | 6.1 | Mb | 59.0 | NaN | NaN | 0.00 | NEI | 1.970011e+09 | . 3 1970-01-10 12:07:08.600 | 6.8250 | 126.7370 | 73.00 | 6.1 | Mb | 91.0 | NaN | NaN | 0.00 | NEI | 1.970011e+09 | . 4 1970-01-16 08:05:39.000 | 60.2800 | -152.6600 | 85.00 | 6.0 | ML | 0.0 | NaN | NaN | NaN | AK | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 5299 2013-12-01 06:29:57.800 | 2.0440 | 96.8261 | 20.00 | 6.0 | Mw | NaN | 27.0 | 1.0 | 0.89 | us | 2.013120e+09 | . 5300 2013-12-08 17:24:54.200 | 44.4438 | 149.1667 | 28.00 | 6.1 | Mw | NaN | 26.0 | 5.0 | 0.99 | us | 2.013121e+09 | . 5301 2013-12-17 23:38:08.100 | 20.7635 | 146.7599 | 16.06 | 6.2 | Mw | NaN | 14.0 | 4.0 | 0.74 | us | 2.013122e+09 | . 5302 2014-01-01 16:03:28.890 | -13.8779 | 167.2434 | 187.00 | 6.5 | Mw | NaN | 14.0 | 4.0 | 0.67 | us | 2.014010e+09 | . 5303 2014-01-13 04:01:04.690 | 19.0014 | -66.8478 | 28.00 | 6.4 | Mw | NaN | 21.0 | 1.0 | 1.42 | us | 2.014011e+09 | . 5304 rows × 12 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; earthquakes[&quot;Depth&quot;].describe() . count 5304.000000 mean 74.268037 std 129.092258 min 0.000000 25% 14.500000 50% 33.000000 75% 52.300000 max 688.000000 Name: Depth, dtype: float64 . from folium import Circle # Create a base map with plate boundaries m_2 = folium.Map(location=[35,136], tiles=&#39;cartodbpositron&#39;, zoom_start=5) for i in range(len(plate_boundaries)): folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color=&#39;black&#39;).add_to(m_2) # Your code here: Add a map to visualize earthquake depth def color_producer(val): if val &lt;= 15: return &#39;forestgreen&#39; elif val &lt;= 53: return &#39;orange&#39; else: return &#39;darkred&#39; for i in range(0,len(earthquakes)): Circle( location = [earthquakes.iloc[i,1], earthquakes.iloc[i,2]], radius = 20, color = color_producer(earthquakes.iloc[i,3])).add_to(m_2) # Uncomment to see a hint #q_2.a.hint() # View the map embed_map(m_2, &#39;q_2.html&#39;) . #q_2.a.check() # Uncomment to see our solution (your code may look different!) #q_2.a.solution() . Can you detect a relationship between proximity to a plate boundary and earthquake depth? Does this pattern hold globally? In Japan? . #q_2.b.solution() . In the northern half of Japan, it does appear that earthquakes closer to plate boundaries tend to be shallower (and earthquakes farther from plate boundaries are deeper). This pattern is repeated in other locations, such as the western coast of South America. But, it does not hold everywhere (for instance, in China, Mongolia, and Russia). . 3) Which prefectures have high population density? . Run the next code cell (without changes) to create a GeoDataFrame prefectures that contains the geographical boundaries of Japanese prefectures. . prefectures = gpd.read_file(&quot;japan-prefecture-boundaries/japan-prefecture-boundaries/japan-prefecture-boundaries.shp&quot;) prefectures.set_index(&#39;prefecture&#39;, inplace=True) prefectures.head() . geometry . prefecture . Aichi MULTIPOLYGON (((137.09523 34.65330, 137.09546 ... | . Akita MULTIPOLYGON (((139.55725 39.20330, 139.55765 ... | . Aomori MULTIPOLYGON (((141.39860 40.92472, 141.39806 ... | . Chiba MULTIPOLYGON (((139.82488 34.98967, 139.82434 ... | . Ehime MULTIPOLYGON (((132.55859 32.91224, 132.55904 ... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; The next code cell creates a DataFrame stats containing the population, area (in square kilometers), and population density (per square kilometer) for each Japanese prefecture. Run the code cell without changes. . population = pd.read_csv(&quot;japan-prefecture-population.csv&quot;) population.set_index(&#39;prefecture&#39;, inplace=True) # Calculate area (in square kilometers) of each prefecture area_sqkm = pd.Series(prefectures.geometry.to_crs(epsg=32654).area / 10**6, name=&#39;area_sqkm&#39;) stats = population.join(area_sqkm) # Add density (per square kilometer) of each prefecture stats[&#39;density&#39;] = stats[&quot;population&quot;] / stats[&quot;area_sqkm&quot;] stats.head() . population area_sqkm density . prefecture . Tokyo 12868000 | 1800.614782 | 7146.448049 | . Kanagawa 8943000 | 2383.038975 | 3752.771186 | . Osaka 8801000 | 1923.151529 | 4576.342460 | . Aichi 7418000 | 5164.400005 | 1436.372085 | . Saitama 7130000 | 3794.036890 | 1879.264806 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Use the next code cell to create a choropleth map to visualize population density. . m_3 = folium.Map(location=[35,136], tiles=&#39;cartodbpositron&#39;, zoom_start=5) # Your code here: create a choropleth map to visualize population density Choropleth(geo_data = prefectures.__geo_interface__, data = stats[&quot;density&quot;], key_on = &quot;feature.id&quot;, fill_color = &#39;YlGnBu&#39;, legend_name = &quot;japan pop density&quot; ).add_to(m_3) # Uncomment to see a hint #q_3.a.hint() # View the map embed_map(m_3, &#39;q_3.html&#39;) . #q_3.a.check() # Uncomment to see our solution (your code may look different!) #q_3.a.solution() . Which three prefectures have relatively higher density than the others? Are they spread throughout the country, or all located in roughly the same geographical region? (If you&#39;re unfamiliar with Japanese geography, you might find this map useful to answer the questions.) . #q_3.b.solution() . Tokyo, Kanagawa, and Osaka have the highest population density. All of these prefectures are located in central Japan, and Tokyo and Kanagawa are adjacent. . 4) Which high-density prefecture is prone to high-magnitude earthquakes? . Create a map to suggest one prefecture that might benefit from earthquake reinforcement. Your map should visualize both density and earthquake magnitude. . m_4 = folium.Map(location=[35,136], tiles=&#39;cartodbpositron&#39;, zoom_start=5) # Your code here: create a map(이건 이해가 안가서 솔루션 보고 해결하였습니다.) # Create a map def color_producer(magnitude): if magnitude &gt; 6.5: return &#39;red&#39; else: return &#39;green&#39; Choropleth( geo_data=prefectures[&#39;geometry&#39;].__geo_interface__, data=stats[&#39;density&#39;], key_on=&quot;feature.id&quot;, fill_color=&#39;BuPu&#39;, legend_name=&#39;Population density (per square kilometer)&#39;).add_to(m_4) for i in range(0,len(earthquakes)): folium.Circle( location=[earthquakes.iloc[i][&#39;Latitude&#39;], earthquakes.iloc[i][&#39;Longitude&#39;]], popup=(&quot;{} ({})&quot;).format( earthquakes.iloc[i][&#39;Magnitude&#39;], earthquakes.iloc[i][&#39;DateTime&#39;].year), radius=earthquakes.iloc[i][&#39;Magnitude&#39;]**5.5, color=color_producer(earthquakes.iloc[i][&#39;Magnitude&#39;])).add_to(m_4) # Uncomment to see a hint #q_4.a.hint() # View the map embed_map(m_4, &#39;q_4.html&#39;) . #q_4.a.check() # Uncomment to see our solution (your code may look different!) #q_4.a.solution() . Which prefecture do you recommend for extra earthquake reinforcement? . #q_4.b.solution() . While there&#39;s no clear, single answer to this question, there are a few reasonable options. Tokyo is by far the most densely populated prefecture and has also experienced a number of earthquakes. Osaka is relatively less densely populated, but experienced an earthquake that was relatively stronger than those near Tokyo. And, the long coast of Kanagawa (in addition to its high density and the historical proximity of strong earthquakes) might lead us to worry about the added potential tsunami risk. . Keep going . Learn how to convert names of places to geographic coordinates with geocoding. You&#39;ll also explore special ways to join information from multiple GeoDataFrames. . . Have questions or comments? Visit the course discussion forum to chat with other learners. .",
            "url": "https://chanseongparkk.github.io/cspBlog/colaboratory/python/2022/05/21/exercise3-interactive-maps.html",
            "relUrl": "/colaboratory/python/2022/05/21/exercise3-interactive-maps.html",
            "date": " • May 21, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "geopandas exercise2",
            "content": "This notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link. . . Introduction . You are a bird conservation expert and want to understand migration patterns of purple martins. In your research, you discover that these birds typically spend the summer breeding season in the eastern United States, and then migrate to South America for the winter. But since this bird is under threat of endangerment, you&#39;d like to take a closer look at the locations that these birds are more likely to visit. . There are several protected areas in South America, which operate under special regulations to ensure that species that migrate (or live) there have the best opportunity to thrive. You&#39;d like to know if purple martins tend to visit these areas. To answer this question, you&#39;ll use some recently collected data that tracks the year-round location of eleven different birds. . Before you get started, run the code cell below to set everything up. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . cd drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . /content/drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . !pip install geopandas . Collecting geopandas Downloading geopandas-0.10.2-py2.py3-none-any.whl (1.0 MB) |████████████████████████████████| 1.0 MB 8.9 MB/s Requirement already satisfied: shapely&gt;=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.2) Collecting fiona&gt;=1.8 Downloading Fiona-1.8.21-cp37-cp37m-manylinux2014_x86_64.whl (16.7 MB) |████████████████████████████████| 16.7 MB 395 kB/s Requirement already satisfied: pandas&gt;=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5) Collecting pyproj&gt;=2.2.0 Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB) |████████████████████████████████| 6.3 MB 54.1 MB/s Requirement already satisfied: click&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (7.1.2) Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (2021.10.8) Collecting munch Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB) Collecting cligj&gt;=0.5 Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB) Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (57.4.0) Requirement already satisfied: attrs&gt;=17 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (21.4.0) Collecting click-plugins&gt;=1.0 Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB) Requirement already satisfied: six&gt;=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (1.15.0) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2.8.2) Requirement already satisfied: numpy&gt;=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (1.21.6) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2022.1) Installing collected packages: munch, cligj, click-plugins, pyproj, fiona, geopandas Successfully installed click-plugins-1.1.1 cligj-0.7.2 fiona-1.8.21 geopandas-0.10.2 munch-2.5.0 pyproj-3.2.1 . import pandas as pd import geopandas as gpd from shapely.geometry import LineString . Exercises . 1) Load the data. . Run the next code cell (without changes) to load the GPS data into a pandas DataFrame birds_df. . birds_df = pd.read_csv(&quot;purple_martin.csv&quot;, parse_dates=[&#39;timestamp&#39;]) print(&quot;There are {} different birds in the dataset.&quot;.format(birds_df[&quot;tag-local-identifier&quot;].nunique())) birds_df.head() . There are 11 different birds in the dataset. . timestamp location-long location-lat tag-local-identifier . 0 2014-08-15 05:56:00 | -88.146014 | 17.513049 | 30448 | . 1 2014-09-01 05:59:00 | -85.243501 | 13.095782 | 30448 | . 2 2014-10-30 23:58:00 | -62.906089 | -7.852436 | 30448 | . 3 2014-11-15 04:59:00 | -61.776826 | -11.723898 | 30448 | . 4 2014-11-30 09:59:00 | -61.241538 | -11.612237 | 30448 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; There are 11 birds in the dataset, where each bird is identified by a unique value in the &quot;tag-local-identifier&quot; column. Each bird has several measurements, collected at different times of the year. . Use the next code cell to create a GeoDataFrame birds. . birds should have all of the columns from birds_df, along with a &quot;geometry&quot; column that contains Point objects with (longitude, latitude) locations. | Set the CRS of birds to {&#39;init&#39;: &#39;epsg:4326&#39;}. | . birds_df . birds = gpd.GeoDataFrame(birds_df, geometry=gpd.points_from_xy(birds_df.iloc[:,1], birds_df.iloc[:,2])) # Your code here: Set the CRS to {&#39;init&#39;: &#39;epsg:4326&#39;} birds.crs = {&#39;init&#39;: &#39;epsg:4326&#39;} # Check your answer #q_1.check() . /usr/local/lib/python3.7/dist-packages/pyproj/crs/crs.py:131: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6 in_crs_string = _prepare_from_proj_string(in_crs_string) . #q_1.hint() #q_1.solution() . 2) Plot the data. . Next, we load in the &#39;naturalearth_lowres&#39; dataset from GeoPandas, and set americas to a GeoDataFrame containing the boundaries of all countries in the Americas (both North and South America). Run the next code cell without changes. . world = gpd.read_file(gpd.datasets.get_path(&#39;naturalearth_lowres&#39;)) americas = world.loc[world[&#39;continent&#39;].isin([&#39;North America&#39;, &#39;South America&#39;])] americas.head() . pop_est continent name iso_a3 gdp_md_est geometry . 3 35623680 | North America | Canada | CAN | 1674000.0 | MULTIPOLYGON (((-122.84000 49.00000, -122.9742... | . 4 326625791 | North America | United States of America | USA | 18560000.0 | MULTIPOLYGON (((-122.84000 49.00000, -120.0000... | . 9 44293293 | South America | Argentina | ARG | 879400.0 | MULTIPOLYGON (((-68.63401 -52.63637, -68.25000... | . 10 17789267 | South America | Chile | CHL | 436100.0 | MULTIPOLYGON (((-68.63401 -52.63637, -68.63335... | . 16 10646714 | North America | Haiti | HTI | 19340.0 | POLYGON ((-71.71236 19.71446, -71.62487 19.169... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Use the next code cell to create a single plot that shows both: (1) the country boundaries in the americas GeoDataFrame, and (2) all of the points in the birds_gdf GeoDataFrame. . Don&#39;t worry about any special styling here; just create a preliminary plot, as a quick sanity check that all of the data was loaded properly. In particular, you don&#39;t have to worry about color-coding the points to differentiate between birds, and you don&#39;t have to differentiate starting points from ending points. We&#39;ll do that in the next part of the exercise. . ax = americas.plot(figsize=(10,10), color=&#39;whitesmoke&#39;, linestyle=&#39;:&#39;, edgecolor=&#39;black&#39;) birds.plot(markersize=5, ax=ax) # Uncomment to see a hint #q_2.hint() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa2c7603410&gt; . #q_2.check() # Uncomment to see our solution (your code may look different!) ##q_2.solution() . 3) Where does each bird start and end its journey? (Part 1) . Now, we&#39;re ready to look more closely at each bird&#39;s path. Run the next code cell to create two GeoDataFrames: . path_gdf contains LineString objects that show the path of each bird. It uses the LineString() method to create a LineString object from a list of Point objects. | start_gdf contains the starting points for each bird. | . path_df = birds.groupby(&quot;tag-local-identifier&quot;)[&#39;geometry&#39;].apply(list).apply(lambda x: LineString(x)).reset_index() path_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry) path_gdf.crs = {&#39;init&#39; :&#39;epsg:4326&#39;} # GeoDataFrame showing starting point for each bird start_df = birds.groupby(&quot;tag-local-identifier&quot;)[&#39;geometry&#39;].apply(list).apply(lambda x: x[0]).reset_index() start_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry) start_gdf.crs = {&#39;init&#39; :&#39;epsg:4326&#39;} # Show first five rows of GeoDataFrame start_gdf.head() . /usr/local/lib/python3.7/dist-packages/pyproj/crs/crs.py:131: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6 in_crs_string = _prepare_from_proj_string(in_crs_string) /usr/local/lib/python3.7/dist-packages/pyproj/crs/crs.py:131: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6 in_crs_string = _prepare_from_proj_string(in_crs_string) . tag-local-identifier geometry . 0 30048 | POINT (-90.12992 20.73242) | . 1 30054 | POINT (-93.60861 46.50563) | . 2 30198 | POINT (-80.31036 25.92545) | . 3 30263 | POINT (-76.78146 42.99209) | . 4 30275 | POINT (-76.78213 42.99207) | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Use the next code cell to create a GeoDataFrame end_gdf containing the final location of each bird. . The format should be identical to that of start_gdf, with two columns (&quot;tag-local-identifier&quot; and &quot;geometry&quot;), where the &quot;geometry&quot; column contains Point objects. | Set the CRS of end_gdf to {&#39;init&#39;: &#39;epsg:4326&#39;}. | . birds . timestamp location-long location-lat tag-local-identifier geometry . 0 2014-08-15 05:56:00 | -88.146014 | 17.513049 | 30448 | POINT (-88.14601 17.51305) | . 1 2014-09-01 05:59:00 | -85.243501 | 13.095782 | 30448 | POINT (-85.24350 13.09578) | . 2 2014-10-30 23:58:00 | -62.906089 | -7.852436 | 30448 | POINT (-62.90609 -7.85244) | . 3 2014-11-15 04:59:00 | -61.776826 | -11.723898 | 30448 | POINT (-61.77683 -11.72390) | . 4 2014-11-30 09:59:00 | -61.241538 | -11.612237 | 30448 | POINT (-61.24154 -11.61224) | . ... ... | ... | ... | ... | ... | . 94 2014-12-30 19:59:00 | -50.709645 | -9.572583 | 30263 | POINT (-50.70964 -9.57258) | . 95 2015-01-14 23:59:00 | -49.292113 | -8.392265 | 30263 | POINT (-49.29211 -8.39226) | . 96 2015-01-30 03:59:00 | -49.081317 | -5.413250 | 30263 | POINT (-49.08132 -5.41325) | . 97 2015-02-14 07:59:00 | -49.081245 | -5.413251 | 30263 | POINT (-49.08125 -5.41325) | . 98 2015-03-01 11:59:00 | -50.192297 | -5.705042 | 30263 | POINT (-50.19230 -5.70504) | . 99 rows × 5 columns . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; end_df = birds.groupby(&quot;tag-local-identifier&quot;)[&#39;geometry&#39;].apply(list).apply(lambda x: x[-1]).reset_index() end_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry) end_gdf.crs = {&#39;init&#39; :&#39;epsg:4326&#39;} # Check your answer #q_3.check() . /usr/local/lib/python3.7/dist-packages/pyproj/crs/crs.py:131: FutureWarning: &#39;+init=&lt;authority&gt;:&lt;code&gt;&#39; syntax is deprecated. &#39;&lt;authority&gt;:&lt;code&gt;&#39; is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6 in_crs_string = _prepare_from_proj_string(in_crs_string) . #q_3.hint() #q_3.solution() . 4) Where does each bird start and end its journey? (Part 2) . Use the GeoDataFrames from the question above (path_gdf, start_gdf, and end_gdf) to visualize the paths of all birds on a single map. You may also want to use the americas GeoDataFrame. . ax = americas.plot(figsize=(10,10), color=&#39;whitesmoke&#39;, linestyle=&#39;:&#39;, edgecolor=&#39;black&#39;) path_gdf.plot(linewidth = 1, ax=ax, color = &quot;skyblue&quot;) start_gdf.plot(markersize=20, ax=ax, color = &quot;green&quot;) end_gdf.plot(markersize=30, ax=ax, color = &quot;red&quot;) # Uncomment to see a hint #q_4.hint() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa2c2ee9550&gt; . #q_4.check() # Uncomment to see our solution (your code may look different!) #q_4.solution() . 5) Where are the protected areas in South America? (Part 1) . It looks like all of the birds end up somewhere in South America. But are they going to protected areas? . In the next code cell, you&#39;ll create a GeoDataFrame protected_areas containing the locations of all of the protected areas in South America. The corresponding shapefile is located at filepath protected_filepath. . protected_filepath = &quot;SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile-polygons.shp&quot; # Your code here protected_areas = gpd.read_file(protected_filepath) # Check your answer #q_5.check() . #q_5.hint() #q_5.solution() . 6) Where are the protected areas in South America? (Part 2) . Create a plot that uses the protected_areas GeoDataFrame to show the locations of the protected areas in South America. (You&#39;ll notice that some protected areas are on land, while others are in marine waters.) . south_america = americas.loc[americas[&#39;continent&#39;]==&#39;South America&#39;] # Your code here: plot protected areas in South America ax = south_america.plot(figsize=(10,10), color=&#39;whitesmoke&#39;, linestyle=&#39;:&#39;, edgecolor=&#39;black&#39;) protected_areas.plot(ax = ax) # Uncomment to see a hint #q_6.hint() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa2c2e18850&gt; . #q_6.check() # Uncomment to see our solution (your code may look different!) #q_6.solution() . 7) What percentage of South America is protected? . You&#39;re interested in determining what percentage of South America is protected, so that you know how much of South America is suitable for the birds. . As a first step, you calculate the total area of all protected lands in South America (not including marine area). To do this, you use the &quot;REP_AREA&quot; and &quot;REP_M_AREA&quot; columns, which contain the total area and total marine area, respectively, in square kilometers. . Run the code cell below without changes. . P_Area = sum(protected_areas[&#39;REP_AREA&#39;]-protected_areas[&#39;REP_M_AREA&#39;]) print(&quot;South America has {} square kilometers of protected areas.&quot;.format(P_Area)) . South America has 5396761.9116883585 square kilometers of protected areas. . Then, to finish the calculation, you&#39;ll use the south_america GeoDataFrame. . south_america.head() . pop_est continent name iso_a3 gdp_md_est geometry . 9 44293293 | South America | Argentina | ARG | 879400.0 | MULTIPOLYGON (((-68.63401 -52.63637, -68.25000... | . 10 17789267 | South America | Chile | CHL | 436100.0 | MULTIPOLYGON (((-68.63401 -52.63637, -68.63335... | . 20 2931 | South America | Falkland Is. | FLK | 281.8 | POLYGON ((-61.20000 -51.85000, -60.00000 -51.2... | . 28 3360148 | South America | Uruguay | URY | 73250.0 | POLYGON ((-57.62513 -30.21629, -56.97603 -30.1... | . 29 207353391 | South America | Brazil | BRA | 3081000.0 | POLYGON ((-53.37366 -33.76838, -53.65054 -33.2... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Calculate the total area of South America by following these steps: . Calculate the area of each country using the area attribute of each polygon (with EPSG 3035 as the CRS), and add up the results. The calculated area will be in units of square meters. | Convert your answer to have units of square kilometeters. | . totalArea = sum(south_america.geometry.to_crs(epsg = 3035).area) / 10**6 # Check your answer #q_7.check() . #q_7.hint() #q_7.solution() . Run the code cell below to calculate the percentage of South America that is protected. . percentage_protected = P_Area/totalArea print(&#39;Approximately {}% of South America is protected.&#39;.format(round(percentage_protected*100, 2))) . Approximately 30.39% of South America is protected. . 8) Where are the birds in South America? . So, are the birds in protected areas? . Create a plot that shows for all birds, all of the locations where they were discovered in South America. Also plot the locations of all protected areas in South America. . To exclude protected areas that are purely marine areas (with no land component), you can use the &quot;MARINE&quot; column (and plot only the rows in protected_areas[protected_areas[&#39;MARINE&#39;]!=&#39;2&#39;], instead of every row in the protected_areas GeoDataFrame). . print(birds.head()) print(south_america.head()) . timestamp location-long location-lat tag-local-identifier 0 2014-08-15 05:56:00 -88.146014 17.513049 30448 1 2014-09-01 05:59:00 -85.243501 13.095782 30448 2 2014-10-30 23:58:00 -62.906089 -7.852436 30448 3 2014-11-15 04:59:00 -61.776826 -11.723898 30448 4 2014-11-30 09:59:00 -61.241538 -11.612237 30448 geometry 0 POINT (-88.14601 17.51305) 1 POINT (-85.24350 13.09578) 2 POINT (-62.90609 -7.85244) 3 POINT (-61.77683 -11.72390) 4 POINT (-61.24154 -11.61224) pop_est continent name iso_a3 gdp_md_est 9 44293293 South America Argentina ARG 879400.0 10 17789267 South America Chile CHL 436100.0 20 2931 South America Falkland Is. FLK 281.8 28 3360148 South America Uruguay URY 73250.0 29 207353391 South America Brazil BRA 3081000.0 geometry 9 MULTIPOLYGON (((-68.63401 -52.63637, -68.25000... 10 MULTIPOLYGON (((-68.63401 -52.63637, -68.63335... 20 POLYGON ((-61.20000 -51.85000, -60.00000 -51.2... 28 POLYGON ((-57.62513 -30.21629, -56.97603 -30.1... 29 POLYGON ((-53.37366 -33.76838, -53.65054 -33.2... . ax = south_america.plot(figsize=(10,10), color=&#39;whitesmoke&#39;, linestyle=&#39;:&#39;, edgecolor=&#39;black&#39;) protected_areas[protected_areas[&#39;MARINE&#39;] != &#39;2&#39;].plot(ax = ax) birds[birds.geometry.y &lt; 5].plot(ax = ax, color = &#39;red&#39;, markersize=10) #birds y가 5보다 크면 대륙을 벗어난 값이 찍혀나온다. # Uncomment to see a hint #q_8.hint() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fa2c2e08b90&gt; . #q_8.check() # Uncomment to see our solution (your code may look different!) #q_8.solution() . Keep going . Create stunning interactive maps with your geospatial data. . . Have questions or comments? Visit the course discussion forum to chat with other learners. .",
            "url": "https://chanseongparkk.github.io/cspBlog/colaboratory/python/2022/05/21/exercise2-coordinate-reference-systems.html",
            "relUrl": "/colaboratory/python/2022/05/21/exercise2-coordinate-reference-systems.html",
            "date": " • May 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "geopandas exercise1",
            "content": "This notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link. . . Introduction . Kiva.org is an online crowdfunding platform extending financial services to poor people around the world. Kiva lenders have provided over $1 billion dollars in loans to over 2 million people. . Kiva reaches some of the most remote places in the world through their global network of &quot;Field Partners&quot;. These partners are local organizations working in communities to vet borrowers, provide services, and administer loans. . In this exercise, you&#39;ll investigate Kiva loans in the Philippines. Can you identify regions that might be outside of Kiva&#39;s current network, in order to identify opportunities for recruiting new Field Partners? . To get started, run the code cell below to set up our feedback system. . from google.colab import drive drive.mount(&#39;/content/drive&#39;) . Mounted at /content/drive . cd drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . /content/drive/My Drive/22-1_데이터마이닝/수업/geopandas/archive . !pip install geopandas . Collecting geopandas Downloading geopandas-0.10.2-py2.py3-none-any.whl (1.0 MB) |████████████████████████████████| 1.0 MB 4.2 MB/s Requirement already satisfied: pandas&gt;=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5) Requirement already satisfied: shapely&gt;=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.2) Collecting fiona&gt;=1.8 Downloading Fiona-1.8.21-cp37-cp37m-manylinux2014_x86_64.whl (16.7 MB) |████████████████████████████████| 16.7 MB 420 kB/s Collecting pyproj&gt;=2.2.0 Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB) |████████████████████████████████| 6.3 MB 34.5 MB/s Requirement already satisfied: click&gt;=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (7.1.2) Collecting cligj&gt;=0.5 Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB) Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (2021.10.8) Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (57.4.0) Collecting munch Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB) Requirement already satisfied: six&gt;=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (1.15.0) Requirement already satisfied: attrs&gt;=17 in /usr/local/lib/python3.7/dist-packages (from fiona&gt;=1.8-&gt;geopandas) (21.4.0) Collecting click-plugins&gt;=1.0 Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB) Requirement already satisfied: pytz&gt;=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2022.1) Requirement already satisfied: python-dateutil&gt;=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (2.8.2) Requirement already satisfied: numpy&gt;=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas&gt;=0.25.0-&gt;geopandas) (1.21.6) Installing collected packages: munch, cligj, click-plugins, pyproj, fiona, geopandas Successfully installed click-plugins-1.1.1 cligj-0.7.2 fiona-1.8.21 geopandas-0.10.2 munch-2.5.0 pyproj-3.2.1 . import geopandas as gpd . 1) Get the data. . Use the next cell to load the shapefile located at loans_filepath to create a GeoDataFrame world_loans. . loans_filepath = &quot;kiva_loans/kiva_loans/kiva_loans.shp&quot; # Your code here: Load the data world_loans = gpd.read_file(loans_filepath) # Check your answer #q_1.check() # Uncomment to view the first five rows of the data #world_loans.head() . #q_1.hint() #q_1.solution() . 2) Plot the data. . Run the next code cell without changes to load a GeoDataFrame world containing country boundaries. . world_filepath = gpd.datasets.get_path(&#39;naturalearth_lowres&#39;) world = gpd.read_file(world_filepath) world.head() . pop_est continent name iso_a3 gdp_md_est geometry . 0 920938 | Oceania | Fiji | FJI | 8374.0 | MULTIPOLYGON (((180.00000 -16.06713, 180.00000... | . 1 53950935 | Africa | Tanzania | TZA | 150600.0 | POLYGON ((33.90371 -0.95000, 34.07262 -1.05982... | . 2 603253 | Africa | W. Sahara | ESH | 906.5 | POLYGON ((-8.66559 27.65643, -8.66512 27.58948... | . 3 35623680 | North America | Canada | CAN | 1674000.0 | MULTIPOLYGON (((-122.84000 49.00000, -122.9742... | . 4 326625791 | North America | United States of America | USA | 18560000.0 | MULTIPOLYGON (((-122.84000 49.00000, -120.0000... | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; Use the world and world_loans GeoDataFrames to visualize Kiva loan locations across the world. . ax = world.plot(figsize=(10,10), color=&#39;none&#39;, edgecolor=&#39;gainsboro&#39;, zorder=3) world_loans.plot(ax = ax, color = &quot;red&quot;,markersize=1) # Uncomment to see a hint #q_2.hint() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff0184b6290&gt; . #q_2.check() # Uncomment to see our solution (your code may look different!) #q_2.solution() . 3) Select loans based in the Philippines. . Next, you&#39;ll focus on loans that are based in the Philippines. Use the next code cell to create a GeoDataFrame PHL_loans which contains all rows from world_loans with loans that are based in the Philippines. . PHL_loans = world_loans[world_loans.country == &quot;Philippines&quot;] # Check your answer #q_3.check() . #q_3.hint() #q_3.solution() . 4) Understand loans in the Philippines. . Run the next code cell without changes to load a GeoDataFrame PHL containing boundaries for all islands in the Philippines. . gpd.io.file.fiona.drvsupport.supported_drivers[&#39;KML&#39;] = &#39;rw&#39; PHL = gpd.read_file(&quot;Philippines_AL258.kml&quot;, driver=&#39;KML&#39;) PHL.head() . Use the PHL and PHL_loans GeoDataFrames to visualize loans in the Philippines. . ax = PHL.plot(figsize=(10,10), color=&#39;none&#39;, edgecolor=&#39;gainsboro&#39;, zorder=3) PHL_loans.plot(ax = ax, markersize = 1, color = &quot;gold&quot;) # Uncomment to see a hint #q_4.a.hint() . #q_4.a.check() # Uncomment to see our solution (your code may look different!) #q_4.a.solution() . Can you identify any islands where it might be useful to recruit new Field Partners? Do any islands currently look outside of Kiva&#39;s reach? . You might find this map useful to answer the question. . #q_4.b.solution() . Keep going . Continue to learn about coordinate reference systems. . . Have questions or comments? Visit the course discussion forum to chat with other learners. .",
            "url": "https://chanseongparkk.github.io/cspBlog/colaboratory/python/2022/05/21/exercise1-your-first-map.html",
            "relUrl": "/colaboratory/python/2022/05/21/exercise1-your-first-map.html",
            "date": " • May 21, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Pandas 기본",
            "content": "도구 - 판다스(pandas) . pandas 라이브러리는 사용하기 쉬운 고성능 데이터 구조와 데이터 분석 도구를 제공합니다. 주 데이터 구조는 DataFrame입니다. 이를 인-메모리(in-memory) 2D 테이블로 생각할 수 있습니다(열 이름과 행 레이블이 있는 스프레드시트와 비슷합니다). 엑셀에 있는 많은 기능을 프로그램에서 사용할 수 있습니다. 여기에는 피봇 테이블이나 다른 열을 기반으로 열을 계산하고 그래프 출력하는 기능 등이 포함됩니다. 열 값으로 행을 그룹핑할 수도 있습니다. 또한 SQL과 비슷하게 테이블을 조인할 수 있습니다. 판다스는 시계열 데이터를 다루는데도 뛰어납니다. . 필요 라이브러리: . 넘파이(NumPy) – 넘파이에 익숙하지 않다면 지금 넘파이 튜토리얼을 둘러 보세요. | . 구글 코랩에서 실행하기 | &#49444;&#51221; . 먼저 pandas를 임포트합니다. 보통 pd로 임포트합니다: . import pandas as pd . Series &#44061;&#52404; . pandas 라이브러리는 다음과 같은 유용한 데이터 구조를 포함하고 있습니다: . Series 객체를 곧 이어서 설명하겠습니다. Series 객체는 1D 배열입니다. (열 이름과 행 레이블을 가진) 스프레드시트의 열과 비슷합니다. | DataFrame 객체는 2D 테이블입니다. (열 이름과 행 레이블을 가진) 스프레드시트와 비슷합니다. | . Series &#47564;&#46308;&#44592; . 첫 번째 Series 객체를 만들어 보죠! . s = pd.Series([2,-1,3,5]) s . 0 2 1 -1 2 3 3 5 dtype: int64 . 1D ndarray&#50752; &#48708;&#49847;&#54633;&#45768;&#45796; . Series 객체는 넘파이 ndarray와 비슷하게 동작합니다. 넘파이 함수에 매개변수로 종종 전달할 수 있습니다: . import numpy as np np.exp(s) . 0 7.389056 1 0.367879 2 20.085537 3 148.413159 dtype: float64 . Series 객체에 대한 산술 연산도 가능합니다. ndarray와 비슷하게 원소별로 적용됩니다: . s + [1000,2000,3000,4000] . 0 1002 1 1999 2 3003 3 4005 dtype: int64 . 넘파이와 비슷하게 Series에 하나의 숫자를 더하면 Series에 있는 모든 원소에 더해집니다. 이를 브로드캐스팅(broadcasting)이라고 합니다: . s + 1000 . 0 1002 1 999 2 1003 3 1005 dtype: int64 . *나 / 같은 모든 이항 연산과 심지어 조건 연산에서도 마찬가지입니다: . s &lt; 0 . 0 False 1 True 2 False 3 False dtype: bool . &#51064;&#45937;&#49828; &#47112;&#51060;&#48660; . Series 객체에 있는 각 원소는 인덱스 레이블(index label)이라 불리는 고유한 식별자를 가지고 있습니다. 기본적으로 Series에 있는 원소의 순서입니다(0에서 시작합니다). 하지만 수동으로 인덱스 레이블을 지정할 수도 있습니다: . s2 = pd.Series([68, 83, 112, 68], index=[&quot;alice&quot;, &quot;bob&quot;, &quot;charles&quot;, &quot;darwin&quot;]) s2 . alice 68 bob 83 charles 112 darwin 68 dtype: int64 . 그다음 dict처럼 Series를 사용할 수 있습니다: . s2[&quot;bob&quot;] . 83 . 일반 배열처럼 정수 인덱스를 사용하여 계속 원소에 접근할 수 있습니다: . s2[1] . 83 . 레이블이나 정수를 사용해 접근할 때 명확하게 하기 위해 레이블은 loc 속성을 사용하고 정수는 iloc 속성을 사용하는 것이 좋습니다: . s2.loc[&quot;bob&quot;] . 83 . s2.iloc[1] . 83 . Series는 인덱스 레이블을 슬라이싱할 수도 있습니다: . s2.iloc[1:3] . bob 83 charles 112 dtype: int64 . 기본 정수 레이블을 사용할 때 예상 외의 결과를 만들 수 있기 때문에 주의해야 합니다: . surprise = pd.Series([1000, 1001, 1002, 1003]) surprise . 0 1000 1 1001 2 1002 3 1003 dtype: int64 . surprise_slice = surprise[2:] surprise_slice . 2 1002 3 1003 dtype: int64 . 보세요. 첫 번째 원소의 인덱스 레이블이 2입니다. 따라서 슬라이싱 결과에서 인덱스 레이블 0인 원소는 없습니다: . try: surprise_slice[0] except KeyError as e: print(&quot;키 에러:&quot;, e) . 키 에러: 0 . 하지만 iloc 속성을 사용해 정수 인덱스로 원소에 접근할 수 있습니다. Series 객체를 사용할 때 loc와 iloc를 사용하는 것이 좋은 이유입니다: . surprise_slice.iloc[0] . 1002 . dict&#50640;&#49436; &#52488;&#44592;&#54868; . dict에서 Series 객체를 만들 수 있습니다. 키는 인덱스 레이블로 사용됩니다: . weights = {&quot;alice&quot;: 68, &quot;bob&quot;: 83, &quot;colin&quot;: 86, &quot;darwin&quot;: 68} s3 = pd.Series(weights) s3 . alice 68 bob 83 colin 86 darwin 68 dtype: int64 . Series에 포함할 원소를 제어하고 index를 지정하여 명시적으로 순서를 결정할 수 있습니다: . s4 = pd.Series(weights, index = [&quot;colin&quot;, &quot;alice&quot;]) s4 . colin 86 alice 68 dtype: int64 . &#51088;&#46041; &#51221;&#47148; . 여러 개의 Series 객체를 다룰 때 pandas는 자동으로 인덱스 레이블에 따라 원소를 정렬합니다. . print(s2.keys()) print(s3.keys()) s2 + s3 . Index([&#39;alice&#39;, &#39;bob&#39;, &#39;charles&#39;, &#39;darwin&#39;], dtype=&#39;object&#39;) Index([&#39;alice&#39;, &#39;bob&#39;, &#39;colin&#39;, &#39;darwin&#39;], dtype=&#39;object&#39;) . alice 136.0 bob 166.0 charles NaN colin NaN darwin 136.0 dtype: float64 . 만들어진 Series는 s2와 s3의 인덱스 레이블의 합집합을 담고 있습니다. s2에 &quot;colin&quot;이 없고 s3에 &quot;charles&quot;가 없기 때문에 이 원소는 NaN 값을 가집니다(Not-a-Number는 누락이란 의미입니다). . 자동 정렬은 구조가 다고 누락된 값이 있는 여러 데이터를 다룰 때 매우 편리합니다. 하지만 올바른 인덱스 레이블을 지정하는 것을 잊는다면 원치않는 결과를 얻을 수 있습니다: . s5 = pd.Series([1000,1000,1000,1000]) print(&quot;s2 =&quot;, s2.values) print(&quot;s5 =&quot;, s5.values) s2 + s5 . s2 = [ 68 83 112 68] s5 = [1000 1000 1000 1000] . alice NaN bob NaN charles NaN darwin NaN 0 NaN 1 NaN 2 NaN 3 NaN dtype: float64 . 레이블이 하나도 맞지 않기 때문에 판다스가 이 Series를 정렬할 수 없습니다. 따라서 모두 NaN이 되었습니다. . &#49828;&#52860;&#46972;&#47196; &#52488;&#44592;&#54868; . 스칼라와 인덱스 레이블의 리스트로 Series 객체를 초기화할 수도 있습니다: 모든 원소가 이 스칼라 값으로 설정됩니다. . meaning = pd.Series(42, [&quot;life&quot;, &quot;universe&quot;, &quot;everything&quot;]) meaning . life 42 universe 42 everything 42 dtype: int64 . Series &#51060;&#47492; . Series는 name을 가질 수 있습니다: . s6 = pd.Series([83, 68], index=[&quot;bob&quot;, &quot;alice&quot;], name=&quot;weights&quot;) s6 . bob 83 alice 68 Name: weights, dtype: int64 . Series &#44536;&#47000;&#54532; &#52636;&#47141; . 맷플롯립을 사용해 Series 데이터를 쉽게 그래프로 출력할 수 있습니다(맷플롯립에 대한 자세한 설명은 맷플롯립 튜토리얼을 참고하세요). 맷플롯립을 임포트하고 plot() 메서드를 호출하면 끝입니다: . %matplotlib inline import matplotlib.pyplot as plt temperatures = [4.4,5.1,6.1,6.2,6.1,6.1,5.7,5.2,4.7,4.1,3.9,3.5] s7 = pd.Series(temperatures, name=&quot;Temperature&quot;) s7.plot() plt.show() . 데이터를 그래프로 출력하는데 많은 옵션이 있습니다. 여기에서 모두 나열할 필요는 없습니다. 특정 종류의 그래프(히스토그램, 파이 차트 등)가 필요하면 판다스 문서의 시각화 섹션에서 예제 코드를 참고하세요. . &#49884;&#44036; &#45796;&#47336;&#44592; . 많은 데이터셋에 타임스탬프가 포함되어 있습니다. 판다스는 이런 데이터를 다루는데 뛰어납니다: . (2016Q3 같은) 기간과 (&quot;monthly&quot; 같은) 빈도를 표현할 수 있습니다. | 기간을 실제 타임스탬프로 변환하거나 그 반대로 변환할 수 있습니다. | 데이터를 리샘플링하고 원하는 방식으로 값을 모을 수 있습니다. | 시간대를 다룰 수 있습니다. | . &#49884;&#44036; &#48276;&#50948; . 먼저 pd.date_range()를 사용해 시계열을 만들어 보죠. 이 함수는 2016년 10월 29일 5:30pm에서 시작하여 12시간마다 하나의 datetime을 담고 있는 DatetimeIndex를 반환합니다. . dates = pd.date_range(&#39;2016/10/29 5:30pm&#39;, periods=12, freq=&#39;H&#39;) dates . DatetimeIndex([&#39;2016-10-29 17:30:00&#39;, &#39;2016-10-29 18:30:00&#39;, &#39;2016-10-29 19:30:00&#39;, &#39;2016-10-29 20:30:00&#39;, &#39;2016-10-29 21:30:00&#39;, &#39;2016-10-29 22:30:00&#39;, &#39;2016-10-29 23:30:00&#39;, &#39;2016-10-30 00:30:00&#39;, &#39;2016-10-30 01:30:00&#39;, &#39;2016-10-30 02:30:00&#39;, &#39;2016-10-30 03:30:00&#39;, &#39;2016-10-30 04:30:00&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;H&#39;) . 이 DatetimeIndex를 Series의 인덱스로 사용할수 있습니다: . temp_series = pd.Series(temperatures, dates) temp_series . 2016-10-29 17:30:00 4.4 2016-10-29 18:30:00 5.1 2016-10-29 19:30:00 6.1 2016-10-29 20:30:00 6.2 2016-10-29 21:30:00 6.1 2016-10-29 22:30:00 6.1 2016-10-29 23:30:00 5.7 2016-10-30 00:30:00 5.2 2016-10-30 01:30:00 4.7 2016-10-30 02:30:00 4.1 2016-10-30 03:30:00 3.9 2016-10-30 04:30:00 3.5 Freq: H, dtype: float64 . 이 시리즈를 그래프로 출력해 보죠: . temp_series.plot(kind=&quot;bar&quot;) plt.grid(True) plt.show() . &#47532;&#49368;&#54540;&#47553; . 판다스는 매우 간단하게 시계열을 리샘플링할 수 있습니다. resample() 메서드를 호출하고 새로운 주기를 지정하면 됩니다: . temp_series_freq_2H = temp_series.resample(&quot;2H&quot;) temp_series_freq_2H . &lt;pandas.core.resample.DatetimeIndexResampler object at 0x7fccdeb8cf28&gt; . 리샘플링 연산은 사실 지연된 연산입니다. 그래서 Series 객체 대신 DatetimeIndexResampler 객체가 반환됩니다. 실제 리샘플링 연산을 수행하려면 mean() 같은 메서드를 호출할 수 있습니다. 이 메서드는 연속적인 시간 쌍에 대해 평균을 계산합니다: . temp_series_freq_2H = temp_series_freq_2H.mean() . 결과를 그래프로 출력해 보죠: . temp_series_freq_2H.plot(kind=&quot;bar&quot;) plt.show() . 2시간 간격으로 어떻게 값이 수집되었는지 확인해 보세요. 예를 들어 6-8pm 간격을 보면 6:30pm에서 5.1이고 7:30pm에서 6.1입니다. 리샘플링 후에 5.1과 6.1의 평균인 5.6 하나를 얻었습니다. 평균말고 어떤 집계 함수(aggregation function)도 사용할 수 있습니다. 예를 들어 각 기간에서 최솟값을 찾을 수 있습니다: . temp_series_freq_2H = temp_series.resample(&quot;2H&quot;).min() temp_series_freq_2H . 2016-10-29 16:00:00 4.4 2016-10-29 18:00:00 5.1 2016-10-29 20:00:00 6.1 2016-10-29 22:00:00 5.7 2016-10-30 00:00:00 4.7 2016-10-30 02:00:00 3.9 2016-10-30 04:00:00 3.5 Freq: 2H, dtype: float64 . 또는 동일한 효과를 내는 apply() 메서드를 사용할 수 있습니다: . temp_series_freq_2H = temp_series.resample(&quot;2H&quot;).apply(np.min) temp_series_freq_2H . 2016-10-29 16:00:00 4.4 2016-10-29 18:00:00 5.1 2016-10-29 20:00:00 6.1 2016-10-29 22:00:00 5.7 2016-10-30 00:00:00 4.7 2016-10-30 02:00:00 3.9 2016-10-30 04:00:00 3.5 Freq: 2H, dtype: float64 . &#50629;&#49368;&#54540;&#47553;&#44284; &#48372;&#44036; . 다운샘플링의 예를 보았습니다. 하지만 업샘플링(즉, 빈도를 높입니다)도 할 수 있습니다. 하지만 데이터에 구멍을 만듭니다: . temp_series_freq_15min = temp_series.resample(&quot;15Min&quot;).mean() temp_series_freq_15min.head(n=10) # `head`는 상위 n 개의 값만 출력합니다 . 2016-10-29 17:30:00 4.4 2016-10-29 17:45:00 NaN 2016-10-29 18:00:00 NaN 2016-10-29 18:15:00 NaN 2016-10-29 18:30:00 5.1 2016-10-29 18:45:00 NaN 2016-10-29 19:00:00 NaN 2016-10-29 19:15:00 NaN 2016-10-29 19:30:00 6.1 2016-10-29 19:45:00 NaN Freq: 15T, dtype: float64 . 한가지 방법은 보간으로 사이를 채우는 것입니다. 이렇게 하려면 interpolate() 메서드를 호출합니다. 기본값은 선형 보간이지만 3차 보간(cubic interpolation) 같은 다른 방법을 선택할 수 있습니다: . temp_series_freq_15min = temp_series.resample(&quot;15Min&quot;).interpolate(method=&quot;cubic&quot;) temp_series_freq_15min.head(n=10) . 2016-10-29 17:30:00 4.400000 2016-10-29 17:45:00 4.452911 2016-10-29 18:00:00 4.605113 2016-10-29 18:15:00 4.829758 2016-10-29 18:30:00 5.100000 2016-10-29 18:45:00 5.388992 2016-10-29 19:00:00 5.669887 2016-10-29 19:15:00 5.915839 2016-10-29 19:30:00 6.100000 2016-10-29 19:45:00 6.203621 Freq: 15T, dtype: float64 . temp_series.plot(label=&quot;Period: 1 hour&quot;) temp_series_freq_15min.plot(label=&quot;Period: 15 minutes&quot;) plt.legend() plt.show() . &#49884;&#44036;&#45824; . 기본적으로 datetime은 단순합니다. 시간대(timezone)을 고려하지 않죠. 따라서 2016-10-30 02:30는 파리나 뉴욕이나 2016년 10월 30일 2:30pm입니다. tz_localize() 메서드로 시간대를 고려한 datetime을 만들 수 있습니다: . temp_series_ny = temp_series.tz_localize(&quot;America/New_York&quot;) temp_series_ny . 2016-10-29 17:30:00-04:00 4.4 2016-10-29 18:30:00-04:00 5.1 2016-10-29 19:30:00-04:00 6.1 2016-10-29 20:30:00-04:00 6.2 2016-10-29 21:30:00-04:00 6.1 2016-10-29 22:30:00-04:00 6.1 2016-10-29 23:30:00-04:00 5.7 2016-10-30 00:30:00-04:00 5.2 2016-10-30 01:30:00-04:00 4.7 2016-10-30 02:30:00-04:00 4.1 2016-10-30 03:30:00-04:00 3.9 2016-10-30 04:30:00-04:00 3.5 dtype: float64 . 모든 datetime에 -04:00이 추가됩니다. 즉 모든 시간은 UTC - 4시간을 의미합니다. . 다음처럼 파리 시간대로 바꿀 수 있습니다: . temp_series_paris = temp_series_ny.tz_convert(&quot;Europe/Paris&quot;) temp_series_paris . 2016-10-29 23:30:00+02:00 4.4 2016-10-30 00:30:00+02:00 5.1 2016-10-30 01:30:00+02:00 6.1 2016-10-30 02:30:00+02:00 6.2 2016-10-30 02:30:00+01:00 6.1 2016-10-30 03:30:00+01:00 6.1 2016-10-30 04:30:00+01:00 5.7 2016-10-30 05:30:00+01:00 5.2 2016-10-30 06:30:00+01:00 4.7 2016-10-30 07:30:00+01:00 4.1 2016-10-30 08:30:00+01:00 3.9 2016-10-30 09:30:00+01:00 3.5 dtype: float64 . UTC와의 차이가 +02:00에서 +01:00으로 바뀐 것을 알 수 있습니다. 이는 프랑스가 10월 30일 3am에 겨울 시간으로 바꾸기 때문입니다(2am으로 바뀝니다). 따라서 2:30am이 두 번 등장합니다! 시간대가 없는 표현으로 돌아가 보죠(시간대가 없이 지역 시간으로 매시간 로그를 기록하는 경우 이와 비슷할 것입니다): . temp_series_paris_naive = temp_series_paris.tz_localize(None) temp_series_paris_naive . 2016-10-29 23:30:00 4.4 2016-10-30 00:30:00 5.1 2016-10-30 01:30:00 6.1 2016-10-30 02:30:00 6.2 2016-10-30 02:30:00 6.1 2016-10-30 03:30:00 6.1 2016-10-30 04:30:00 5.7 2016-10-30 05:30:00 5.2 2016-10-30 06:30:00 4.7 2016-10-30 07:30:00 4.1 2016-10-30 08:30:00 3.9 2016-10-30 09:30:00 3.5 dtype: float64 . 이렇게 되면 02:30이 정말 애매합니다. 시간대가 없는 datetime을 파리 시간대로 바꿀 때 에러가 발생합니다: . try: temp_series_paris_naive.tz_localize(&quot;Europe/Paris&quot;) except Exception as e: print(type(e)) print(e) . &lt;class &#39;pytz.exceptions.AmbiguousTimeError&#39;&gt; Cannot infer dst time from 2016-10-30 02:30:00, try using the &#39;ambiguous&#39; argument . 다행히 ambiguous 매개변수를 사용하면 판다스가 타임스탬프의 순서를 기반으로 적절한 DST(일광 절약 시간제)를 추측합니다: . temp_series_paris_naive.tz_localize(&quot;Europe/Paris&quot;, ambiguous=&quot;infer&quot;) . 2016-10-29 23:30:00+02:00 4.4 2016-10-30 00:30:00+02:00 5.1 2016-10-30 01:30:00+02:00 6.1 2016-10-30 02:30:00+02:00 6.2 2016-10-30 02:30:00+01:00 6.1 2016-10-30 03:30:00+01:00 6.1 2016-10-30 04:30:00+01:00 5.7 2016-10-30 05:30:00+01:00 5.2 2016-10-30 06:30:00+01:00 4.7 2016-10-30 07:30:00+01:00 4.1 2016-10-30 08:30:00+01:00 3.9 2016-10-30 09:30:00+01:00 3.5 dtype: float64 . &#44592;&#44036; . pd.period_range() 함수는 DatetimeIndex가 아니라 PeriodIndex를 반환합니다. 예를 들어 2016과 2017년의 전체 분기를 가져와 보죠: . quarters = pd.period_range(&#39;2016Q1&#39;, periods=8, freq=&#39;Q&#39;) quarters . PeriodIndex([&#39;2016Q1&#39;, &#39;2016Q2&#39;, &#39;2016Q3&#39;, &#39;2016Q4&#39;, &#39;2017Q1&#39;, &#39;2017Q2&#39;, &#39;2017Q3&#39;, &#39;2017Q4&#39;], dtype=&#39;period[Q-DEC]&#39;, freq=&#39;Q-DEC&#39;) . PeriodIndex에 숫자 N을 추가하면 PeriodIndex 빈도의 N 배만큼 이동시킵니다: . quarters + 3 . PeriodIndex([&#39;2016Q4&#39;, &#39;2017Q1&#39;, &#39;2017Q2&#39;, &#39;2017Q3&#39;, &#39;2017Q4&#39;, &#39;2018Q1&#39;, &#39;2018Q2&#39;, &#39;2018Q3&#39;], dtype=&#39;period[Q-DEC]&#39;, freq=&#39;Q-DEC&#39;) . asfreq() 메서드를 사용하면 PeriodIndex의 빈도를 바꿀 수 있습니다. 모든 기간이 늘어나거나 줄어듭니다. 예를 들어 분기 기간을 모두 월별 기간으로 바꾸어 보죠: . quarters.asfreq(&quot;M&quot;) . PeriodIndex([&#39;2016-03&#39;, &#39;2016-06&#39;, &#39;2016-09&#39;, &#39;2016-12&#39;, &#39;2017-03&#39;, &#39;2017-06&#39;, &#39;2017-09&#39;, &#39;2017-12&#39;], dtype=&#39;period[M]&#39;, freq=&#39;M&#39;) . 기본적으로 asfreq는 각 기간의 끝에 맞춥니다. 기간의 시작에 맞추도록 변경할 수 있습니다: . quarters.asfreq(&quot;M&quot;, how=&quot;start&quot;) . PeriodIndex([&#39;2016-01&#39;, &#39;2016-04&#39;, &#39;2016-07&#39;, &#39;2016-10&#39;, &#39;2017-01&#39;, &#39;2017-04&#39;, &#39;2017-07&#39;, &#39;2017-10&#39;], dtype=&#39;period[M]&#39;, freq=&#39;M&#39;) . 간격을 늘릴 수도 있습니다: . quarters.asfreq(&quot;A&quot;) . PeriodIndex([&#39;2016&#39;, &#39;2016&#39;, &#39;2016&#39;, &#39;2016&#39;, &#39;2017&#39;, &#39;2017&#39;, &#39;2017&#39;, &#39;2017&#39;], dtype=&#39;period[A-DEC]&#39;, freq=&#39;A-DEC&#39;) . 물론 PeriodIndex로 Series를 만들 수 있습니다: . quarterly_revenue = pd.Series([300, 320, 290, 390, 320, 360, 310, 410], index = quarters) quarterly_revenue . 2016Q1 300 2016Q2 320 2016Q3 290 2016Q4 390 2017Q1 320 2017Q2 360 2017Q3 310 2017Q4 410 Freq: Q-DEC, dtype: int64 . quarterly_revenue.plot(kind=&quot;line&quot;) plt.show() . to_timestamp를 호출해서 기간을 타임스탬프로 변경할 수 있습니다. 기본적으로 기간의 첫 번째 날을 반환합니다. 하지만 how와 freq를 지정해서 기간의 마지막 시간을 얻을 수 있습니다: . last_hours = quarterly_revenue.to_timestamp(how=&quot;end&quot;, freq=&quot;H&quot;) last_hours . 2016-03-31 23:59:59.999999999 300 2016-06-30 23:59:59.999999999 320 2016-09-30 23:59:59.999999999 290 2016-12-31 23:59:59.999999999 390 2017-03-31 23:59:59.999999999 320 2017-06-30 23:59:59.999999999 360 2017-09-30 23:59:59.999999999 310 2017-12-31 23:59:59.999999999 410 dtype: int64 . to_peroid를 호출하면 다시 기간으로 돌아갑니다: . last_hours.to_period() . 2016Q1 300 2016Q2 320 2016Q3 290 2016Q4 390 2017Q1 320 2017Q2 360 2017Q3 310 2017Q4 410 Freq: Q-DEC, dtype: int64 . 판다스는 여러 가지 시간 관련 함수를 많이 제공합니다. 온라인 문서를 확인해 보세요. 예를 하나 들면 2016년 매월 마지막 업무일의 9시를 얻는 방법은 다음과 같습니다: . months_2016 = pd.period_range(&quot;2016&quot;, periods=12, freq=&quot;M&quot;) one_day_after_last_days = months_2016.asfreq(&quot;D&quot;) + 1 last_bdays = one_day_after_last_days.to_timestamp() - pd.tseries.offsets.BDay() last_bdays.to_period(&quot;H&quot;) + 9 . PeriodIndex([&#39;2016-01-29 09:00&#39;, &#39;2016-02-29 09:00&#39;, &#39;2016-03-31 09:00&#39;, &#39;2016-04-29 09:00&#39;, &#39;2016-05-31 09:00&#39;, &#39;2016-06-30 09:00&#39;, &#39;2016-07-29 09:00&#39;, &#39;2016-08-31 09:00&#39;, &#39;2016-09-30 09:00&#39;, &#39;2016-10-31 09:00&#39;, &#39;2016-11-30 09:00&#39;, &#39;2016-12-30 09:00&#39;], dtype=&#39;period[H]&#39;, freq=&#39;H&#39;) . DataFrame &#44061;&#52404; . 데이터프레임 객체는 스프레드시트를 표현합니다. 셀 값, 열 이름, 행 인덱스 레이블을 가집니다. 다른 열을 바탕으로 열을 계산하는 식을 쓸 수 있고 피봇 테이블을 만들고, 행을 그룹핑하고, 그래프를 그릴 수 있습니다. DataFrame을 Series의 딕셔너리로 볼 수 있습니다. . DataFrame &#47564;&#46308;&#44592; . Series 객체의 딕셔너리를 전달하여 데이터프레임을 만들 수 있습니다: . people_dict = { &quot;weight&quot;: pd.Series([68, 83, 112], index=[&quot;alice&quot;, &quot;bob&quot;, &quot;charles&quot;]), &quot;birthyear&quot;: pd.Series([1984, 1985, 1992], index=[&quot;bob&quot;, &quot;alice&quot;, &quot;charles&quot;], name=&quot;year&quot;), &quot;children&quot;: pd.Series([0, 3], index=[&quot;charles&quot;, &quot;bob&quot;]), &quot;hobby&quot;: pd.Series([&quot;Biking&quot;, &quot;Dancing&quot;], index=[&quot;alice&quot;, &quot;bob&quot;]), } people = pd.DataFrame(people_dict) people . weight birthyear children hobby . alice 68 | 1985 | NaN | Biking | . bob 83 | 1984 | 3.0 | Dancing | . charles 112 | 1992 | 0.0 | NaN | . 몇가지 알아 두어야 할 것은 다음과 같습니다: . Series는 인덱스를 기반으로 자동으로 정렬됩니다. | 누란된 값은 NaN으로 표현됩니다. | Series 이름은 무시됩니다(&quot;year&quot;란 이름은 삭제됩니다). | DataFrame은 주피터 노트북에서 멋지게 출력됩니다! | . 예상하는 방식으로 열을 참조할 수 있고 Serires 객체가 반환됩니다: . people[&quot;birthyear&quot;] . alice 1985 bob 1984 charles 1992 Name: birthyear, dtype: int64 . 동시에 여러 개의 열을 선택할 수 있습니다: . people[[&quot;birthyear&quot;, &quot;hobby&quot;]] . birthyear hobby . alice 1985 | Biking | . bob 1984 | Dancing | . charles 1992 | NaN | . 열 리스트나 행 인덱스 레이블을 DataFrame 생성자에 전달하면 해당 열과 행으로 채워진 데이터프레임이 반환됩니다. 예를 들면: . d2 = pd.DataFrame( people_dict, columns=[&quot;birthyear&quot;, &quot;weight&quot;, &quot;height&quot;], index=[&quot;bob&quot;, &quot;alice&quot;, &quot;eugene&quot;] ) d2 . birthyear weight height . bob 1984.0 | 83.0 | NaN | . alice 1985.0 | 68.0 | NaN | . eugene NaN | NaN | NaN | . DataFrame을 만드는 또 다른 편리한 방법은 ndarray나 리스트의 리스트로 모든 값을 생성자에게 전달하고 열 이름과 행 인덱스 레이블을 각기 지정하는 것입니다: . values = [ [1985, np.nan, &quot;Biking&quot;, 68], [1984, 3, &quot;Dancing&quot;, 83], [1992, 0, np.nan, 112] ] d3 = pd.DataFrame( values, columns=[&quot;birthyear&quot;, &quot;children&quot;, &quot;hobby&quot;, &quot;weight&quot;], index=[&quot;alice&quot;, &quot;bob&quot;, &quot;charles&quot;] ) d3 . birthyear children hobby weight . alice 1985 | NaN | Biking | 68 | . bob 1984 | 3.0 | Dancing | 83 | . charles 1992 | 0.0 | NaN | 112 | . 누락된 값을 지정하려면 np.nan이나 넘파이 마스크 배열을 사용합니다: . masked_array = np.ma.asarray(values, dtype=np.object) masked_array[(0, 2), (1, 2)] = np.ma.masked d3 = pd.DataFrame( masked_array, columns=[&quot;birthyear&quot;, &quot;children&quot;, &quot;hobby&quot;, &quot;weight&quot;], index=[&quot;alice&quot;, &quot;bob&quot;, &quot;charles&quot;] ) d3 . birthyear children hobby weight . alice 1985 | NaN | Biking | 68 | . bob 1984 | 3 | Dancing | 83 | . charles 1992 | 0 | NaN | 112 | . ndarray 대신에 DataFrame 객체를 전달할 수도 있습니다: . d4 = pd.DataFrame( d3, columns=[&quot;hobby&quot;, &quot;children&quot;], index=[&quot;alice&quot;, &quot;bob&quot;] ) d4 . hobby children . alice Biking | NaN | . bob Dancing | 3 | . 딕셔너리의 딕셔너리(또는 리스트의 리스트)로 DataFrame을 만들 수 있습니다: . people = pd.DataFrame({ &quot;birthyear&quot;: {&quot;alice&quot;:1985, &quot;bob&quot;: 1984, &quot;charles&quot;: 1992}, &quot;hobby&quot;: {&quot;alice&quot;:&quot;Biking&quot;, &quot;bob&quot;: &quot;Dancing&quot;}, &quot;weight&quot;: {&quot;alice&quot;:68, &quot;bob&quot;: 83, &quot;charles&quot;: 112}, &quot;children&quot;: {&quot;bob&quot;: 3, &quot;charles&quot;: 0} }) people . birthyear hobby weight children . alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . charles 1992 | NaN | 112 | 0.0 | . &#47680;&#54000; &#51064;&#45937;&#49905; . 모든 열이 같은 크기의 튜플이면 멀티 인덱스로 인식합니다. 열 인덱스 레이블에도 같은 방식이 적용됩니다. 예를 들면: . d5 = pd.DataFrame( { (&quot;public&quot;, &quot;birthyear&quot;): {(&quot;Paris&quot;,&quot;alice&quot;):1985, (&quot;Paris&quot;,&quot;bob&quot;): 1984, (&quot;London&quot;,&quot;charles&quot;): 1992}, (&quot;public&quot;, &quot;hobby&quot;): {(&quot;Paris&quot;,&quot;alice&quot;):&quot;Biking&quot;, (&quot;Paris&quot;,&quot;bob&quot;): &quot;Dancing&quot;}, (&quot;private&quot;, &quot;weight&quot;): {(&quot;Paris&quot;,&quot;alice&quot;):68, (&quot;Paris&quot;,&quot;bob&quot;): 83, (&quot;London&quot;,&quot;charles&quot;): 112}, (&quot;private&quot;, &quot;children&quot;): {(&quot;Paris&quot;, &quot;alice&quot;):np.nan, (&quot;Paris&quot;,&quot;bob&quot;): 3, (&quot;London&quot;,&quot;charles&quot;): 0} } ) d5 . public private . birthyear hobby weight children . Paris alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . London charles 1992 | NaN | 112 | 0.0 | . 이제 &quot;public&quot; 열을 모두 담은 DataFrame을 손쉽게 만들 수 있습니다: . d5[&quot;public&quot;] . birthyear hobby . Paris alice 1985 | Biking | . bob 1984 | Dancing | . London charles 1992 | NaN | . d5[&quot;public&quot;, &quot;hobby&quot;] # d5[&quot;public&quot;][&quot;hobby&quot;]와 같습니다. . Paris alice Biking bob Dancing London charles NaN Name: (public, hobby), dtype: object . &#47112;&#48296; &#45230;&#52628;&#44592; . d5를 다시 확인해 보죠: . d5 . public private . birthyear hobby weight children . Paris alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . London charles 1992 | NaN | 112 | 0.0 | . 열의 레벨(level)이 2개이고 인덱스 레벨이 2개입니다. droplevel()을 사용해 열 레벨을 낮출 수 있습니다(인덱스도 마찬가지입니다): . d5.columns = d5.columns.droplevel(level = 0) d5 . birthyear hobby weight children . Paris alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . London charles 1992 | NaN | 112 | 0.0 | . &#51204;&#52824; . T 속성을 사용해 열과 인덱스를 바꿀 수 있습니다: . d6 = d5.T d6 . Paris London . alice bob charles . birthyear 1985 | 1984 | 1992 | . hobby Biking | Dancing | NaN | . weight 68 | 83 | 112 | . children NaN | 3 | 0 | . &#47112;&#48296; &#49828;&#53469;&#44284; &#50616;&#49828;&#53469; . stack() 메서드는 가장 낮은 열 레벨을 가장 낮은 인덱스 뒤에 추가합니다: . d7 = d6.stack() d7 . London Paris . birthyear alice NaN | 1985 | . bob NaN | 1984 | . charles 1992 | NaN | . hobby alice NaN | Biking | . bob NaN | Dancing | . weight alice NaN | 68 | . bob NaN | 83 | . charles 112 | NaN | . children bob NaN | 3 | . charles 0 | NaN | . NaN 값이 생겼습니다. 이전에 없던 조합이 생겼기 때문입니다(예를 들어 London에 bob이 없었습니다). . unstack()을 호출하면 반대가 됩니다. 여기에서도 많은 NaN 값이 생성됩니다. . d8 = d7.unstack() d8 . London Paris . alice bob charles alice bob charles . birthyear NaN | NaN | 1992 | 1985 | 1984 | NaN | . children NaN | NaN | 0 | NaN | 3 | NaN | . hobby NaN | NaN | NaN | Biking | Dancing | NaN | . weight NaN | NaN | 112 | 68 | 83 | NaN | . unstack을 다시 호출하면 Series 객체가 만들어 집니다: . d9 = d8.unstack() d9 . London alice birthyear NaN children NaN hobby NaN weight NaN bob birthyear NaN children NaN hobby NaN weight NaN charles birthyear 1992 children 0 hobby NaN weight 112 Paris alice birthyear 1985 children NaN hobby Biking weight 68 bob birthyear 1984 children 3 hobby Dancing weight 83 charles birthyear NaN children NaN hobby NaN weight NaN dtype: object . stack()과 unstack() 메서드를 사용할 때 스택/언스택할 level을 선택할 수 있습니다. 심지어 한 번에 여러 개의 레벨을 스택/언스택할 수도 있습니다: . d10 = d9.unstack(level = (0,1)) d10 . London Paris . alice bob charles alice bob charles . birthyear NaN | NaN | 1992 | 1985 | 1984 | NaN | . children NaN | NaN | 0 | NaN | 3 | NaN | . hobby NaN | NaN | NaN | Biking | Dancing | NaN | . weight NaN | NaN | 112 | 68 | 83 | NaN | . &#45824;&#48512;&#48516;&#51032; &#47700;&#49436;&#46300;&#45716; &#49688;&#51221;&#46108; &#48373;&#49324;&#48376;&#51012; &#48152;&#54872;&#54633;&#45768;&#45796; . 눈치챘겠지만 stack()과 unstack() 메서드는 객체를 수정하지 않습니다. 대신 복사본을 만들어 반환합니다. 판다스에 있는 대부분의 메서드들이 이렇게 동작합니다. . &#54665; &#52280;&#51312;&#54616;&#44592; . people DataFrame으로 돌아가 보죠: . people . birthyear hobby weight children . alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . charles 1992 | NaN | 112 | 0.0 | . loc 속성으로 열 대신 행을 참조할 수 있습니다. DataFrame의 열 이름이 행 인덱스 레이블로 매핑된 Series 객체가 반환됩니다: . people.loc[&quot;charles&quot;] . birthyear 1992 hobby NaN weight 112 children 0 Name: charles, dtype: object . iloc 속성을 사용해 정수 인덱스로 행을 참조할 수 있습니다: . people.iloc[2] . birthyear 1992 hobby NaN weight 112 children 0 Name: charles, dtype: object . 행을 슬라이싱할 수 있으며 DataFrame 객체가 반환됩니다: . people.iloc[1:3] . birthyear hobby weight children . bob 1984 | Dancing | 83 | 3.0 | . charles 1992 | NaN | 112 | 0.0 | . 마자믹으로 불리언 배열을 전달하여 해당하는 행을 가져올 수 있습니다: . people[np.array([True, False, True])] . birthyear hobby weight children . alice 1985 | Biking | 68 | NaN | . charles 1992 | NaN | 112 | 0.0 | . 불리언 표현식을 사용할 때 아주 유용합니다: . people[people[&quot;birthyear&quot;] &lt; 1990] . birthyear hobby weight children . alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . &#50676; &#52628;&#44032;, &#49325;&#51228; . DataFrame을 Series의 딕셔너리처럼 다룰 수 있습니다. 따라서 다음 같이 쓸 수 있습니다: . people . birthyear hobby weight children . alice 1985 | Biking | 68 | NaN | . bob 1984 | Dancing | 83 | 3.0 | . charles 1992 | NaN | 112 | 0.0 | . people[&quot;age&quot;] = 2018 - people[&quot;birthyear&quot;] # &quot;age&quot; 열을 추가합니다 people[&quot;over 30&quot;] = people[&quot;age&quot;] &gt; 30 # &quot;over 30&quot; 열을 추가합니다 birthyears = people.pop(&quot;birthyear&quot;) del people[&quot;children&quot;] people . hobby weight age over 30 . alice Biking | 68 | 33 | True | . bob Dancing | 83 | 34 | True | . charles NaN | 112 | 26 | False | . birthyears . alice 1985 bob 1984 charles 1992 Name: birthyear, dtype: int64 . 새로운 열을 추가할 때 행의 개수는 같아야 합니다. 누락된 행은 NaN으로 채워지고 추가적인 행은 무시됩니다: . people[&quot;pets&quot;] = pd.Series({&quot;bob&quot;: 0, &quot;charles&quot;: 5, &quot;eugene&quot;:1}) # alice 누락됨, eugene은 무시됨 people . hobby weight age over 30 pets . alice Biking | 68 | 33 | True | NaN | . bob Dancing | 83 | 34 | True | 0.0 | . charles NaN | 112 | 26 | False | 5.0 | . 새로운 열을 추가할 때 기본적으로 (오른쪽) 끝에 추가됩니다. insert() 메서드를 사용해 다른 곳에 열을 추가할 수 있습니다: . people.insert(1, &quot;height&quot;, [172, 181, 185]) people . hobby height weight age over 30 pets . alice Biking | 172 | 68 | 33 | True | NaN | . bob Dancing | 181 | 83 | 34 | True | 0.0 | . charles NaN | 185 | 112 | 26 | False | 5.0 | . &#49352;&#47196;&#50868; &#50676; &#54624;&#45817;&#54616;&#44592; . assign() 메서드를 호출하여 새로운 열을 만들 수도 있습니다. 이는 새로운 DataFrame 객체를 반환하며 원본 객체는 변경되지 않습니다: . people.assign( body_mass_index = people[&quot;weight&quot;] / (people[&quot;height&quot;] / 100) ** 2, has_pets = people[&quot;pets&quot;] &gt; 0 ) . hobby height weight age over 30 pets body_mass_index has_pets . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | False | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | False | . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | True | . 할당문 안에서 만든 열은 접근할 수 없습니다: . try: people.assign( body_mass_index = people[&quot;weight&quot;] / (people[&quot;height&quot;] / 100) ** 2, overweight = people[&quot;body_mass_index&quot;] &gt; 25 ) except KeyError as e: print(&quot;키 에러:&quot;, e) . 키 에러: &#39;body_mass_index&#39; . 해결책은 두 개의 연속된 할당문으로 나누는 것입니다: . d6 = people.assign(body_mass_index = people[&quot;weight&quot;] / (people[&quot;height&quot;] / 100) ** 2) d6.assign(overweight = d6[&quot;body_mass_index&quot;] &gt; 25) . hobby height weight age over 30 pets body_mass_index overweight . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | False | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | True | . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | True | . 임시 변수 d6를 만들면 불편합니다. assign() 메서드를 연결하고 싶겠지만 people 객체가 첫 번째 할당문에서 실제로 수정되지 않기 때문에 작동하지 않습니다: . try: (people .assign(body_mass_index = people[&quot;weight&quot;] / (people[&quot;height&quot;] / 100) ** 2) .assign(overweight = people[&quot;body_mass_index&quot;] &gt; 25) ) except KeyError as e: print(&quot;키 에러:&quot;, e) . 키 에러: &#39;body_mass_index&#39; . 하지만 걱정하지 마세요. 간단한 방법이 있습니다. assign() 메서드에 함수(전형적으로 lambda 함수)를 전달하면 DataFrame을 매개변수로 이 함수를 호출할 것입니다: . (people .assign(body_mass_index = lambda df: df[&quot;weight&quot;] / (df[&quot;height&quot;] / 100) ** 2) .assign(overweight = lambda df: df[&quot;body_mass_index&quot;] &gt; 25) ) . hobby height weight age over 30 pets body_mass_index overweight . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | False | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | True | . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | True | . 문제가 해결되었군요! . &#54364;&#54788;&#49885; &#54217;&#44032; . 판다스가 제공하는 뛰어난 기능 하나는 표현식 평가입니다. 이는 numexpr 라이브러리에 의존하기 때문에 설치가 되어 있어야 합니다. . people.eval(&quot;weight / (height/100) ** 2 &gt; 25&quot;) . alice False bob True charles True dtype: bool . 할당 표현식도 지원됩니다. inplace=True로 지정하면 수정된 복사본을 만들지 않고 바로 DataFrame을 변경합니다: . people.eval(&quot;body_mass_index = weight / (height/100) ** 2&quot;, inplace=True) people . hobby height weight age over 30 pets body_mass_index . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | . &#39;@&#39;를 접두어로 사용하여 지역 변수나 전역 변수를 참조할 수 있습니다: . overweight_threshold = 30 people.eval(&quot;overweight = body_mass_index &gt; @overweight_threshold&quot;, inplace=True) people . hobby height weight age over 30 pets body_mass_index overweight . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | False | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | False | . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | True | . DataFrame &#53244;&#47532;&#54616;&#44592; . query() 메서드를 사용하면 쿼리 표현식에 기반하여 DataFrame을 필터링할 수 있습니다: . people.query(&quot;age &gt; 30 and pets == 0&quot;) . hobby height weight age over 30 pets body_mass_index overweight . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | False | . DataFrame &#51221;&#47148; . sort_index 메서드를 호출하여 DataFrame을 정렬할 수 있습니다. 기본적으로 인덱스 레이블을 기준으로 오름차순으로 행을 정렬합니다. 여기에서는 내림차순으로 정렬해 보죠: . people.sort_index(ascending=False) . hobby height weight age over 30 pets body_mass_index overweight . charles NaN | 185 | 112 | 26 | False | 5.0 | 32.724617 | True | . bob Dancing | 181 | 83 | 34 | True | 0.0 | 25.335002 | False | . alice Biking | 172 | 68 | 33 | True | NaN | 22.985398 | False | . sort_index는 DataFrame의 정렬된 복사본을 반환합니다. people을 직접 수정하려면 inplace 매개변수를 True로 지정합니다. 또한 axis=1로 지정하여 열 대신 행을 정렬할 수 있습니다: . people.sort_index(axis=1, inplace=True) people . age body_mass_index height hobby over 30 overweight pets weight . alice 33 | 22.985398 | 172 | Biking | True | False | NaN | 68 | . bob 34 | 25.335002 | 181 | Dancing | True | False | 0.0 | 83 | . charles 26 | 32.724617 | 185 | NaN | False | True | 5.0 | 112 | . 레이블이 아니라 값을 기준으로 DataFrame을 정렬하려면 sort_values에 정렬하려는 열을 지정합니다: . people.sort_values(by=&quot;age&quot;, inplace=True) people . age body_mass_index height hobby over 30 overweight pets weight . charles 26 | 32.724617 | 185 | NaN | False | True | 5.0 | 112 | . alice 33 | 22.985398 | 172 | Biking | True | False | NaN | 68 | . bob 34 | 25.335002 | 181 | Dancing | True | False | 0.0 | 83 | . DataFrame &#44536;&#47000;&#54532; &#44536;&#47532;&#44592; . Series와 마찬가지로 판다스는 DataFrame 기반으로 멋진 그래프를 손쉽게 그릴 수 있습니다. . 예를 들어 plot 메서드를 호출하여 DataFrame의 데이터에서 선 그래프를 쉽게 그릴 수 있습니다: . people.plot(kind = &quot;line&quot;, x = &quot;body_mass_index&quot;, y = [&quot;height&quot;, &quot;weight&quot;]) plt.show() . 맷플롯립의 함수가 지원하는 다른 매개변수를 사용할 수 있습니다. 예를 들어, 산점도를 그릴 때 맷플롯립의 scatter() 함수의 s 매개변수를 사용해 크기를 지정할 수 있습니다: . people.plot(kind = &quot;scatter&quot;, x = &quot;height&quot;, y = &quot;weight&quot;, s=[40, 120, 200]) plt.show() . 선택할 수 있는 옵션이 많습니다. 판다스 문서의 시각화 페이지에서 마음에 드는 그래프를 찾아 예제 코드를 살펴 보세요. . DataFrame &#50672;&#49328; . DataFrame이 넘파이 배열을 흉내내려는 것은 아니지만 몇 가지 비슷한 점이 있습니다. 예제 DataFrame을 만들어 보죠: . grades_array = np.array([[8,8,9],[10,9,9],[4, 8, 2], [9, 10, 10]]) grades = pd.DataFrame(grades_array, columns=[&quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;], index=[&quot;alice&quot;,&quot;bob&quot;,&quot;charles&quot;,&quot;darwin&quot;]) grades . sep oct nov . alice 8 | 8 | 9 | . bob 10 | 9 | 9 | . charles 4 | 8 | 2 | . darwin 9 | 10 | 10 | . DataFrame에 넘파이 수학 함수를 적용하면 모든 값에 이 함수가 적용됩니다: . np.sqrt(grades) . sep oct nov . alice 2.828427 | 2.828427 | 3.000000 | . bob 3.162278 | 3.000000 | 3.000000 | . charles 2.000000 | 2.828427 | 1.414214 | . darwin 3.000000 | 3.162278 | 3.162278 | . 비슷하게 DataFrame에 하나의 값을 더하면 DataFrame의 모든 원소에 이 값이 더해집니다. 이를 브로드캐스팅이라고 합니다: . grades + 1 . sep oct nov . alice 9 | 9 | 10 | . bob 11 | 10 | 10 | . charles 5 | 9 | 3 | . darwin 10 | 11 | 11 | . 물론 산술 연산(*,/,**...)과 조건 연산(&gt;, ==...)을 포함해 모든 이항 연산에도 마찬가지 입니다: . grades &gt;= 5 . sep oct nov . alice True | True | True | . bob True | True | True | . charles False | True | False | . darwin True | True | True | . DataFrame의 max, sum, mean 같은 집계 연산은 각 열에 적용되어 Series 객체가 반환됩니다: . grades.mean() . sep 7.75 oct 8.75 nov 7.50 dtype: float64 . all 메서드도 집계 연산입니다: 모든 값이 True인지 아닌지 확인합니다. 모든 학생의 점수가 5 이상인 월을 찾아 보죠: . (grades &gt; 5).all() . sep False oct True nov False dtype: bool . Most of these functions take an optional axis parameter which lets you specify along which axis of the DataFrame you want the operation executed. The default is axis=0, meaning that the operation is executed vertically (on each column). You can set axis=1 to execute the operation horizontally (on each row). For example, let&#39;s find out which students had all grades greater than 5: . (grades &gt; 5).all(axis = 1) . alice True bob True charles False darwin True dtype: bool . any 메서드는 하나라도 참이면 True를 반환합니다. 한 번이라도 10점을 받은 사람을 찾아 보죠: . (grades == 10).any(axis = 1) . alice False bob True charles False darwin True dtype: bool . DataFrame에 Series 객체를 더하면 (또는 다른 이항 연산을 수행하면) 판다스는 DataFrame에 있는 모든 행에 이 연산을 브로드캐스팅합니다. 이는 Series 객체가 DataFrame의 행의 개수와 크기가 같을 때만 동작합니다. 예를 들어 DataFrame의 mean(Series 객체)을 빼보죠: . grades - grades.mean() # grades - [7.75, 8.75, 7.50] 와 동일 . sep oct nov . alice 0.25 | -0.75 | 1.5 | . bob 2.25 | 0.25 | 1.5 | . charles -3.75 | -0.75 | -5.5 | . darwin 1.25 | 1.25 | 2.5 | . 모든 9월 성적에서 7.75를 빼고, 10월 성적에서 8.75를 빼고, 11월 성적에서 7.50을 뺍니다. 이는 다음 DataFrame을 빼는 것과 같습니다: . pd.DataFrame([[7.75, 8.75, 7.50]]*4, index=grades.index, columns=grades.columns) . sep oct nov . alice 7.75 | 8.75 | 7.5 | . bob 7.75 | 8.75 | 7.5 | . charles 7.75 | 8.75 | 7.5 | . darwin 7.75 | 8.75 | 7.5 | . 모든 성적의 전체 평균을 빼고 싶다면 다음과 같은 방법을 사용합니다: . grades - grades.values.mean() # 모든 점수에서 전체 평균(8.00)을 뺍니다 . sep oct nov . alice 0.0 | 0.0 | 1.0 | . bob 2.0 | 1.0 | 1.0 | . charles -4.0 | 0.0 | -6.0 | . darwin 1.0 | 2.0 | 2.0 | . &#51088;&#46041; &#51221;&#47148; . Series와 비슷하게 여러 개의 DataFrame에 대한 연산을 수행하면 판다스는 자동으로 행 인덱스 레이블로 정렬하지만 열 이름으로도 정렬할 수 있습니다. 10월부터 12월까지 보너스 포인트를 담은 DataFrame을 만들어 보겠습니다: . bonus_array = np.array([[0,np.nan,2],[np.nan,1,0],[0, 1, 0], [3, 3, 0]]) bonus_points = pd.DataFrame(bonus_array, columns=[&quot;oct&quot;, &quot;nov&quot;, &quot;dec&quot;], index=[&quot;bob&quot;,&quot;colin&quot;, &quot;darwin&quot;, &quot;charles&quot;]) bonus_points . oct nov dec . bob 0.0 | NaN | 2.0 | . colin NaN | 1.0 | 0.0 | . darwin 0.0 | 1.0 | 0.0 | . charles 3.0 | 3.0 | 0.0 | . grades + bonus_points . dec nov oct sep . alice NaN | NaN | NaN | NaN | . bob NaN | NaN | 9.0 | NaN | . charles NaN | 5.0 | 11.0 | NaN | . colin NaN | NaN | NaN | NaN | . darwin NaN | 11.0 | 10.0 | NaN | . 덧셈 연산이 수행되었지만 너무 많은 원소가 NaN이 되었습니다. DataFrame을 정렬할 때 일부 열과 행이 한 쪽에만 있기 때문입니다. 다른 쪽에는 누란되었다고 간주합니다(NaN). NaN에 어떤 수를 더하면 NaN이 됩니다. . &#45572;&#46973;&#46108; &#45936;&#51060;&#53552; &#45796;&#47336;&#44592; . 실제 데이터에서 누락된 데이터를 다루는 경우는 자주 발생합니다. 판다스는 누락된 데이터를 다룰 수 있는 몇 가지 방법을 제공합니다. . 위 데이터에 있는 문제를 해결해 보죠. 예를 들어, 누락된 데이터는 NaN이 아니라 0이 되어야 한다고 결정할 수 있습니다. fillna() 메서드를 사용해 모든 NaN 값을 어떤 값으로 바꿀 수 있습니다: . (grades + bonus_points).fillna(0) . dec nov oct sep . alice 0.0 | 0.0 | 0.0 | 0.0 | . bob 0.0 | 0.0 | 9.0 | 0.0 | . charles 0.0 | 5.0 | 11.0 | 0.0 | . colin 0.0 | 0.0 | 0.0 | 0.0 | . darwin 0.0 | 11.0 | 10.0 | 0.0 | . 9월의 점수를 0으로 만드는 것은 공정하지 않습니다. 누락된 점수는 그대로 두고, 누락된 보너스 포인트는 0으로 바꿀 수 있습니다: . fixed_bonus_points = bonus_points.fillna(0) fixed_bonus_points.insert(0, &quot;sep&quot;, 0) fixed_bonus_points.loc[&quot;alice&quot;] = 0 grades + fixed_bonus_points . dec nov oct sep . alice NaN | 9.0 | 8.0 | 8.0 | . bob NaN | 9.0 | 9.0 | 10.0 | . charles NaN | 5.0 | 11.0 | 4.0 | . colin NaN | NaN | NaN | NaN | . darwin NaN | 11.0 | 10.0 | 9.0 | . 훨씬 낫네요: 일부 데이터를 꾸며냈지만 덜 불공정합니다. . 누락된 값을 다루는 또 다른 방법은 보간입니다. bonus_points DataFrame을 다시 보죠: . bonus_points . oct nov dec . bob 0.0 | NaN | 2.0 | . colin NaN | 1.0 | 0.0 | . darwin 0.0 | 1.0 | 0.0 | . charles 3.0 | 3.0 | 0.0 | . interpolate 메서드를 사용해 보죠. 기본적으로 수직 방향(axis=0)으로 보간합니다. 따라서 수평으로(axis=1)으로 보간하도록 지정합니다. . bonus_points.interpolate(axis=1) . oct nov dec . bob 0.0 | 1.0 | 2.0 | . colin NaN | 1.0 | 0.0 | . darwin 0.0 | 1.0 | 0.0 | . charles 3.0 | 3.0 | 0.0 | . bob의 보너스 포인트는 10월에 0이고 12월에 2입니다. 11월을 보간하면 평균 보너스 포인트 1을 얻습니다. colin의 보너스 포인트는 11월에 1이지만 9월에 포인트는 얼마인지 모릅니다. 따라서 보간할 수 없고 10월의 포인트는 그대로 누락된 값으로 남아 있습니다. 이를 해결하려면 보간하기 전에 9월의 보너스 포인트를 0으로 설정해야 합니다. . better_bonus_points = bonus_points.copy() better_bonus_points.insert(0, &quot;sep&quot;, 0) better_bonus_points.loc[&quot;alice&quot;] = 0 better_bonus_points = better_bonus_points.interpolate(axis=1) better_bonus_points . sep oct nov dec . bob 0.0 | 0.0 | 1.0 | 2.0 | . colin 0.0 | 0.5 | 1.0 | 0.0 | . darwin 0.0 | 0.0 | 1.0 | 0.0 | . charles 0.0 | 3.0 | 3.0 | 0.0 | . alice 0.0 | 0.0 | 0.0 | 0.0 | . 좋습니다. 이제 모든 보너스 포인트가 합리적으로 보간되었습니다. 최종 점수를 확인해 보죠: . grades + better_bonus_points . dec nov oct sep . alice NaN | 9.0 | 8.0 | 8.0 | . bob NaN | 10.0 | 9.0 | 10.0 | . charles NaN | 5.0 | 11.0 | 4.0 | . colin NaN | NaN | NaN | NaN | . darwin NaN | 11.0 | 10.0 | 9.0 | . 9월 열이 오른쪽에 추가되었는데 좀 이상합니다. 이는 더하려는 DataFrame이 정확히 같은 열을 가지고 있지 않기 때문입니다(grade DataFrame에는 &quot;dec&quot; 열이 없습니다). 따라서 판다스는 알파벳 순서로 최종 열을 정렬합니다. 이를 해결하려면 덧셈을 하기 전에 누락된 열을 추가하면 됩니다: . grades[&quot;dec&quot;] = np.nan final_grades = grades + better_bonus_points final_grades . sep oct nov dec . alice 8.0 | 8.0 | 9.0 | NaN | . bob 10.0 | 9.0 | 10.0 | NaN | . charles 4.0 | 11.0 | 5.0 | NaN | . colin NaN | NaN | NaN | NaN | . darwin 9.0 | 10.0 | 11.0 | NaN | . 12월과 colin에 대해 할 수 있는 것이 많지 않습니다. 보너스 포인트를 만드는 것이 나쁘지만 점수를 합리적으로 올릴 수는 없습니다(어떤 선생님들은 그럴 수 있지만). dropna() 메서드를 사용해 모두 NaN인 행을 삭제합니다: . final_grades_clean = final_grades.dropna(how=&quot;all&quot;) final_grades_clean . sep oct nov dec . alice 8.0 | 8.0 | 9.0 | NaN | . bob 10.0 | 9.0 | 10.0 | NaN | . charles 4.0 | 11.0 | 5.0 | NaN | . darwin 9.0 | 10.0 | 11.0 | NaN | . 그다음 axis 매개변수를 1로 지정하여 모두 NaN인 열을 삭제합니다: . final_grades_clean = final_grades_clean.dropna(axis=1, how=&quot;all&quot;) final_grades_clean . sep oct nov . alice 8.0 | 8.0 | 9.0 | . bob 10.0 | 9.0 | 10.0 | . charles 4.0 | 11.0 | 5.0 | . darwin 9.0 | 10.0 | 11.0 | . groupby&#47196; &#51665;&#44228;&#54616;&#44592; . SQL과 비슷하게 판다스는 데이터를 그룹핑하고 각 그룹에 대해 연산을 수행할 수 있습니다. . 먼저 그루핑을 위해 각 사람의 데이터를 추가로 만들겠습니다. NaN 값을 어떻게 다루는지 보기 위해 final_grades DataFrame을 다시 사용하겠습니다: . final_grades[&quot;hobby&quot;] = [&quot;Biking&quot;, &quot;Dancing&quot;, np.nan, &quot;Dancing&quot;, &quot;Biking&quot;] final_grades . sep oct nov dec hobby . alice 8.0 | 8.0 | 9.0 | NaN | Biking | . bob 10.0 | 9.0 | 10.0 | NaN | Dancing | . charles 4.0 | 11.0 | 5.0 | NaN | NaN | . colin NaN | NaN | NaN | NaN | Dancing | . darwin 9.0 | 10.0 | 11.0 | NaN | Biking | . hobby로 이 DataFrame을 그룹핑해 보죠: . grouped_grades = final_grades.groupby(&quot;hobby&quot;) grouped_grades . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7fccd01f18d0&gt; . 이제 hobby마다 평균 점수를 계산할 수 있습니다: . grouped_grades.mean() . sep oct nov dec . hobby . Biking 8.5 | 9.0 | 10.0 | NaN | . Dancing 10.0 | 9.0 | 10.0 | NaN | . 아주 쉽네요! 평균을 계산할 때 NaN 값은 그냥 무시됩니다. . &#54588;&#48391; &#53580;&#51060;&#48660; . 판다스는 스프레드시트와 비슷하 피봇 테이블을 지원하여 데이터를 빠르게 요약할 수 있습니다. 어떻게 동작하는 알아 보기 위해 간단한 DataFrame을 만들어 보죠: . bonus_points . oct nov dec . bob 0.0 | NaN | 2.0 | . colin NaN | 1.0 | 0.0 | . darwin 0.0 | 1.0 | 0.0 | . charles 3.0 | 3.0 | 0.0 | . more_grades = final_grades_clean.stack().reset_index() more_grades.columns = [&quot;name&quot;, &quot;month&quot;, &quot;grade&quot;] more_grades[&quot;bonus&quot;] = [np.nan, np.nan, np.nan, 0, np.nan, 2, 3, 3, 0, 0, 1, 0] more_grades . name month grade bonus . 0 alice | sep | 8.0 | NaN | . 1 alice | oct | 8.0 | NaN | . 2 alice | nov | 9.0 | NaN | . 3 bob | sep | 10.0 | 0.0 | . 4 bob | oct | 9.0 | NaN | . 5 bob | nov | 10.0 | 2.0 | . 6 charles | sep | 4.0 | 3.0 | . 7 charles | oct | 11.0 | 3.0 | . 8 charles | nov | 5.0 | 0.0 | . 9 darwin | sep | 9.0 | 0.0 | . 10 darwin | oct | 10.0 | 1.0 | . 11 darwin | nov | 11.0 | 0.0 | . 이제 이 DataFrame에 대해 pd.pivot_table() 함수를 호출하고 name 열로 그룹핑합니다. 기본적으로 pivot_table()은 수치 열의 평균을 계산합니다: . pd.pivot_table(more_grades, index=&quot;name&quot;) . bonus grade . name . alice NaN | 8.333333 | . bob 1.000000 | 9.666667 | . charles 2.000000 | 6.666667 | . darwin 0.333333 | 10.000000 | . 집계 함수를 aggfunc 매개변수로 바꿀 수 있습니다. 또한 집계 대상의 열을 리스트로 지정할 수 있습니다: . pd.pivot_table(more_grades, index=&quot;name&quot;, values=[&quot;grade&quot;,&quot;bonus&quot;], aggfunc=np.max) . bonus grade . name . alice NaN | 9.0 | . bob 2.0 | 10.0 | . charles 3.0 | 11.0 | . darwin 1.0 | 11.0 | . columns 매개변수를 지정하여 수평으로 집계할 수 있고 margins=True로 설정해 각 행과 열에 대해 전체 합을 계산할 수 있습니다: . pd.pivot_table(more_grades, index=&quot;name&quot;, values=&quot;grade&quot;, columns=&quot;month&quot;, margins=True) . month nov oct sep All . name . alice 9.00 | 8.0 | 8.00 | 8.333333 | . bob 10.00 | 9.0 | 10.00 | 9.666667 | . charles 5.00 | 11.0 | 4.00 | 6.666667 | . darwin 11.00 | 10.0 | 9.00 | 10.000000 | . All 8.75 | 9.5 | 7.75 | 8.666667 | . 마지막으로 여러 개의 인덱스나 열 이름을 지정하면 판다스가 다중 레벨 인덱스를 만듭니다: . pd.pivot_table(more_grades, index=(&quot;name&quot;, &quot;month&quot;), margins=True) . bonus grade . name month . alice nov NaN | 9.00 | . oct NaN | 8.00 | . sep NaN | 8.00 | . bob nov 2.000 | 10.00 | . oct NaN | 9.00 | . sep 0.000 | 10.00 | . charles nov 0.000 | 5.00 | . oct 3.000 | 11.00 | . sep 3.000 | 4.00 | . darwin nov 0.000 | 11.00 | . oct 1.000 | 10.00 | . sep 0.000 | 9.00 | . All 1.125 | 8.75 | . &#54632;&#49688; . 큰 DataFrame을 다룰 때 내용을 간단히 요약하는 것이 도움이 됩니다. 판다스는 이를 위한 몇 가지 함수를 제공합니다. 먼저 수치 값, 누락된 값, 텍스트 값이 섞인 큰 DataFrame을 만들어 보죠. 주피터 노트북은 이 DataFrame의 일부만 보여줍니다: . much_data = np.fromfunction(lambda x,y: (x+y*y)%17*11, (10000, 26)) large_df = pd.DataFrame(much_data, columns=list(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;)) large_df[large_df % 16 == 0] = np.nan large_df.insert(3,&quot;some_text&quot;, &quot;Blabla&quot;) large_df . A B C some_text D E F G H I ... Q R S T U V W X Y Z . 0 NaN | 11.0 | 44.0 | Blabla | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | ... | 11.0 | NaN | 11.0 | 44.0 | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | . 1 11.0 | 22.0 | 55.0 | Blabla | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | ... | 22.0 | 11.0 | 22.0 | 55.0 | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | . 2 22.0 | 33.0 | 66.0 | Blabla | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | ... | 33.0 | 22.0 | 33.0 | 66.0 | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | . 3 33.0 | 44.0 | 77.0 | Blabla | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | ... | 44.0 | 33.0 | 44.0 | 77.0 | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | . 4 44.0 | 55.0 | 88.0 | Blabla | 143.0 | 33.0 | 132.0 | 66.0 | 22.0 | NaN | ... | 55.0 | 44.0 | 55.0 | 88.0 | 143.0 | 33.0 | 132.0 | 66.0 | 22.0 | NaN | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 9995 NaN | NaN | 33.0 | Blabla | 88.0 | 165.0 | 77.0 | 11.0 | 154.0 | 132.0 | ... | NaN | NaN | NaN | 33.0 | 88.0 | 165.0 | 77.0 | 11.0 | 154.0 | 132.0 | . 9996 NaN | 11.0 | 44.0 | Blabla | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | ... | 11.0 | NaN | 11.0 | 44.0 | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | . 9997 11.0 | 22.0 | 55.0 | Blabla | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | ... | 22.0 | 11.0 | 22.0 | 55.0 | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | . 9998 22.0 | 33.0 | 66.0 | Blabla | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | ... | 33.0 | 22.0 | 33.0 | 66.0 | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | . 9999 33.0 | 44.0 | 77.0 | Blabla | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | ... | 44.0 | 33.0 | 44.0 | 77.0 | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | . 10000 rows × 27 columns . head() 메서드는 처음 5개 행을 반환합니다: . large_df.head() . A B C some_text D E F G H I ... Q R S T U V W X Y Z . 0 NaN | 11.0 | 44.0 | Blabla | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | ... | 11.0 | NaN | 11.0 | 44.0 | 99.0 | NaN | 88.0 | 22.0 | 165.0 | 143.0 | . 1 11.0 | 22.0 | 55.0 | Blabla | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | ... | 22.0 | 11.0 | 22.0 | 55.0 | 110.0 | NaN | 99.0 | 33.0 | NaN | 154.0 | . 2 22.0 | 33.0 | 66.0 | Blabla | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | ... | 33.0 | 22.0 | 33.0 | 66.0 | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | . 3 33.0 | 44.0 | 77.0 | Blabla | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | ... | 44.0 | 33.0 | 44.0 | 77.0 | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | . 4 44.0 | 55.0 | 88.0 | Blabla | 143.0 | 33.0 | 132.0 | 66.0 | 22.0 | NaN | ... | 55.0 | 44.0 | 55.0 | 88.0 | 143.0 | 33.0 | 132.0 | 66.0 | 22.0 | NaN | . 5 rows × 27 columns . 마지막 5개 행을 반환하는 tail() 함수도 있습니다. 원하는 행 개수를 전달할 수도 있습니다: . large_df.tail(n=2) . A B C some_text D E F G H I ... Q R S T U V W X Y Z . 9998 22.0 | 33.0 | 66.0 | Blabla | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | ... | 33.0 | 22.0 | 33.0 | 66.0 | 121.0 | 11.0 | 110.0 | 44.0 | NaN | 165.0 | . 9999 33.0 | 44.0 | 77.0 | Blabla | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | ... | 44.0 | 33.0 | 44.0 | 77.0 | 132.0 | 22.0 | 121.0 | 55.0 | 11.0 | NaN | . 2 rows × 27 columns . info() 메서드는 각 열의 내용을 요약하여 출력합니다: . large_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 10000 entries, 0 to 9999 Data columns (total 27 columns): # Column Non-Null Count Dtype -- -- 0 A 8823 non-null float64 1 B 8824 non-null float64 2 C 8824 non-null float64 3 some_text 10000 non-null object 4 D 8824 non-null float64 5 E 8822 non-null float64 6 F 8824 non-null float64 7 G 8824 non-null float64 8 H 8822 non-null float64 9 I 8823 non-null float64 10 J 8823 non-null float64 11 K 8822 non-null float64 12 L 8824 non-null float64 13 M 8824 non-null float64 14 N 8822 non-null float64 15 O 8824 non-null float64 16 P 8824 non-null float64 17 Q 8824 non-null float64 18 R 8823 non-null float64 19 S 8824 non-null float64 20 T 8824 non-null float64 21 U 8824 non-null float64 22 V 8822 non-null float64 23 W 8824 non-null float64 24 X 8824 non-null float64 25 Y 8822 non-null float64 26 Z 8823 non-null float64 dtypes: float64(26), object(1) memory usage: 2.1+ MB . 마지막으로 describe() 메서드는 각 열에 대한 주요 집계 연산을 수행한 결과를 보여줍니다: . Finally, the describe() method gives a nice overview of the main aggregated values over each column: . count: null(NaN)이 아닌 값의 개수 | mean: null이 아닌 값의 평균 | std: null이 아닌 값의 표준 편차 | min: null이 아닌 값의 최솟값 | 25%, 50%, 75%: null이 아닌 값의 25번째, 50번째, 75번째 백분위수 | max: null이 아닌 값의 최댓값 | . large_df.describe() . A B C D E F G H I J ... Q R S T U V W X Y Z . count 8823.000000 | 8824.000000 | 8824.000000 | 8824.000000 | 8822.000000 | 8824.000000 | 8824.000000 | 8822.000000 | 8823.000000 | 8823.000000 | ... | 8824.000000 | 8823.000000 | 8824.000000 | 8824.000000 | 8824.000000 | 8822.000000 | 8824.000000 | 8824.000000 | 8822.000000 | 8823.000000 | . mean 87.977559 | 87.972575 | 87.987534 | 88.012466 | 87.983791 | 88.007480 | 87.977561 | 88.000000 | 88.022441 | 88.022441 | ... | 87.972575 | 87.977559 | 87.972575 | 87.987534 | 88.012466 | 87.983791 | 88.007480 | 87.977561 | 88.000000 | 88.022441 | . std 47.535911 | 47.535523 | 47.521679 | 47.521679 | 47.535001 | 47.519371 | 47.529755 | 47.536879 | 47.535911 | 47.535911 | ... | 47.535523 | 47.535911 | 47.535523 | 47.521679 | 47.521679 | 47.535001 | 47.519371 | 47.529755 | 47.536879 | 47.535911 | . min 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | ... | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | 11.000000 | . 25% 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | ... | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | 44.000000 | . 50% 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | ... | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | 88.000000 | . 75% 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | ... | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | 132.000000 | . max 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | ... | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | 165.000000 | . 8 rows × 26 columns . &#51200;&#51109; &amp; &#47196;&#46377; . 판다스는 DataFrame를 여러 가지 포맷으로 저장할 수 있습니다. CSV, Excel, JSON, HTML, HDF5, SQL 데이터베이스 같은 포맷이 가능합니다. 예제를 위해 DataFrame을 하나 만들어 보겠습니다: . my_df = pd.DataFrame( [[&quot;Biking&quot;, 68.5, 1985, np.nan], [&quot;Dancing&quot;, 83.1, 1984, 3]], columns=[&quot;hobby&quot;,&quot;weight&quot;,&quot;birthyear&quot;,&quot;children&quot;], index=[&quot;alice&quot;, &quot;bob&quot;] ) my_df . hobby weight birthyear children . alice Biking | 68.5 | 1985 | NaN | . bob Dancing | 83.1 | 1984 | 3.0 | . &#51200;&#51109; . CSV, HTML, JSON로 저장해 보죠: . my_df.to_csv(&quot;my_df.csv&quot;) my_df.to_html(&quot;my_df.html&quot;) my_df.to_json(&quot;my_df.json&quot;) . 저장된 내용을 확인해 보죠: . for filename in (&quot;my_df.csv&quot;, &quot;my_df.html&quot;, &quot;my_df.json&quot;): print(&quot;#&quot;, filename) with open(filename, &quot;rt&quot;) as f: print(f.read()) print() . # my_df.csv ,hobby,weight,birthyear,children alice,Biking,68.5,1985, bob,Dancing,83.1,1984,3.0 # my_df.html &lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt; &lt;thead&gt; &lt;tr style=&#34;text-align: right;&#34;&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;hobby&lt;/th&gt; &lt;th&gt;weight&lt;/th&gt; &lt;th&gt;birthyear&lt;/th&gt; &lt;th&gt;children&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;alice&lt;/th&gt; &lt;td&gt;Biking&lt;/td&gt; &lt;td&gt;68.5&lt;/td&gt; &lt;td&gt;1985&lt;/td&gt; &lt;td&gt;NaN&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;bob&lt;/th&gt; &lt;td&gt;Dancing&lt;/td&gt; &lt;td&gt;83.1&lt;/td&gt; &lt;td&gt;1984&lt;/td&gt; &lt;td&gt;3.0&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; # my_df.json {&#34;hobby&#34;:{&#34;alice&#34;:&#34;Biking&#34;,&#34;bob&#34;:&#34;Dancing&#34;},&#34;weight&#34;:{&#34;alice&#34;:68.5,&#34;bob&#34;:83.1},&#34;birthyear&#34;:{&#34;alice&#34;:1985,&#34;bob&#34;:1984},&#34;children&#34;:{&#34;alice&#34;:null,&#34;bob&#34;:3.0}} . 인덱스는 (이름 없이) CSV 파일의 첫 번째 열에 저장되었습니다. HTML에서는 &lt;th&gt; 태그와 JSON에서는 키로 저장되었습니다. . 다른 포맷으로 저장하는 것도 비슷합니다. 하지만 일부 포맷은 추가적인 라이브러리 설치가 필요합니다. 예를 들어, 엑셀로 저장하려면 openpyxl 라이브러리가 필요합니다: . try: my_df.to_excel(&quot;my_df.xlsx&quot;, sheet_name=&#39;People&#39;) except ImportError as e: print(e) . No module named &#39;openpyxl&#39; . &#47196;&#46377; . CSV 파일을 DataFrame으로 로드해 보죠: . my_df_loaded = pd.read_csv(&quot;my_df.csv&quot;, index_col=0) my_df_loaded . hobby weight birthyear children . alice Biking | 68.5 | 1985 | NaN | . bob Dancing | 83.1 | 1984 | 3.0 | . 예상할 수 있듯이 read_json, read_html, read_excel 함수도 있습니다. 인터넷에서 데이터를 바로 읽을 수도 있습니다. 예를 들어 깃허브에서 1,000개의 U.S. 도시를 로드해 보죠: . us_cities = None try: csv_url = &quot;https://raw.githubusercontent.com/plotly/datasets/master/us-cities-top-1k.csv&quot; us_cities = pd.read_csv(csv_url, index_col=0) us_cities = us_cities.head() except IOError as e: print(e) us_cities . HTTP Error 403: Forbidden . 이외에도 많은 옵션이 있습니다. 특히 datetime 포맷에 관련된 옵션이 많습니다. 더 자세한 내용은 온라인 문서를 참고하세요. . DataFrame &#54633;&#52824;&#44592; . SQL &#51312;&#51064; . 판다스의 강력한 기능 중 하나는 DataFrame에 대해 SQL 같은 조인(join)을 수행할 수 있는 것입니다. 여러 종류의 조인이 지원됩니다. 이너 조인(inner join), 레프트/라이트 아우터 조인(left/right outer join), 풀 조인(full join)입니다. 이에 대해 알아 보기 위해 간단한 DataFrame을 만들어 보죠: . city_loc = pd.DataFrame( [ [&quot;CA&quot;, &quot;San Francisco&quot;, 37.781334, -122.416728], [&quot;NY&quot;, &quot;New York&quot;, 40.705649, -74.008344], [&quot;FL&quot;, &quot;Miami&quot;, 25.791100, -80.320733], [&quot;OH&quot;, &quot;Cleveland&quot;, 41.473508, -81.739791], [&quot;UT&quot;, &quot;Salt Lake City&quot;, 40.755851, -111.896657] ], columns=[&quot;state&quot;, &quot;city&quot;, &quot;lat&quot;, &quot;lng&quot;]) city_loc . state city lat lng . 0 CA | San Francisco | 37.781334 | -122.416728 | . 1 NY | New York | 40.705649 | -74.008344 | . 2 FL | Miami | 25.791100 | -80.320733 | . 3 OH | Cleveland | 41.473508 | -81.739791 | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | . city_pop = pd.DataFrame( [ [808976, &quot;San Francisco&quot;, &quot;California&quot;], [8363710, &quot;New York&quot;, &quot;New-York&quot;], [413201, &quot;Miami&quot;, &quot;Florida&quot;], [2242193, &quot;Houston&quot;, &quot;Texas&quot;] ], index=[3,4,5,6], columns=[&quot;population&quot;, &quot;city&quot;, &quot;state&quot;]) city_pop . population city state . 3 808976 | San Francisco | California | . 4 8363710 | New York | New-York | . 5 413201 | Miami | Florida | . 6 2242193 | Houston | Texas | . 이제 merge() 함수를 사용해 이 DataFrame을 조인해 보죠: . pd.merge(left=city_loc, right=city_pop, on=&quot;city&quot;) . state_x city lat lng population state_y . 0 CA | San Francisco | 37.781334 | -122.416728 | 808976 | California | . 1 NY | New York | 40.705649 | -74.008344 | 8363710 | New-York | . 2 FL | Miami | 25.791100 | -80.320733 | 413201 | Florida | . 두 DataFrame은 state란 이름의 열을 가지고 있으므로 state_x와 state_y로 이름이 바뀌었습니다. . 또한 Cleveland, Salt Lake City, Houston은 두 DataFrame에 모두 존재하지 않기 때문에 삭제되었습니다. SQL의 INNER JOIN과 동일합니다. 도시를 삭제하지 않고 NaN으로 채우는 FULL OUTER JOIN을 원하면 how=&quot;outer&quot;로 지정합니다: . all_cities = pd.merge(left=city_loc, right=city_pop, on=&quot;city&quot;, how=&quot;outer&quot;) all_cities . state_x city lat lng population state_y . 0 CA | San Francisco | 37.781334 | -122.416728 | 808976.0 | California | . 1 NY | New York | 40.705649 | -74.008344 | 8363710.0 | New-York | . 2 FL | Miami | 25.791100 | -80.320733 | 413201.0 | Florida | . 3 OH | Cleveland | 41.473508 | -81.739791 | NaN | NaN | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | NaN | NaN | . 5 NaN | Houston | NaN | NaN | 2242193.0 | Texas | . 물론 LEFT OUTER JOIN은 how=&quot;left&quot;로 지정할 수 있습니다. 왼쪽의 DataFrame에 있는 도시만 남습니다. 비슷하게 how=&quot;right&quot;는 오른쪽 DataFrame에 있는 도시만 결과에 남습니다. 예를 들면: . pd.merge(left=city_loc, right=city_pop, on=&quot;city&quot;, how=&quot;right&quot;) . state_x city lat lng population state_y . 0 CA | San Francisco | 37.781334 | -122.416728 | 808976 | California | . 1 NY | New York | 40.705649 | -74.008344 | 8363710 | New-York | . 2 FL | Miami | 25.791100 | -80.320733 | 413201 | Florida | . 3 NaN | Houston | NaN | NaN | 2242193 | Texas | . 조인할 키가 DataFrame 인덱스라면 left_index=True나 right_index=True로 지정해야 합니다. 키 열의 이름이 다르면 left_on과 right_on을 사용합니다. 예를 들어: . city_pop2 = city_pop.copy() city_pop2.columns = [&quot;population&quot;, &quot;name&quot;, &quot;state&quot;] pd.merge(left=city_loc, right=city_pop2, left_on=&quot;city&quot;, right_on=&quot;name&quot;) . state_x city lat lng population name state_y . 0 CA | San Francisco | 37.781334 | -122.416728 | 808976 | San Francisco | California | . 1 NY | New York | 40.705649 | -74.008344 | 8363710 | New York | New-York | . 2 FL | Miami | 25.791100 | -80.320733 | 413201 | Miami | Florida | . &#50672;&#44208; . DataFrame을 조인하는 대신 그냥 연결할 수도 있습니다. concat() 함수가 하는 일입니다: . result_concat = pd.concat([city_loc, city_pop]) result_concat . state city lat lng population . 0 CA | San Francisco | 37.781334 | -122.416728 | NaN | . 1 NY | New York | 40.705649 | -74.008344 | NaN | . 2 FL | Miami | 25.791100 | -80.320733 | NaN | . 3 OH | Cleveland | 41.473508 | -81.739791 | NaN | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | NaN | . 3 California | San Francisco | NaN | NaN | 808976.0 | . 4 New-York | New York | NaN | NaN | 8363710.0 | . 5 Florida | Miami | NaN | NaN | 413201.0 | . 6 Texas | Houston | NaN | NaN | 2242193.0 | . 이 연산은 (행을 따라) 수직적으로 데이터를 연결하고 (열을 따라) 수평으로 연결하지 않습니다. 이 예에서 동일한 인덱스를 가진 행이 있습니다(예를 들면 3). 판다스는 이를 우아하게 처리합니다: . result_concat.loc[3] . state city lat lng population . 3 OH | Cleveland | 41.473508 | -81.739791 | NaN | . 3 California | San Francisco | NaN | NaN | 808976.0 | . 또는 인덱스를 무시하도록 설정할 수 있습니다: . pd.concat([city_loc, city_pop], ignore_index=True) . state city lat lng population . 0 CA | San Francisco | 37.781334 | -122.416728 | NaN | . 1 NY | New York | 40.705649 | -74.008344 | NaN | . 2 FL | Miami | 25.791100 | -80.320733 | NaN | . 3 OH | Cleveland | 41.473508 | -81.739791 | NaN | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | NaN | . 5 California | San Francisco | NaN | NaN | 808976.0 | . 6 New-York | New York | NaN | NaN | 8363710.0 | . 7 Florida | Miami | NaN | NaN | 413201.0 | . 8 Texas | Houston | NaN | NaN | 2242193.0 | . 한 DataFrame에 열이 없을 때 NaN이 채워져 있는 것처럼 동작합니다. join=&quot;inner&quot;로 설정하면 양쪽의 DataFrame에 존재하는 열만 반환됩니다: . pd.concat([city_loc, city_pop], join=&quot;inner&quot;) . state city . 0 CA | San Francisco | . 1 NY | New York | . 2 FL | Miami | . 3 OH | Cleveland | . 4 UT | Salt Lake City | . 3 California | San Francisco | . 4 New-York | New York | . 5 Florida | Miami | . 6 Texas | Houston | . axis=1로 설정하면 DataFrame을 수직이 아니라 수평으로 연결할 수 있습니다: . pd.concat([city_loc, city_pop], axis=1) . state city lat lng population city state . 0 CA | San Francisco | 37.781334 | -122.416728 | NaN | NaN | NaN | . 1 NY | New York | 40.705649 | -74.008344 | NaN | NaN | NaN | . 2 FL | Miami | 25.791100 | -80.320733 | NaN | NaN | NaN | . 3 OH | Cleveland | 41.473508 | -81.739791 | 808976.0 | San Francisco | California | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | 8363710.0 | New York | New-York | . 5 NaN | NaN | NaN | NaN | 413201.0 | Miami | Florida | . 6 NaN | NaN | NaN | NaN | 2242193.0 | Houston | Texas | . 이 경우 인덱스가 잘 정렬되지 않기 때문에 의미가 없습니다(예를 들어 Cleveland와 San Francisco의 인덱스 레이블이 3이기 때문에 동일한 행에 놓여 있습니다). 이 DataFrame을 연결하기 전에 도시로 인덱스를 재설정해 보죠: . pd.concat([city_loc.set_index(&quot;city&quot;), city_pop.set_index(&quot;city&quot;)], axis=1) . state lat lng population state . San Francisco CA | 37.781334 | -122.416728 | 808976.0 | California | . New York NY | 40.705649 | -74.008344 | 8363710.0 | New-York | . Miami FL | 25.791100 | -80.320733 | 413201.0 | Florida | . Cleveland OH | 41.473508 | -81.739791 | NaN | NaN | . Salt Lake City UT | 40.755851 | -111.896657 | NaN | NaN | . Houston NaN | NaN | NaN | 2242193.0 | Texas | . FULL OUTER JOIN을 수행한 것과 비슷합니다. 하지만 state 열이 state_x와 state_y로 바뀌지 않았고 city 열이 인덱스가 되었습니다. . append() 메서드는 DataFrame을 수직으로 연결하는 단축 메서드입니다: . city_loc.append(city_pop) . state city lat lng population . 0 CA | San Francisco | 37.781334 | -122.416728 | NaN | . 1 NY | New York | 40.705649 | -74.008344 | NaN | . 2 FL | Miami | 25.791100 | -80.320733 | NaN | . 3 OH | Cleveland | 41.473508 | -81.739791 | NaN | . 4 UT | Salt Lake City | 40.755851 | -111.896657 | NaN | . 3 California | San Francisco | NaN | NaN | 808976.0 | . 4 New-York | New York | NaN | NaN | 8363710.0 | . 5 Florida | Miami | NaN | NaN | 413201.0 | . 6 Texas | Houston | NaN | NaN | 2242193.0 | . 판다스의 다른 메서드와 마찬가지로 append() 메서드는 실제 city_loc을 수정하지 않습니다. 복사본을 만들어 수정한 다음 반환합니다. . &#48276;&#51452; . 범주로 표현된 값을 가진 경우가 흔합니다. 예를 들어 1은 여성, 2는 남성이거나 &quot;A&quot;는 좋은 것, &quot;B&quot;는 평균, &quot;C&quot;는 나쁜 것 등입니다. 범주형 값을 읽기 힘들고 다루기 번거롭습니다. 하지만 판다스에서는 간단합니다. 예를 들기 위해 앞서 만든 city_pop DataFrame에 범주를 표현하는 열을 추가해 보겠습니다: . city_eco = city_pop.copy() city_eco[&quot;eco_code&quot;] = [17, 17, 34, 20] city_eco . population city state eco_code . 3 808976 | San Francisco | California | 17 | . 4 8363710 | New York | New-York | 17 | . 5 413201 | Miami | Florida | 34 | . 6 2242193 | Houston | Texas | 20 | . 이제 eco_code열은 의미없는 코드입니다. 이를 바꿔 보죠. 먼저 eco_code를 기반으로 새로운 범주형 열을 만듭니다: . city_eco[&quot;economy&quot;] = city_eco[&quot;eco_code&quot;].astype(&#39;category&#39;) city_eco[&quot;economy&quot;].cat.categories . Int64Index([17, 20, 34], dtype=&#39;int64&#39;) . 의미있는 이름을 가진 범주를 지정할 수 있습니다: . city_eco[&quot;economy&quot;].cat.categories = [&quot;Finance&quot;, &quot;Energy&quot;, &quot;Tourism&quot;] city_eco . population city state eco_code economy . 3 808976 | San Francisco | California | 17 | Finance | . 4 8363710 | New York | New-York | 17 | Finance | . 5 413201 | Miami | Florida | 34 | Tourism | . 6 2242193 | Houston | Texas | 20 | Energy | . 범주형 값은 알파벳 순서가 아니라 범주형 순서로 정렬합니다: . city_eco.sort_values(by=&quot;economy&quot;, ascending=False) . population city state eco_code economy . 5 413201 | Miami | Florida | 34 | Tourism | . 6 2242193 | Houston | Texas | 20 | Energy | . 3 808976 | San Francisco | California | 17 | Finance | . 4 8363710 | New York | New-York | 17 | Finance | . &#44536; &#45796;&#51020;&#50644;? . 이제 알았겠지만 판다스는 매우 커다란 라이브러리이고 기능이 많습니다. 가장 중요한 기능들을 둘러 보았지만 빙산의 일각일 뿐입니다. 더 많은 것을 익히려면 실전 데이터로 직접 실습해 보는 것이 제일 좋습니다. 판다스의 훌륭한 문서와 쿡북을 보는 것도 좋습니다. .",
            "url": "https://chanseongparkk.github.io/cspBlog/jupyter/python/2022/03/16/pandas.html",
            "relUrl": "/jupyter/python/2022/03/16/pandas.html",
            "date": " • Mar 16, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "test_markdown_post",
            "content": "Markdown Cheat Sheet . Thanks for visiting The Markdown Guide! . This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can?™t cover every edge case, so if you need more information about any of these elements, refer to the reference guides for basic syntax and extended syntax. . Basic Syntax . These are the elements outlined in John Gruber?™s original design document. All Markdown applications support these elements. . Heading . H1 . H2 . H3 . Bold . bold text . Italic . italicized text . Blockquote . blockquote . Ordered List . First item | Second item | Third item | Unordered List . First item | Second item | Third item | . Code . code . Horizontal Rule . . Link . Markdown Guide . Image . . Extended Syntax . These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements. . Table . Syntax Description . Header | Title | . Paragraph | Text | . Fenced Code Block . { &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25 } . Footnote . Here’s a sentence with a footnote. 1 . Heading ID . My Great Heading . Definition List . term definition Strikethrough . The world is flat. . Task List . Write the press release | Update the website | Contact the media | . Emoji . That is so funny! :joy: . (See also Copying and Pasting Emoji) . Highlight . I need to highlight these ==very important words==. . Subscript . H~2~O . Superscript . X^2^ . This is the footnote. &#8617; . |",
            "url": "https://chanseongparkk.github.io/cspBlog/markdown/2022/03/11/test.html",
            "relUrl": "/markdown/2022/03/11/test.html",
            "date": " • Mar 11, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Basic Python",
            "content": "a = [1,2,3] b = a . a.append(4) # a에 4를 붙인다. b #b를 a에 저장 후 a값이 변하면 b의 값도 따라 변한다 . [1, 2, 3, 4] . &#45824;,&#49548;&#47928;&#51088;&#47196; &#48320;&#44221; . a = &quot;foo&quot; print(a.capitalize()) #앞문자만 대문자 a = a.upper() # 대문자로 변경 print(a) . Foo FOO . a = a.lower() # 소문자로 변경 a . &#39;foo&#39; . &#47784;&#46280; . 개발자들은 일반적으로 결과물을 만들때 모듈 단위로 저장한다. | 모듈을 불러오면 각 모듈에서 저장한 기능을 파이썬에서 사용 가능하다. | ipynb 파일을 py 파일로 저장하면 모듈로 저장이 가능하다. | . some_module . PI = 3.14159 . def f(x): return x+2 . def g(a,b): return a+b . import some_module print(some_module.f(7)) print(some_module.g(1,2)) . 9 3 . some_module.PI . 3.14159 . from some_module import f, g, PI f(g(1,PI)) . 6.14159 . import some_module as sm sm.f(3) . 5 . &#47532;&#49828;&#53944;&#50752; &#53916;&#54540; . a_list = [&quot;foo&quot;,1,2,[3,4]] #리스트는 여러 type를 저장할 수 있다. 또한 원소를 변경 및 삽입할 수 있다. print(a_list) print(a_list[3]) . [&#39;foo&#39;, 1, 2, [3, 4]] [3, 4] . a_tuple = (2,3,(4,5),&quot;hello&quot;) print(a_tuple) a_tuple[1] = &quot;hello&quot; #튜플은 원소의 삭제, 변경, 삽입이 불가능하다 . (2, 3, (4, 5), &#39;hello&#39;) . TypeError Traceback (most recent call last) &lt;ipython-input-10-8323898947be&gt; in &lt;module&gt; 2 a_tuple = (2,3,(4,5),&#34;hello&#34;) 3 print(a_tuple) -&gt; 4 a_tuple[1] = &#34;hello&#34; #튜플은 원소의 삭제, 변경, 삽입이 불가능하다 TypeError: &#39;tuple&#39; object does not support item assignment . STRING Type . a = &quot;This is the first half&quot; b = &quot;and this is the second half&quot; a + b . &#39;This is the first halfand this is the second half&#39; . c = &quot;&quot;&quot; hello world i&#39;m Chanseong Park &quot;&quot;&quot; c . &#34; nhello world ni&#39;m Chanseong Park n&#34; . c.count(&quot; n&quot;) . 3 . template = &quot;{0:.2f} {1:s} are worth US${2:d}&quot; template . &#39;{0:.2f} {1:s} are worth US${2:d}&#39; . print(template.format(1234.56,&quot;won&quot;,1)) print(template.format(130,&quot;yen&quot;,1)) . 1234.56 won are worth US$1 130.00 yen are worth US$1 . None . R의 NULL 개념과 유사하다. | 빈 공간을 생성하는 것이다. | . a = None a is None . True . b = 5 b is None . False . def add_and_maybe_multiply(a,b,c=None): if(c != None): x = (a+b)*c else: x = a+b return x . print(add_and_maybe_multiply(1,2)) print(add_and_maybe_multiply(1,2,10)) . 3 30 . break, countinue, pass . 반복문에 사용하는 제어문 | . x = 256 total = 0 while(x &gt; 0): if(total&gt;500): #total이 500이 넘으면 while문 탈출 break total += x #total은 while문이 한 번 돌때마다 x와 더해진 값으로 저장 x = x//2 #x는 while문이 힌 번 돌때마다 2로 나눈 몫으로 저장 total . 504 . 256+128+64+32+16+8 . 504 . seq = [1,2,3,None,5,6,None,8,9] tot = 0 for i in seq: if i == None: #i가 None이면 그냥 넘어간다. 이렇게 하지 않으면 None값의 연산은 불가능하기에 에러가 뜬다. continue else: tot += i . tot . 34 . print(&quot;x를 입력하세요:&quot;) x = int(input()) if x &lt; 0 : print(&quot;negative&quot;) elif x == 0 : #x가 0이면 아무것도 나오지 않는다. pass else: print(&quot;positive&quot;) . x를 입력하세요: 10 positive . &#54028;&#51060;&#50028; &#49340;&#54637;&#50672;&#49328;&#51088; . [true_value] if [condition] else [false_value] | . aa = 0 bb = 1 if aa ==0 else aa # aa가 0이면 bb는 1이고 aa가 0이 아니라면 bb는 aa값을 갖는다 print(aa) print(bb) . 0 1 . aa = 60 bb = 1 if aa ==0 else aa # aa가 0이면 bb는 1이고 aa가 0이 아니라면 bb는 aa값을 갖는다 print(aa) print(bb) . 60 60 . aa = 100 bb = 15 if aa &gt; 150 else 20 # aa가 150 이상이면 bb는 15이고 aa가 150이상이 아니라면 bb는 20의 값을 갖는다 print(aa) print(bb) . 100 20 .",
            "url": "https://chanseongparkk.github.io/cspBlog/jupyter/python/2022/03/04/Python_basic.html",
            "relUrl": "/jupyter/python/2022/03/04/Python_basic.html",
            "date": " • Mar 4, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chanseongparkk.github.io/cspBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://chanseongparkk.github.io/cspBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "about me . 안녕하세요. 한남대학교 비즈니스통계학과 16학번 박찬성입니다. . 관심 분야 . 공간 데이터 분석 . 사용 가능한 tool . R | Python | .",
          "url": "https://chanseongparkk.github.io/cspBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chanseongparkk.github.io/cspBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}